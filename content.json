{"meta":{"title":"625's blog","subtitle":"每天砍点柴","description":"求知若渴，虚心若愚","author":625,"url":"https://kanchai.club","root":"/625/"},"pages":[],"posts":[{"title":"通用列表排序实现","slug":"通用列表排序实现","date":"2020-03-17T14:42:36.296Z","updated":"2020-03-17T14:42:13.000Z","comments":true,"path":"2020/03/17/通用列表排序实现/","link":"","permalink":"https://kanchai.club/2020/03/17/%E9%80%9A%E7%94%A8%E5%88%97%E8%A1%A8%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/","excerpt":"","text":"之前做过好多外包都没写过排序的实现，这次发现同事写的有问题，所以手动实现一个。不知是否有用。直接上代码。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168/** * 给表的排序字段排序 * * @author: 李涛 * @version: 2019年07月17日 16:51 */@Api(tags = \"给列表排序\")@RestController@RequestMapping(\"/common/sort\")@Validatedpublic class SortTableController &#123; @Autowired private ICommonSV commonSV; /** * 拖拽标志对应的表和字段 */ private static final Map&lt;String, String&gt; tables = new HashMap&lt;&gt;(); /** * 拖拽标志对应的表和字段 */ private static final Map&lt;String, String&gt; tablesWhere = new HashMap&lt;&gt;(); static &#123; // 表名 tables.put(\"app_banner\", \"sort_num\"); tables.put(\"app_health_plate\", \"sort_num\"); tables.put(\"app_start_page\", \"sort_num\"); tables.put(\"clinic_manual\", \"sort\"); tables.put(\"sys_menu\", \"menu_order\"); tables.put(\"nav_dept_adv\", \"sort_num\"); // 排序条件 tablesWhere.put(\"sys_menu\", \"and parent_id = #&#123;params.p0&#125;\"); tablesWhere.put(\"clinic_manual\", \"and deleted !='01' \"); &#125; @Log @ApiOperation(\"排序\") @ApiImplicitParams(&#123; @ApiImplicitParam(value = \"拖拽标志(nav_doctor_infor,nav_popu_dept_infor,nav_quick_entry_infor)\", name = \"tableName\", paramType = \"form\"), @ApiImplicitParam(value = \"上\", name = \"top\", paramType = \"form\"), @ApiImplicitParam(value = \"中\", name = \"mid\", paramType = \"form\"), @ApiImplicitParam(value = \"下\", name = \"bottom\", paramType = \"form\"), @ApiImplicitParam(value = \"条件\", name = \"whereCase\", paramType = \"form\"), &#125;) @Transactional @PostMapping(\"/sortTable\") public APIResponse sortTable( @NotNull String tableName, Long top, @NotNull Long mid, Long bottom, String[] whereCase ) &#123; String sort = tables.get(tableName); if (StringUtils.isBlank(sort)) &#123; throw new UnsupportedOperationException(); &#125; Map&lt;String, Object&gt; params = new HashMap&lt;&gt;(); //根据上下判定是上移还是下移 Boolean down = null; Long midSort = null; Long topSort = null; Long bottomSort = null; if (top == null) &#123; down = false; &#125; else if (bottom == null) &#123; down = true; &#125; else &#123; midSort = findSort(mid, tableName); topSort = findSort(top, tableName); bottomSort = findSort(bottom, tableName); down = midSort &gt; topSort &amp;&amp; midSort &gt; bottomSort; &#125; // 执行更新操作 String updateSql = null; if (down) &#123; if (topSort == null) &#123; topSort = findSort(top, tableName); &#125; List&lt;Long&gt; ids = findIds(top, mid, tableName, whereCase, \"first\"); if (ids.isEmpty()) &#123; return APIResponseBuilder.successNoData(); &#125; updateSql = \"update \" + tableName + \" set \" + sort + \" = \" + sort + \" + 1 where id in ( \" + StringUtils.join(ids, \",\") + \" )\"; commonSV.updateByParams(updateSql, params); params.put(\"newSort\", topSort); params.put(\"id\", mid); updateSql = \"update \" + tableName + \" set \" + sort + \" = #&#123;params.newSort&#125; where id = #&#123;params.id&#125; \"; commonSV.updateByParams(updateSql, params); &#125; else if (!down) &#123; if (bottomSort == null) &#123; bottomSort = findSort(bottom, tableName); &#125; List&lt;Long&gt; ids = findIds(mid, bottom, tableName, whereCase, \"last\"); if (ids.isEmpty()) &#123; return APIResponseBuilder.successNoData(); &#125; updateSql = \"update \" + tableName + \" set \" + sort + \" = \" + sort + \" - 1 where id in ( \" + StringUtils.join(ids, \",\") + \" )\"; commonSV.updateByParams(updateSql, params); params.put(\"newSort\", bottomSort); params.put(\"id\", mid); updateSql = \"update \" + tableName + \" set \" + sort + \" = #&#123;params.newSort&#125; where id = #&#123;params.id&#125; \"; commonSV.updateByParams(updateSql, params); &#125; return APIResponseBuilder.successNoDataWithMsg(\"排序成功!\"); &#125; /** * 查询两个ID之间的ID有哪些 * * @param startId * @param endId * @param tableName * @param whereCase * @param removeTag * @return */ private List&lt;Long&gt; findIds(Long startId, Long endId, String tableName, String[] whereCase, String removeTag) &#123; String sort = tables.get(tableName); String sql = \" select id \" + \" from \" + tableName + \" \" + \" where \" + sort + \" &gt;= (select \" + sort + \" from \" + tableName + \" where id = #&#123;params.startId&#125;) \" + \" and \" + sort + \" &lt;= (select \" + sort + \" from \" + tableName + \" where id = #&#123;params.endId&#125;) \"; String whereCaseStr = tablesWhere.get(tableName); if (whereCaseStr != null) &#123; sql += whereCaseStr; &#125; sql += \" order by \" + sort + \" desc \"; Map&lt;String, Object&gt; params = new HashMap&lt;&gt;(); params.put(\"startId\", startId); params.put(\"endId\", endId); if (whereCase != null &amp;&amp; whereCase.length &gt; 0) &#123; for (int i = 0; i &lt; whereCase.length; i++) &#123; params.put(\"p\" + i, whereCase[i]); &#125; &#125; List&lt;JSONObject&gt; longs = commonSV.queryListJSONObject(sql, params); if (StringUtils.isNotBlank(removeTag) &amp;&amp; !longs.isEmpty()) &#123; if (\"last\".equals(removeTag)) &#123; longs.remove(longs.size() - 1); &#125; else if (\"first\".equals(removeTag)) &#123; longs.remove(0); &#125; &#125; return longs.stream().map(n -&gt; n.getLong(\"id\")).collect(Collectors.toList()); &#125; /** * 根据ID查询序号 * * @param id * @param tableName * @return */ private Long findSort(Long id, String tableName) &#123; if (id == null) &#123; return null; &#125; String sql = \" select \" + tables.get(tableName) + \" from \" + tableName + \" where id = #&#123;params.id&#125;\"; Map&lt;String, Object&gt; params = new HashMap&lt;&gt;(); params.put(\"id\", id); Number sortNum = commonSV.selectField(sql, params, Number.class); return sortNum.longValue(); &#125;&#125;","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-03-16T03:15:41.997Z","updated":"2020-03-16T03:15:41.997Z","comments":true,"path":"2020/03/16/hello-world/","link":"","permalink":"https://kanchai.club/2020/03/16/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}