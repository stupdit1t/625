<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>讲讲熔断</title>
      <link href="/2020/06/02/%E8%AE%B2%E8%AE%B2%E7%86%94%E6%96%AD/"/>
      <url>/2020/06/02/%E8%AE%B2%E8%AE%B2%E7%86%94%E6%96%AD/</url>
      
        <content type="html"><![CDATA[<p>当我们工作所在的系统处于分布式系统初期的时候，往往这时候每个服务都只部署了一个节点。  </p><p>那么在这样的背景下，如果某个服务A需要发布一个新版本，往往会对正在运行的其它依赖服务A的程序产生影响。甚至，一旦服务A的启动预热过程耗时过长，问题会更严重，大量请求会阻塞，产生级联影响，导致整个系统卡慢。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java1-1544436073.jpg" alt="如何在到处是“雷”的系统中「明哲保身」？这是第一招" title="如何在到处是“雷”的系统中「明哲保身」？这是第一招"></p><p>▲点击图片可查看大图</p><p>举个夸张的例子来形容：一幢楼的下水管是从最高楼直通到最低楼的，这个时候如果你家楼下的管道口堵住了，那么所有楼上的污水就会倒灌到你家。如果这导致你家的管道口也堵住了，之后又会倒灌到楼上一层，以此类推。  </p><p>然而实际生活中一旦你发现了这个问题，必然会想办法先避免影响到自己家，然后跑到楼下让他们赶紧疏通管道。此时，避免影响自己家的办法就可被称之为「<strong>熔断</strong>」。</p><p><strong>熔断是什么</strong></p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java10-1544436074.png" alt="如何在到处是“雷”的系统中「明哲保身」？这是第一招" title="如何在到处是“雷”的系统中「明哲保身」？这是第一招"></p><p><strong>熔断本质上是一个过载保护机制</strong>。这一概念来源于电子工程中的断路器，可能你曾经被这个东西的“跳闸”保护过。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java7-1544436074.jpeg" alt="如何在到处是“雷”的系统中「明哲保身」？这是第一招" title="如何在到处是“雷”的系统中「明哲保身」？这是第一招"></p><p>▲图片来源于网络，版权归原作者所有</p><p>在互联网系统中的熔断机制是指：当下游服务因访问压力过大而响应变慢或失败，上游服务为了保护自己以及系统整体的可用性，可以暂时切断对下游服务的调用。</p><p>做熔断的思路大体上就是：<strong>一个中心思想，分四步走</strong>。</p><p><strong>熔断怎么做</strong></p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java2-1544436074.png" alt="如何在到处是“雷”的系统中「明哲保身」？这是第一招" title="如何在到处是“雷”的系统中「明哲保身」？这是第一招"></p><p>首先，需秉持的一个中心思想是：量力而行。因为软件和人不同，没有奇迹会发生，什么样的性能撑多少流量是固定的。这是根本。</p><p>然后，这四步走分别是：</p><ol><li><p>定义一个识别是否处于“不可用”状态的策略</p></li><li><p>切断联系</p></li><li><p>定义一个识别是否处于“可用”状态的策略，并尝试探测</p></li><li><p>重新恢复正常</p></li></ol><h4 id="定义一个识别是否处于“不正常”状态的策略"><a href="#定义一个识别是否处于“不正常”状态的策略" class="headerlink" title="定义一个识别是否处于“不正常”状态的策略"></a><strong>定义一个识别是否处于“不正常”状态的策略</strong></h4><p>相信软件开发经验丰富的你也知道，识别一个系统是否正常，无非是两个点。</p><ul><li><p>是不是能调通</p></li><li><p>如果能调通，耗时是不是超过预期的长</p></li></ul><p>但是，由于分布式系统被建立在一个并不是100%可靠的网络上，所以上述的情况总有发生，因此我们不能将偶发的瞬时异常等同于系统“不可用”（避免以偏概全）。由此我们需要引入一个「<strong>时间窗口</strong>」的概念，这个时间窗口用来“放宽”判定“不可用”的区间，也意味着多给了系统几次证明自己“可用”机会。但是，如果系统还是在这个时间窗口内达到了你定义“不可用”标准，那么我们就要“断臂求生”了。</p><p>这个标准可以有两种方式来指定。</p><ul><li><p>阈值。比如，在10秒内出现100次“无法连接”或者出现100次大于5秒的请求。</p></li><li><p>百分比。比如，在10秒内有30%请求“无法连接”或者30%的请求大于5秒。</p></li></ul><p>最终会形成这样这样的一段代码。</p><p>全局变量 errorcount = 0; //有个独立的线程每隔10秒（时间窗口）重置为0。全局变量 isOpenCircuitBreaker = false;//do some thing…if(success){    return success; }else{     errorcount++;    if(errorcount == 不可用阈值){         isOpenCircuitBreaker = true;     } }</p><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="切断联系"><a href="#切断联系" class="headerlink" title="切断联系"></a><strong>切断联系</strong></h4><p>切断联系要尽可能的“果断”，既然已经认定了对方“不可用”，那么索性就默认“失败”，避免做无用功，也顺带能缓解对方的压力。</p><p>分布式系统中的程序间调用，一般都会通过一些RPC框架进行。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java5-1544436075.png" alt="如何在到处是“雷”的系统中「明哲保身」？这是第一招" title="如何在到处是“雷”的系统中「明哲保身」？这是第一招"></p><p>那么，这个时候作为客户端一方，<strong>在自己进程内通过代理发起调用之前就可以直接返回失败，不走网络</strong>。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java8-1544436075.png" alt="如何在到处是“雷”的系统中「明哲保身」？这是第一招" title="如何在到处是“雷”的系统中「明哲保身」？这是第一招"></p><p>这就是常说的「<strong>fail fast</strong>」机制。就是在前面提到的代码段之前增加下面的这段代码。</p><p>if(isOpenCircuitBreaker == true){    return fail; }  //do some thing…</p><h4 id="-1"><a href="#-1" class="headerlink" title=""></a></h4><h4 id="定义一个识别是否处于“可用”状态的策略，并尝试探测"><a href="#定义一个识别是否处于“可用”状态的策略，并尝试探测" class="headerlink" title="定义一个识别是否处于“可用”状态的策略，并尝试探测"></a><strong>定义一个识别是否处于“可用”状态的策略，并尝试探测</strong></h4><p>切断联系后，功能的完整性必然会受影响，所以还是需要尽快恢复回来，以提供完整的服务能力。这事肯定不能人为去干预，及时性必然会受到影响。那么如何能够自动的识别依赖系统是否“可用”呢？这也需要你来定义一个策略。</p><p>一般来说这个策略与识别“不可用”的策略类似，只是这里是一个反向指标。</p><ul><li><p>阈值。比如，在10秒内出现100次“调用成功”并且耗时都小于1秒。</p></li><li><p>百分比。比如，在10秒内有95%请求“调用成功”并且98%的请求小于1秒。</p></li></ul><p>同样包含「时间窗口」、「阈值」以及「百分比」。</p><p>稍微不同的地方在于，大多数情况下，一个系统“不可用”的状态往往会持续一段时间，不会那么快就恢复过来。所以我们不需要像第一步中识别“不可用”那样，无时无刻的记录请求状况，而只需要在每隔一段时间之后去进行探测即可。所以，这里多了一个「<strong>间隔时间</strong>」的概念。这个间隔幅度可以是固定的，比如30秒。也可以是动态增加的，通过线性增长或者指数增长等方式。</p><p>这个用代码表述大致是这样。</p><p>全局变量 successCount = 0; //有个独立的线程每隔10秒（时间窗口）重置为0。//并且将下面的isHalfOpen设为false。全局变量 isHalfOpen = true;//有个独立的线程每隔30秒（间隔时间）重置为true。//do some thing…if(success){    if(isHalfOpen){         successCount ++;        if(successCount = 可用阈值){            isOpenCircuitBreaker = false;         }     }          return success; }else{     errorcount++;    if(errorcount == 不可用阈值){        isOpenCircuitBreaker = true;     } }</p><p>另外，<strong>尝试探测本质上是一个“试错”，要控制下“试错成本”</strong>。所以我们不可能拿100%的流量去验证，一般会有以下两种方式：</p><ol><li><p>放行一定比例的流量去验证。</p></li><li><p>如果在整个通信框架都是统一的情况下，还可以统一给每个系统增加一个专门用于验证程序健康状态检测的独立接口。这个接口额外可以多返回一些系统负载信息用于判断健康状态，如CPU、I/O的情况等。</p></li></ol><h4 id="重新恢复正常"><a href="#重新恢复正常" class="headerlink" title="重新恢复正常"></a><strong>重新恢复正常</strong></h4><p>一旦通过了衡量是否“可用”的验证，整个系统就恢复到了“正常”状态，此时需要重新开启识别“不可用”的策略。就这样，系统会形成一个循环。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java9-1544436075.jpg" alt="如何在到处是“雷”的系统中「明哲保身」？这是第一招" title="如何在到处是“雷”的系统中「明哲保身」？这是第一招"></p><p>▲点击图片可查看大图</p><p>这就是一个完整的熔断机制的面貌。了解了这些核心思想，用什么框架去实施就变得不是那么重要了，因为大部分都是换汤不换药。</p><p>上面聊到的这些可以说是主干部分，还有一些最佳实践可以让你在实施熔断的时候拿捏的更到位。</p><p><strong>做熔断的最佳实践</strong></p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java8-1544436075-1.png" alt="如何在到处是“雷”的系统中「明哲保身」？这是第一招" title="如何在到处是“雷”的系统中「明哲保身」？这是第一招"></p><h4 id="什么场景最适合做熔断"><a href="#什么场景最适合做熔断" class="headerlink" title="什么场景最适合做熔断"></a><strong>什么场景最适合做熔断</strong></h4><p>一个事物在不同的场景里会发挥出不同的效果。以下是我能想到最适合熔断发挥更大优势的几个场景：</p><ul><li><p>所依赖的系统本身是一个共享系统，当前客户端只是其中的一个客户端。这是因为，如果其它客户端进行胡乱调用也会影响到你的调用。</p></li><li><p>所以依赖的系统被部署在一个共享环境中（资源未做隔离），并不独占使用。比如，和某个高负荷的数据库在同一台服务器上。</p></li><li><p>所依赖的系统是一个经常会迭代更新的服务。这点也意味着，越“敏捷”的系统越需要“熔断”。</p></li><li><p>当前所在的系统流量大小是不确定的。比如，一个电商网站的流量波动会很大，你能抗住突增的流量不代表所依赖的后端系统也能抗住。这点也反映出了我们在软件设计中带着“面向怀疑”的心态的重要性。</p></li></ul><h4 id="做熔断时还要注意的一些地方"><a href="#做熔断时还要注意的一些地方" class="headerlink" title="做熔断时还要注意的一些地方"></a><strong>做熔断时还要注意的一些地方</strong></h4><p>与所有事物一样，熔断也不是一个完美的事物，我们特别需要注意2个问题。</p><p>首先，如果所依赖的系统是多副本或者做了分区的，那么要注意其中<strong>个别节点的异常并不等于所有节点都存在异常</strong>，所以需要区别对待。</p><p>其次，<strong>熔断往往应作为最后的选择，我们应优先使用一些「降级」或者「限流」方案</strong>。因为“部分胜于无”，虽然无法提供完整的服务，但尽可能的降低影响是要持续去努力的。比如，抛弃非核心业务、给出友好提示等等，这部分内容我们会在后续的文章中展开。</p><p><strong>总结</strong></p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java7-1544436075.png" alt="如何在到处是“雷”的系统中「明哲保身」？这是第一招" title="如何在到处是“雷”的系统中「明哲保身」？这是第一招"></p><p>本文主要聊了熔断的作用以及做法，并且总结了一些我自己的最佳实践。</p><p>上面的这些代码示例中也可以看到，熔断代码所在的位置要么在实际方法之前，要么在实际方法之后。它非常适合AOP编程思想的发挥，所以我们平常用到的熔断框架都会基于AOP去做。</p><p>熔断只是一个保护壳，在周围出现异常的时候保全自身。但是从长远来看平时定期做好压力测试才能更好的防范于未然，降低触发熔断的次数。如果清楚的知道每个系统有几斤几两，在这个基础上再把「<strong>限流</strong>」和「<strong>降级</strong>」做好，这基本就将“高压”下触发熔断的概率降到最低了。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>想通关「限流」？只要这一篇</title>
      <link href="/2020/06/02/%E6%83%B3%E9%80%9A%E5%85%B3%E3%80%8C%E9%99%90%E6%B5%81%E3%80%8D%EF%BC%9F%E5%8F%AA%E8%A6%81%E8%BF%99%E4%B8%80%E7%AF%87/"/>
      <url>/2020/06/02/%E6%83%B3%E9%80%9A%E5%85%B3%E3%80%8C%E9%99%90%E6%B5%81%E3%80%8D%EF%BC%9F%E5%8F%AA%E8%A6%81%E8%BF%99%E4%B8%80%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>在上一篇中我们聊到了「熔断」（<a href="http://mp.weixin.qq.com/s?__biz=MzU2NzEwMDc4OQ==&mid=2247484035&idx=1&sn=a428aea971c6e1420b81d1687f0f31d1&chksm=fca31699cbd49f8f980e6be89a09cccd9c76edfdf965bc3abbcd41ad8179151c6200500584e2&scene=21#wechat_redirect" target="_blank" rel="noopener"><em>如何在到处是“雷”的系统中「明哲保身」？这是第一招</em></a>），有熔断机制的系统，它对可用性的作用至少保证了不会全盘崩溃。</p><p>但是你可以想象一个稍微极端一点的场景，如果系统流量不是很稳定，导致频繁触发熔断的话，是不是意味着系统一直熔断的三种状态中不断切换。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java0-1544436084.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>导致的结果是每次从开启熔断到关闭熔断的期间，必然会导致大量的用户无法正常使用。系统层面的可用性大致是这样的。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java3-1544436084.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>另外，从资源利用率上也会很容易发现，波谷的这段时期资源是未充分利用的。</p><p>由此可见，光有熔断是远远不够的。</p><p>在高压下，只要系统没宕机，如果能将接收的流量持续保持在高位，但又不超过系统所能承载的上限，会是更有效率的运作模式，因为会将这里的波谷填满。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java4-1544436084.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>在如今的互联网已经作为社会基础设施的大环境下，上面的这个场景其实离我们并不是那么远，同时也会显得没那么极端。例如，层出不穷的营销玩法，一个接着一个的社会热点，以及互联网冰山之下的黑产、刷子的蓬勃发展，更加使得这个场景变的那么的需要去考虑、去顾忌。因为随时都有可能会涌入超出你预期的流量，然后压垮你的系统。</p><p>那么限流的作用就很显而易见了：<strong>只要系统没宕机，系统只是因为资源不够，而无法应对大量的请求，为了保证有限的系统资源能够提供最大化的服务能力，因而对系统按照预设的规则进行流量（</strong><em><strong>输出或输入</strong></em><strong>）限制的一种方法，确保被接收的流量不会超过系统所能承载的上限。</strong></p><p><strong>一、怎么做「限流」</strong></p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java0-1544436085.png" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>从前面聊到的内容中我们也知道，限流最好能“限”在一个系统处理能力的上限附近，所以：</p><ol><li><p>通过「压力测试」等方式<strong>获得系统的能力上限</strong>在哪个水平是第一步。</p></li><li><p>其次，就是<strong>制定干预流量的策略</strong>。比如标准该怎么定、是否只注重结果还是也要注重过程的平滑性等。</p></li><li><p>最后，就是<strong>处理“被干预掉”的流量</strong>。能不能直接丢弃？不能的话该如何处理？</p></li></ol><p><strong>获得系统能力的上限</strong></p><p>第一步不是我们这次内容的重点，说起来就是对系统做一轮压测。可以在一个独立的环境进行，也可以直接在生产环境的多个节点中选择一个节点作为样本来压测，当然需要做好与其他节点的隔离。</p><p><strong>一般我们做压测为了获得2个结果，「速率」和「并发数」</strong>。前者表示在一个时间单位内能够处理的请求数量，比如xxx次请求/秒。后者表示系统在同一时刻能处理的最大请求数量，比如xxx次的并发。从指标上需要获得「最大值」、「平均值」或者「中位数」。后续限流策略需要设定的具体标准数值就是从这些指标中来的。</p><blockquote><p>题外话：从精益求精的角度来说，其他的诸如cpu、网络带宽以及内存的耗用也可以作为参照因素。</p></blockquote><p><strong>制定干预流量的策略</strong></p><p><strong>常用的策略就4种，我给它起了一个简单的定义——「两窗两桶」</strong>。两窗就是：固定窗口、滑动窗口，两桶就是：漏桶、令牌桶。</p><p><em><strong>固定窗口</strong></em></p><p>固定窗口就是定义一个“固定”的统计周期，比如1分钟或者30秒、10秒这样。然后在每个周期统计当前周期中被接收到的请求数量，经过计数器累加后如果达到设定的阈值就触发「流量干预」。直到进入下一个周期后，计数器清零，流量接收恢复正常状态。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java2-1544436085.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>这个策略最简单，写起代码来也没几行。</p><blockquote><p>全局变量 int totalCount = 0;  //有一个「固定周期」会触发的定时器将数值清零。</p><p>if(totalCount &gt; 限流阈值) {</p><pre><code>return; //不继续处理请求。</code></pre><p>}</p><p>totalCount++;</p><p>// do something…</p></blockquote><p>固定窗口有一点需要注意的是，<strong>假如请求的进入非常集中，那么所设定的「限流阈值」等同于你需要承受的最大并发数</strong>。所以，如果需要顾忌到并发问题，那么这里的「固定周期」设定的要尽可能的短。因为，这样的话「限流阈值」的数值就可以相应的减小。甚至，限流阈值就可以直接用并发数来指定。比如，假设固定周期是3秒，那么这里的阈值就可以设定为「平均并发数*3」。</p><p>不过不管怎么设定，固定窗口永远存在的缺点是：<strong>由于流量的进入往往都不是一个恒定的值，所以一旦流量进入速度有所波动，要么计数器会被提前计满，导致这个周期内剩下时间段的请求被“限制”。要么就是计数器计不满，也就是「限流阈值」设定的过大，导致资源无法充分利用</strong>。</p><p>「滑动窗口」可以改善这个问题。</p><p><strong><em>滑动窗口</em></strong></p><p>滑动窗口其实就是对固定窗口做了进一步的细分，将原先的粒度切的更细，比如1分钟的固定窗口切分为60个1秒的滑动窗口。然后统计的时间范围随着时间的推移同步后移。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java1-1544436085.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>同时，我们还可以得出一个结论是：<strong>如果固定窗口的「固定周期」已经很小了，那么使用滑动窗口的意义也就没有了</strong>。举个例子，现在的固定窗口周期已经是1秒了，再切分到毫秒级别能反而得不偿失，会带来巨大的性能和资源损耗。</p><p>滑动窗口大致的代码逻辑是这样：</p><blockquote><p>全局数组 链表[]  counterList = new 链表[切分的滑动窗口数量];  </p><p>//有一个定时器，在每一次统计时间段起点需要变化的时候就将索引0位置的元素移除，并在末端追加一个新元素。</p><p>int sum = counterList.Sum();</p><p>if(sum &gt; 限流阈值) {</p><pre><code>return; //不继续处理请求。</code></pre><p>}</p><p>int 当前索引 = 当前时间的秒数 % 切分的滑动窗口数量;</p><p>counterList[当前索引]++;</p><p>// do something…</p></blockquote><p>虽然说滑动窗口可以改善这个问题，但是本质上还是预先划定时间片的方式，属于一种“预测”，意味着几乎肯定无法做到100%的物尽其用。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java6-1544436086.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>但是，「桶」模式可以做的更好，因为「桶」模式中多了一个缓冲区（_桶本身_）。</p><p><em><strong>漏桶</strong></em></p><p>首先聊聊「漏桶」吧。<strong>漏桶模式的核心是固定“出口”的速率</strong>，不管进来多少量，出去的速率一直是这么多。如果涌入的量多到桶都装不下了，那么就进行「流量干预」。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java9-1544436087.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>整个实现过程我们来分解一下。</p><ol><li><p>控制流出的速率。这个其实可以使用前面提到的两个“窗口”的思路来实现。如果当前速率小于阈值则直接处理请求，否则不直接处理请求，进入缓冲区，并增加当前水位。</p></li><li><p>缓冲的实现可以做一个短暂的休眠或者记录到一个容器中再做异步的重试。</p></li><li><p>最后控制桶中的水位不超过最大水位。这个很简单，就是一个全局计数器，进行加加减减。</p></li></ol><p>这样一来，你会发现本质就是：<strong>通过一个缓冲区将不平滑的流量“整形”成平滑的（</strong><em><strong>高于均值的流量暂存下来补足到低于均值的时期</strong></em><strong>），以此最大化计算处理资源的利用率</strong>。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java7-1544436087.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>实现代码的简化表示如下：</p><blockquote><p>全局变量 int unitSpeed;  //出口当前的流出速率。每隔一个速率计算周期（比如1秒）会触发定时器将数值清零。  </p><p>全局变量 int waterLevel; //当前缓冲区的水位线。</p><p>if(unitSpeed &lt; 速率阈值) {</p><pre><code>unitSpeed++;//do something...</code></pre><p>}</p><p>else{</p><pre><code>if\(waterLevel &gt; 水位阈值\)\{    return; //不继续处理请求。\}waterLevel++;while\(unitSpeed &gt;= 速率阈值\)\{    sleep\(一小段时间\)。\}unitSpeed++;waterLevel--;//do something...</code></pre><p>}</p></blockquote><p>更优秀的「漏桶」策略已经可以在流量的总量充足的情况下发挥你所预期的100%处理能力，但这还不是极致。</p><p>你应该知道，一个程序所在的运行环境中，往往不单单只有这个程序本身，会存在一些系统进程甚至是其它的用户进程。也就是说，程序本身的处理能力是会被干扰的，是会变化的。所以，你可以预估某一个阶段内的平均值、中位数，但无法预估具体某一个时刻的程序处理能力。又因此，你必然会使用相对悲观的标准去作为阈值，防止程序超负荷。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java9-1544436088.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>那么从资源利用率来说，有没有更优秀的方案呢？有，这就是「令牌桶」。</p><p><em><strong>令牌桶</strong></em></p><p><strong>令牌桶模式的核心是固定“进口”速率</strong>。先拿到令牌，再处理请求，拿不到令牌就被「流量干预」。因此，<strong>当大量的流量进入时，只要令牌的生成速度大于等于请求被处理的速度，那么此刻的程序处理能力就是极限</strong>。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java5-1544436088.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>也来分解一下它的实现过程。</p><ol><li><p>控制令牌生成的速率，并放入桶中。这个其实就是单独一个线程在不断的生成令牌。</p></li><li><p>控制桶中待领取的令牌水位不超过最大水位。这个和「漏桶」一样，就是一个全局计数器，进行加加减减。</p></li></ol><p>大致的代码简化表示如下（_看上去像「固定窗口」的反向逻辑_）：</p><blockquote><p>全局变量 int tokenCount = 令牌数阈值; //可用令牌数。有一个独立的线程用固定的频率增加这个数值，但不大于「令牌数阈值」。  </p><p>if(tokenCount == 0){</p><pre><code>return; //不继续处理请求。</code></pre><p>}</p><p>tokenCount–;</p><p>//do something…</p></blockquote><p>聪明的你可能也会想到，这样一来<strong>令牌桶的容量大小理论上就是程序需要支撑的最大并发数</strong>。的确如此，假设同一时刻进入的流量将令牌取完，但是程序来不及处理，将会导致事故发生。</p><p>所以，没有真正完美的策略，只有合适的策略。因此，根据不同的场景能够识别什么是最合适的策略是更需要锻炼的能力。下面z哥分享一些我个人的经验。</p><p><strong>二、**</strong>做「限流」的最佳实践**</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java3-1544436088.png" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p><strong>四种策略该如何选择？</strong>  </p><p>首先，<strong>固定窗口</strong>。一般来说，<strong>如非时间紧迫，不建议选择这个方案</strong>，太过生硬。但是，为了能快速止损眼前的问题可以作为临时应急的方案。</p><p>其次，<strong>滑动窗口</strong>。这个方案<strong>适用于对异常结果「高容忍」的场景</strong>，毕竟相比“两窗”少了一个缓冲区。但是，胜在实现简单。</p><p>然后，<strong>漏桶</strong>。z哥觉得这个方案<strong>最适合作为一个通用方案</strong>。虽说资源的利用率上不是极致，但是「宽进严出」的思路在保护系统的同时还留有一些余地，使得它的适用场景更广。</p><p>最后，<strong>令牌桶</strong>。当你<strong>需要尽可能的压榨程序的性能</strong>（_此时桶的最大容量必然会大于等于程序的最大并发能力_），并且所处的场景流量进入波动不是很大（_不至于一瞬间取完令牌，压垮后端系统_）。</p><p><strong>分布式系统中带来的新挑战</strong></p><p>一个成熟的分布式系统大致是这样的。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java7-1544436089.jpg" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>每一个上游系统都可以理解为是其下游系统的客户端。然后我们回想一下前面的内容，可能你发现了，前面聊的「限流」都没有提到到底是在客户端做限流还是服务端做，甚至看起来更倾向是建立在服务端的基础上做。但是你知道，在一个分布式系统中，一个服务端本身就可能存在多个副本，并且还会提供给多个客户端调用，甚至其自身也会作为客户端角色。那么，在如此交错复杂的一个环境中，该如何下手做限流呢？我的思路是通过「<strong>一纵一横</strong>」来考量。</p><p><strong><em>纵</em></strong></p><p>都知道「限流」是一个保护措施，那么可以将它想象成一个盾牌。另外，一个请求在系统中的处理过程是链式的。那么，正如古时候军队打仗一样，盾牌兵除了有小部分在老大周围保护，剩下的全在最前线。因为<strong>盾的位置越前，能受益的范围越大</strong>。</p><p>分布式系统中最前面的是什么？接入层。如果你的系统有接入层，比如用nginx做的反向代理。那么可以通过它的ngx_http_limit_conn_module以及ngx_http_limit_req_module来做限流，是很成熟的一个解决方案。</p><p>如果没有接入层，那么只能在应用层以AOP的思路去做了。但是，由于应用是分散的，出于成本考虑你需要针对性的去做限流。比如ToC的应用必然比ToB的应用更需要做，高频的缓存系统必然比低频的报表系统更需要做，Web应用由于存在Filter的机制做起来必然比Service应用更方便。</p><p>那么应用间的限流到底是做到客户端还是服务端呢？</p><p>z哥的观点是，从效果上客户端模式肯定是优于服务端模式的，因为当处于被限流状态的时候，客户端模式连建立连接的动作都省了。另一个潜在的好处是，与集中式的服务端模式相比，可以把少数的服务端程序的压力分散掉。但是在客户端做成本也更高，因为它是去中心化的，假如需要多个节点之间的数据共通的话，是一个很麻烦的事情。</p><p>所以，最终z哥建议你：如果<strong>考虑成本就服务端模式，考虑效果就客户端模式</strong>。当然也不是绝对，比如一个服务端的流量大部分都来源于某一个客户端，那么就可以直接在这个客户端做限流，这也不失为一个好方案。</p><p>数据库层面的话，一般连接字符串中本身就会包含「最大连接数」的概念，就可以起到限流的作用。如果想做更精细的控制就只能做到统一封装的数据库访问层框架中了。</p><p>聊完了「纵」，那么「横」是什么呢？</p><p><em><strong>横</strong></em></p><p>不管是多个客户端，还是同一个服务端的多个副本。每个节点的性能必然会存在差异，如何设立合适的阈值？以及如何让策略的变更尽可能快的在集群中的多个节点生效？说起来很简单，引入一个性能监控平台和配置中心。但这些真真要做好不容易，后续我们再展开这块内容。</p><p><strong>三、总结</strong></p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2018/12/java9-1544436089.png" alt="想通关「限流」？只要这一篇" title="想通关「限流」？只要这一篇"></p><p>限流就好比保险丝，根据你制定的标准，达到了就拉闸。</p><p>不过，触发限流后的措施除了直接丢弃请求之外，还有一个方式是「降级」，那么降级有哪些方式呢？我们下一篇再聊吧。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 架构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅谈微服务</title>
      <link href="/2020/05/12/%E6%B5%85%E8%B0%88%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
      <url>/2020/05/12/%E6%B5%85%E8%B0%88%E5%BE%AE%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>来源：后端技术杂谈</p><p><a href="http://www.rowkey.me/blog/2019/05/30/msa/" target="_blank" rel="noopener">www.rowkey.me/blog/2019/05/30/msa/</a></p></blockquote><p>这几年在Java工程师招聘时，会看到很多人的简历都写着使用了Spring Cloud做微服务实现，使用Docker做自动化部署，并且也会把这些做为自己的亮点。而比较有趣的这其中以小公司出来的人为绝大多数，大的公司出来的人简历上倒是很少提这些东西。</p><p>对于我自己来说，从15年就开始关注这一块，看过马丁.福勒最开始的关于微服务的论文、也看过不少对微服务的论证的英文文章和书，也研究过Spring Cloud、Sofa等开源实现以及Service mesh。考虑到我们公司研发团队人力不足、基础设施不完善，当初是没有推行微服务的。但随着看到上述的那种简历越来越多，有时候我也会疑问：难道真的不用微服务就落后了吗？公司的同事如果不掌握这些就真的没有竞争力了吗。而随着最近公司业务的逐步提升，研发人员越来越多，借着在梳理公司的微服务落地计划时，也梳理了一下微服务的相关知识点，也是本文的主要内容。</p><p>开篇之前先声明我对微服务的几点态度:</p><blockquote><p>★</p><ol><li>架构模式有很多，微服务不是唯一的选择也不是什么银弹。国内绝大多数中小公司引入微服务都是在盲目追新，也能看出做此种技术选型的工程师基础架构素质的不足。</li><li>“你必须长的足够高才能使用微服务”。微服务基础设施，尤其是容器技术、自动化部署、自动化测试这些不完备，微服务形同虚设，不会带来什么质的提升。</li><li>微服务架构的关键不在于具体的实现，而在于如何合理地划分服务边界以及组织架构是否相匹配。不考虑研发团队的规模和组成就盲目上微服务是不良的技术选型。</li><li>Spring Boot是Spring全家桶的上层封装，并不是什么崭新的技术，也不是什么值得觉得成为自己杀手锏的技术。</li><li>Spring Cloud中Spring Cloud Netflix的组件是经过生产环境验证的，其他的则建议慎重选择。</li></ol><p>”</p></blockquote><h2 id="微服务是什么"><a href="#微服务是什么" class="headerlink" title="微服务是什么"></a>微服务是什么</h2><p>微服务起源于2005年Peter Rodgers博士在云端运算博览会提出的微Web服务(Micro-Web-Service)，根本思想类似于Unix的管道设计理念。2014年，由Martin Fowler 与 James Lewis共同提出了微服务的概念，定义了微服务架构风格是一种通过一套小型服务来开发单个应用的方法，每个服务运行在自己的进程中，并通过轻量级的机制进行通讯（HTTP API）。关键的三点是<strong>small、automated以及lightweight</strong>。</p><p>对比SOA，微服务可以看做是SOA的子集，是轻量级的SOA，粒度更细的服务，独立进程、数据分离，更注重<strong>敏捷、持续交付、DevOps以及去中心化实践</strong>。其共同的<strong>架构原理</strong>：</p><ul><li>单一职责</li><li>关注分离：控制与逻辑相分离</li><li>模块化和分而治之</li></ul><p><strong>特点</strong>：</p><ul><li>用服务进行组件化</li><li>围绕业务能力进行组织</li><li>是产品而非项目</li><li>端点智能化和哑管道: 控制逻辑都在端点，管道仅仅是传输</li><li>全自动化部署</li><li>语言和数据的去中心化控制</li><li>面向失败设计</li><li>渐进式设计</li></ul><p>综合来看，其优缺点如下：</p><p><strong>优点</strong>：</p><ul><li>模块的强边界</li><li>独立部署</li><li>技术选型的多样性</li></ul><p><strong>缺点</strong>：</p><ul><li>分布式带来编程复杂度，远程调用的消耗</li><li>舍弃强一致性，实现最终一致性</li><li>操作复杂性要求有一个成熟的运维团队或者运维基础设施</li></ul><h2 id="为什么要采用微服务"><a href="#为什么要采用微服务" class="headerlink" title="为什么要采用微服务"></a>为什么要采用微服务</h2><p>是否选择微服务取决于你要设计的系统的复杂度。微服务是用来把控复杂系统的，但是随之而来的就是引入了微服务本身的复杂度。需要解决包括自动化部署、监控、容错处理、最终一致性等其他分布式系统面临的问题。即使已经有一些普遍使用的解决方案，但是仍然是有不小的成本的。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java10-1583638183.jpg" alt="鸟瞰微服务架构" title="鸟瞰微服务架构"></p><p>生产力和复杂度的关系如图所示，可见系统越复杂，微服务带来的收益越大。此外，无论是单体应用还是微服务，团队的技能都需要能够把控住。</p><p>马丁.福勒的一个观点是：除非管理单体应用的成本已经太复杂了（太大导致很难修改和部署），否则都不要考虑微服务。大部分应用都应该选择单体架构，做好单体应用的模块化而不是拆分成服务。</p><p>因此，<strong>系统一开始采用单体架构，做好模块化，之后随着系统变得越来越复杂、模块/服务间的边界越来越清晰，再重构为微服务架构是一个合理的架构演化路径。</strong></p><p><strong>四个可以考虑上微服务的情况</strong>：</p><ol><li>多人开发一个模块/项目，提交代码频繁出现大量冲突。</li><li>模块间严重耦合，互相依赖，每次变动需要牵扯多个团队，单次上线需求太多，风险大。</li><li>主要业务和次要业务耦合，横向扩展流程复杂。</li><li>熔断降级全靠if-else。</li></ol><p><strong>微服务的三个阶段</strong>：</p><ol><li>微服务1.0：仅使用注册发现，基于SpringCloud或者Dubbo进行开发。</li><li>微服务2.0：使用了熔断、限流、降级等服务治理策略，并配备完整服务工具和平台。</li><li>微服务3.0：Service Mesh将服务治理作为通用组件，下沉到平台层实现，应用层仅仅关注业务逻辑，平台层可以根据业务监控自动调度和参数调整，实现AIOps和智能调度。</li></ol><h2 id="微服务架构"><a href="#微服务架构" class="headerlink" title="微服务架构"></a>微服务架构</h2><h3 id="先决条件"><a href="#先决条件" class="headerlink" title="先决条件"></a>先决条件</h3><ul><li>快速的环境提供能力：依赖于云计算、容器技术，快速交付环境。</li><li>基本的监控能力：包括基础的技术监控和业务监控。</li><li>快速的应用部署能力：需要部署管道提供快速的部署能力。</li><li>Devops文化：需要具有良好的持续交付能力，包括全链路追踪、快速环境提供和部署等，还需要快速的反应能力（对问题、故障的快速响应），开发和运维的协同工作。</li></ul><p>此外，根据康威定律和逆康威定律（技术架构倒逼组织架构改进），组织架构也是一个很关键的因素。对应于微服务架构，组织架构需要遵循以下原则：</p><ol><li>一个微服务由一个团队维护，团队成员以三人为宜。</li><li>单个团队的任务和发展是独立的，不受其他因素影响。</li><li>团队是功能齐全、全栈、自治的，扁平、自我管理。</li></ol><h3 id="基础设施"><a href="#基础设施" class="headerlink" title="基础设施"></a>基础设施</h3><p>微服务的推行需要依赖于很多底层基础设施，包括提供微服务的编译、集成、打包、部署、配置等工作，采用PaaS平台解决微服务从开发到运行的全生命周期管理，同时提供异构环境管理、容器资源隔离与互通、服务伸缩漂移、服务升级与回退、服务熔断与降级、服务注册与发现。</p><ol><li><p>最基本的基础设施</p><ul><li>进程间通讯机制：微服务是独立进程的，需要确定之间的通讯方式。</li><li>服务发现+服务路由: 提供服务注册中心，服务提供者和消费者通过服务发现获取服务的信息从而调用服务，实现服务的负载均衡等。</li><li>服务容错：微服务架构中，由于服务非常多，往往是一个服务挂了，整个请求链路的服务都受到影响，因此需要服务容错，在服务调用失败的时候能够处理错误或者快速失败，包括熔断、fallback、重试、流控和服务隔离等。</li><li>分布式事务支持：随着业务拆分为服务，那么有时候不可避免的就是跨服务的事务，即分布式事务的问题。原则是尽量避免分布式事务，如果无法避免那么可以使用消息系统或者CQRS和Event Sourcing方案来实现最终一致性。如果需要强一致性，则有两阶段提交、三阶段提交、TCC等分布式事务解决方案。</li></ul></li><li><p>提升外部服务对接效率和内部开发效率</p><ul><li>API网关: 负责外部系统的访问，负责跨横切面的公共层面的工作，包括安全、日志、权限控制、传输加密、请求转发、流量控制等。典型的网关功能即对外暴露一个域名xx.com，根据第一级目录做反向路由xx.com/user，xx.com/trade。每一级目录，如user、trade对应一个服务的域名。此外，API网关也可以有服务编排的功能（不推荐）。</li><li>接口框架: 规范服务之间通讯使用的数据格式、解析包、自解释文档，便于服务使用方快速上手等。</li></ul></li><li><p>提升测试和运维效率</p><ul><li>持续集成：这一部分并非是微服务特定的，对于之前的单体应用，此部分一般来说也是必要的。主要是指通过自动化手段，持续地对代码进程编译构建、自动化测试，以得到快速有效的质量反馈，从而保证代码的顺利交付。自动化测试包括代码级别的单元测试、单个系统的集成测试、系统间的接口测试。</li><li>自动化部署：微服务架构，节点数动辄上百上千，自动化部署能够提高部署速度和部署频率，从而保证持续交付。包括版本管理、资源管理、部署操作、回滚操作等功能。而对于微服务的部署方式，包括<strong>蓝绿部署、滚动部署以及金丝雀部署</strong>。</li><li>配置中心: 运行时配置管理能够解决动态修改配置并批量生效的问题。包括配置版本管理、配置项管理、节点管理、配置同步等。</li><li>持续交付：包括持续集成、自动化部署等流程。目的就是小步迭代，快速交付。</li></ul></li><li><p>进一步提升运维效率</p><ul><li>服务监控: 微服务架构下节点数目众多，需要监控的机器、网络、进程、接口等的数量大大增加，需要一个强大的监控系统，能够提供实时搜集信息进行分析以及实时分析之上的预警。包括监控服务的<strong>请求次数、响应时间分布、最大/最小响应值、错误码分布</strong>等</li><li>服务跟踪：跟踪一个请求的完整路径，包括<strong>请求发起时间、响应时间、响应码、请求参数、返回结果</strong>等信息，也叫做全链路跟踪。通常的服务监控可以和服务监控做在一起，宏观信息由服务跟踪呈现，微观单个服务/节点的信息由服务监控呈现。服务跟踪目前的实现理论基本都是Google的Dapper论文。</li><li>服务安全：内网之间的微服务调用原则上讲应该是都可以互相访问写，一般并不需要权限控制，但有时候限于业务要求，会对接口、数据等方面有安全控制的要求。此部分可以以配置的方式存在于服务注册中心中，和服务绑定，在请求时由做为服务提供者的服务节点进行安全策略控制。配置则可以存储在配置中心以方便动态修改。</li></ul></li></ol><p>在微服务数量很少的情况下，以上基础设施的优先级自上而下降低。否则，仅仅依赖人工操作，则投入产出比会很低。</p><p>还需要提到的是Docker容器技术。虽然这个对于微服务并不是必须的，但是容器技术<strong>轻量级、灵活、与应用依存、屏蔽环境差异</strong>的特性对于持续交付的实现是至关重要的，即使对于传统的单体应用也能够给其带来交付效率的大幅提升。</p><h3 id="架构设计模式"><a href="#架构设计模式" class="headerlink" title="架构设计模式"></a>架构设计模式</h3><p>在引入微服务之后，传统的单体应用变为了一个一个服务，之前一个应用直接提供接口给客户端访问的架构不再适用。微服务架构下，针对不同设备的接口做为BFF层（Backend For Frontend），也叫做用户体验适配层，负责聚合、编排微服务的数据转换成前端需要的数据。服务之间的调用则在允许的情况下（允许延迟）尽可能使用异步消息传递方式，如此形成<strong>面向用户体验的微服务架构设计模式</strong>。如下图所示：</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java4-1583638183.jpg" alt="鸟瞰微服务架构" title="鸟瞰微服务架构"></p><p><strong>Client -&gt; API Gateway -&gt; BFF（Backend For Frontend） -&gt; Downstream Microservices</strong></p><ul><li>后台采用微服务架构，微服务可以采用不同的编程语言和不同的存储机制。</li><li>前台采用BFF模式对不同的用户体验（如桌面浏览器，Native App，平板响应式Web）进行适配。</li><li>BFF、API Orchestration Layer，Edge Service Layer，Device Wrapper Layer是相同的概念。</li><li>BFF不能过多，过多会造成代码逻辑重复冗余。</li><li>可以将网关承担的功能，如Geoip、限流、安全认证等跨横切面功能和BFF做在同一层，虽然增加了BFF层的复杂性，但能够得到性能优势。</li></ul><h3 id="服务拆分"><a href="#服务拆分" class="headerlink" title="服务拆分"></a>服务拆分</h3><p>微服务架构最核心的环节，主要是对服务的<strong>横向拆分</strong>。服务拆分就是讲一个完整的业务系统解耦为服务，<strong>服务需要职责单一，之间没有耦合关系，能够独立开发和维护</strong>。</p><p>服务拆分不是一蹴而就的，需要在开发过程中不断地理清边界。在完全理清服务之前，尽量推迟对服务的拆分，尤其是对数据库的拆分。</p><p><strong>拆分方法</strong>如下：</p><ul><li>基于业务逻辑拆分</li><li>基于可扩展拆分</li><li>基于可靠性拆分</li><li>基于性能拆分</li></ul><p>其中，对于无法修改的遗留系统，采用绞杀者模式：在遗留系统外面增加新的功能做成微服务方式，而不是直接修改原有系统，逐步的实现对老系统替换。</p><p><strong>拆分过程需要遵守的规范</strong>如下：</p><ul><li>先少后多、先粗后细（粒度）</li><li>服务纵向拆分最多三层，两次调用：Controller、组合服务、基础服务</li><li>仅仅单向调用，禁止循环调用</li><li>串行调用改为并行调用或者异步化</li><li>接口应该幂等</li><li>接口数据定义严禁内嵌，透传</li><li>规范化工程名</li><li>先拆分服务，等服务粒度确定后再拆分数据库。</li></ul><h3 id="微服务框架"><a href="#微服务框架" class="headerlink" title="微服务框架"></a>微服务框架</h3><p>上面讲述了微服务架构的众多基础设施，如果每一个基础设施都需要自己开发的话是非常巨大的开发工作。目前市面上已经有不少开源的微服务框架可以选择。</p><ol><li><p>Spring Boot</p><p>Spring Boot是用来简化新Spring应用的初始搭建以及开发过程的。其虽然不是微服务框架，但其设计的初衷本质就是微应用的底层框架，因此非常适合用于微服务基础设施的开发以及微服务的应用开发。尤其对于Spring技术栈的团队来说，基于Spring Boot开发微服务框架和应用是自然而然的一个选择。</p></li><li><p>Dubbo&amp;&amp;Motan</p><p>Dubbo阿里开源的服务治理框架。其出现在微服务理念兴起之前，可以看做是SOA框架的集大成之作。但其仅仅包含了微服务基础设施的部分功能，诸如熔断、服务跟踪、网关等都没有实现。</p><p>Motan则是微博开源的类似Dubbo的RPC框架，与Dubbo相比更轻量级。</p><ul><li>服务发现 ：服务发布、订阅、通知</li><li>高可用策略 ：失败重试（Failover）、快速失败（Failfast）、资源隔离 - 负载均衡 ：最少活跃连接、一致性 Hash、随机请求、轮询等</li><li>扩展性 ：支持 SPI 扩展（service provider interface）</li><li>其他 ：调用统计、访问日志等</li></ul></li><li><p>Spring Cloud</p><p>Spring Cloud是基于Spring Boot实现的微服务框架，也可以看做一套微服务实现规范。基本涵盖了微服务基础设施的方方面面，包括配置管理、服务发现、断路器、智能路由、微代理、控制总线、全局锁、决策竞选、分布式会话和集群状态管理等。其基于Spring生态，社区支持非常好。但其很多组件都没有经过生产环境验证，需要慎重选择。</p><p>Spring Cloud Netflix是Spring Cloud的一个子项目，是Spring对Netflix OSS的集成实现。基于Netflix的大规模使用，其中的已经被广泛使用的组件包括：</p><p>此外，另一个子项目Spring Cloud Alibaba则是Alibaba开源的基于Spring Boot的微服务框架，主要是对阿里云服务的支持。</p><ul><li>Eureka：服务注册和服务发现</li><li>Ribbon：弹性而智能的进程间和服务通讯机制，客户端负载均衡</li><li>Hystrix：熔断器，在运行时提供延迟和容错的隔离</li><li>Zuul: 服务网关</li></ul></li><li><p>Service Mesh</p><p>上述的微服务框架都是侵入式的，服务化的过程都需要进行代码改造。Service Mesh则是下一代微服务架构，最明显的特征就是无入侵。采用sidecar模式来解决系统架构微服务化后的服务间通信和治理问题。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java8-1583638184.png" alt="鸟瞰微服务架构" title="鸟瞰微服务架构"></p><p>如上图所示，目前主流的开源实现包括：</p><ul><li>Linkerd和Envoy：以 sidecar 为核心，关注如何做好proxy，并完成一些通用控制平面的功能。缺乏对这些sidecar的管理和控制。</li><li>Istio和Conduit：目前最为流行的Service Mesh实现方案，集中在更加强大的控制平面(sidecar被称为数据平面)功能。前者由Google和IBM合作，并使用了Envoy作为sidecar部分的实现；后者则是Linkerd作者的作品。相比起来，Istio有巨头背景，功能强大，但可用性和易用性一直不高，Conduit则相对简单、功能聚焦。</li></ul></li></ol><p>限于Service Mesh带来的性能延迟的开销以及sidecar对分布复杂性的增加，其对大规模部署(微服务数目多)、异构复杂(交互协议/开发语言类型多)的微服务架构带来的收益会更大。</p><p>6. Sofastack</p><p>   蚂蚁金服开源的构建金融级分布式架构的一套中间件。包     括微服务开发框架、RPC框架、服务注册中心、全链路追     踪、服务监控、Service Mesh等一整套分布式应用开发     工具。</p><p>   特别值得一提的是SOFAMesh。其是对下一代微服务架       构Service Mesh的大规模落地方案实践，基于 Istio改     进和扩展而来，应该是国内最为成熟的开源Service         Mesh方案。</p><p>此外，需要提到<strong>Kubernetes(K8s)</strong>，其本身提供了部分的微服务特性支持（通过域名做服务发现），对代码无侵入。但服务调用、熔断这些都需要自己实现。</p><p>综上，目前公司技术团队技术栈是Spring，并且已有服务的实现都是基于Dubbo，因此选择Spring Cloud Netflix做为基础的微服务框架，对其中不成熟或者缺乏的组件，选择业界更为成熟的组件替代即可。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java7-1583638184.jpg" alt="鸟瞰微服务架构" title="鸟瞰微服务架构"></p><ul><li>API网关：Zuul</li><li>服务注册中心：Dubbo</li><li>配置中心：disconf</li><li>服务监控&amp;&amp;全链路追踪：CAT</li><li>服务开发框架：Spring Boot</li><li>日志监控、告警：ELK + Elasalert</li><li>流量控制：Sentinel</li><li>消息队列：Kafka</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>What’s so bad about monoliths anyway…?!</li><li>Microservice</li><li>MicroservicePremium</li><li>Microservice Trade-Offs</li><li>MicroservicePrerequisites</li><li>MonolithFirst</li><li><a href="https://mp.weixin.qq.com/s?__biz=MzI2MzM3MzkyMg==&mid=2247486544&idx=1&sn=999be8b4f06150b96d9a46ada6bb9ded&chksm=eabd995dddca104bd3c6262d491572f7be9b2a763a43a388f66bd0e90e4bd60e5037727107e4&mpshare=1&scene=21&srcid=0201lT7ZBVBGmTki8bYnmDgl#wechat_redirect" target="_blank" rel="noopener">服务怎么拆？</a></li><li>BFF@SoundCloud</li><li>Service Mesh 及其主流开源实现解析</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> spring </tag>
            
            <tag> 微服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springmvc实现参数处理，rsa解密数据</title>
      <link href="/2020/05/09/springmvc%E5%AE%9E%E7%8E%B0%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86%EF%BC%8Crsa%E8%A7%A3%E5%AF%86%E6%95%B0%E6%8D%AE/"/>
      <url>/2020/05/09/springmvc%E5%AE%9E%E7%8E%B0%E5%8F%82%E6%95%B0%E5%A4%84%E7%90%86%EF%BC%8Crsa%E8%A7%A3%E5%AF%86%E6%95%B0%E6%8D%AE/</url>
      
        <content type="html"><![CDATA[<p>用于实现类似@RequestBody的作用，前后端在没有https的情况下，利用rsa非对称加密，实现数据安全性</p><ol><li><p>首先创建注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RSA加密数据解密</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年06月19日 10:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.PARAMETER&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> RequestEncrypt &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>利用spring参数处理器，实现接口，拦截该注解的参数，处理并返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理加密数据,参数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年06月19日 10:40</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HandlerMethodArgumentCustomer</span> <span class="keyword">implements</span> <span class="title">HandlerMethodArgumentResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(HandlerMethodArgumentCustomer<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ISysSignSV sysSignSV;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsParameter</span><span class="params">(MethodParameter parameter)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (parameter.hasParameterAnnotation(RequestEncrypt<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">resolveArgument</span><span class="params">(MethodParameter parameter, ModelAndViewContainer mavContainer, NativeWebRequest webRequest, WebDataBinderFactory binderFactory)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">HttpServletRequest nativeRequest = webRequest.getNativeRequest(HttpServletRequest<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">String contentType = nativeRequest.getContentType();</span><br><span class="line"><span class="keyword">if</span> (!contentType.equals(MediaType.APPLICATION_JSON_VALUE)</span><br><span class="line">&amp;&amp; !contentType.equals(MediaType.APPLICATION_JSON_UTF8_VALUE)</span><br><span class="line">) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> MediaTypeNotSupportedStatusException(<span class="string">"期望请求为application/json"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 加密数据</span></span><br><span class="line"><span class="keyword">byte</span>[] body = ServletUtils.getRequestBody();</span><br><span class="line">String jsonData = IOUtils.toString(body);</span><br><span class="line"><span class="keyword">if</span> (body.length == <span class="number">0</span> || StringUtils.isBlank(jsonData) || jsonData.length() == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取当前登录用户的公私钥。如果没空，在header里取</span></span><br><span class="line">Object appKeyObj = ShiroUtil.getSession().getAttribute(Global.APP_KEY);</span><br><span class="line">Object appSercetObj = ShiroUtil.getSession().getAttribute(Global.APP_SERCET);</span><br><span class="line">String appKey = appKeyObj == <span class="keyword">null</span> ? <span class="keyword">null</span> : String.valueOf(appKeyObj);</span><br><span class="line">String appSercet = appSercetObj == <span class="keyword">null</span> ? <span class="keyword">null</span> : String.valueOf(appSercetObj);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(appKey) || StringUtils.isBlank(appSercet)) &#123;</span><br><span class="line">appKey = ServletUtils.getHeader(<span class="string">"appKey"</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(appKey)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 获取私钥</span></span><br><span class="line">SysSign sysSign = sysSignSV.findByModel(SysSignModel.builder().appKey(appKey).includeColumns(<span class="string">"app_secret"</span>).build());</span><br><span class="line">appSercet = sysSign.getAppSecret();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">RSA rs = <span class="keyword">new</span> RSA(appSercet, appKey);</span><br><span class="line"><span class="keyword">byte</span>[] decrypt = rs.decrypt(jsonData, KeyType.PrivateKey);</span><br><span class="line">jsonData = IOUtils.toString(decrypt);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">LOG.error(<span class="string">"Rsa加密数据解密异常"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> JSONObject.parseObject(jsonData, parameter.getParameterType());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>将参数处理器，加入到spring的拦截器调用链</p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 向MVC中添加自定义组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> HandlerMethodArgumentCustomer handlerMethodArgumentCustomer;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addArgumentResolvers</span><span class="params">(List&lt;HandlerMethodArgumentResolver&gt; resolvers)</span> </span>&#123;</span><br><span class="line">        resolvers.add(handlerMethodArgumentCustomer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ok</p>]]></content>
      
      
      
        <tags>
            
            <tag> 轮子 </tag>
            
            <tag> JAVA </tag>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>解决PropertySource不能读取yml的问题</title>
      <link href="/2020/05/09/%E8%A7%A3%E5%86%B3PropertySource%E4%B8%8D%E8%83%BD%E8%AF%BB%E5%8F%96yml%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/05/09/%E8%A7%A3%E5%86%B3PropertySource%E4%B8%8D%E8%83%BD%E8%AF%BB%E5%8F%96yml%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 解决PropertySource不能读取yml的问题</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2020年03月26日 17:12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">YamlConfigFactory</span>  <span class="keyword">extends</span> <span class="title">DefaultPropertySourceFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> PropertySource&lt;?&gt; createPropertySource(String name, EncodedResource resource) <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">String sourceName = name != <span class="keyword">null</span> ? name : resource.getResource().getFilename();</span><br><span class="line"><span class="keyword">if</span> (!resource.getResource().exists()) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PropertiesPropertySource(sourceName, <span class="keyword">new</span> Properties());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (sourceName.endsWith(<span class="string">".yml"</span>) || sourceName.endsWith(<span class="string">".yaml"</span>)) &#123;</span><br><span class="line">Properties propertiesFromYaml = loadYml(resource);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PropertiesPropertySource(sourceName, propertiesFromYaml);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">super</span>.createPropertySource(name, resource);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> Properties <span class="title">loadYml</span><span class="params">(EncodedResource resource)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">YamlPropertiesFactoryBean factory = <span class="keyword">new</span> YamlPropertiesFactoryBean();</span><br><span class="line">factory.setResources(resource.getResource());</span><br><span class="line">factory.afterPropertiesSet();</span><br><span class="line"><span class="keyword">return</span> factory.getObject();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用户自定义配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年07月05日 16:44</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@PropertySource</span>(value=<span class="string">"classpath:file-table-config.yml"</span>,factory = YamlConfigFactory<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">@<span class="title">ConfigurationProperties</span>(<span class="title">prefix</span> </span>= <span class="string">"config"</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTableConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 表达式</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String corn;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***</span></span><br><span class="line"><span class="comment"> * 表和资源字段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; tables;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 轮子 </tag>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超长JVM总结</title>
      <link href="/2020/05/08/%E8%B6%85%E9%95%BFJVM%E6%80%BB%E7%BB%93/"/>
      <url>/2020/05/08/%E8%B6%85%E9%95%BFJVM%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是JVM"><a href="#什么是JVM" class="headerlink" title="什么是JVM"></a>什么是JVM</h3><p>JVM 是可运行 Java 代码的假想计算机 ，包括一套字节码指令集、一组寄存器、一个栈、一个垃圾回收，堆 和 一个存储方法域。JVM 是运行在操作系统之上的，它与硬件没有直接的交互。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java7-1588125197.png" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><p>我们都知道 Java 源文件，通过编译器，能够生产相应的.Class 文件，也就是字节码文件，而字节码文件又通过 Java 虚拟机中的解释器，编译成特定机器上的机器码 。  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java9-1588125197.png" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><p>每一种平台的解释器是不同的，但是实现的虚拟机是相同的，这也就是 Java 为什么能够跨平台的原因了 ，当一个程序从开始运行，这时虚拟机就开始实例化了，多个程序启动就会存在多个虚拟机实例。程序退出或者关闭，则虚拟机实例消亡，多个虚拟机实例之间数据不能共享。  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java8-1588125198.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><h6 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h6><p>这里所说的线程指程序执行过程中的一个线程实体。JVM 允许一个应用并发执行多个线程 。Hotspot JVM 中的 Java 线程与原生操作系统线程有直接的映射关系。当线程本地存储、缓冲区分配、同步对象、栈、程序计数器等准备好以后，就会创建一个操作系统原生线程。Java 线程结束，原生线程随之被回收。操作系统负责调度所有线程，并把它们分配到任何可用的 CPU 上。当原生线程初始化完毕，就会调用 Java 线程的 run() 方法。当线程结束时，会释放原生线程和 Java 线程的所有资源。</p><ul><li><p>Hotspot JVM 后台运行的系统线程主要有下面几个：</p></li><li><p><strong>虚拟机线程</strong>:这个线程等待 JVM 到达安全点操作出现。这些操作必须要在独立的线程里执行，因为当堆修改无法进行时，线程都需要 JVM位于安全点。这些操作的类型有：stop-the-world 垃圾回收、线程栈dump、线程暂停、线程偏向锁（biased  locking）解除。</p></li><li><p><strong>周期性任务线程</strong>:这线程负责定时器事件（也就是中断），用来调度周期性操作的执行。</p></li><li><p><strong>GC 线程</strong>  :这些线程支持 JVM 中不同的垃圾回收活动。</p></li><li><p><strong>编译器线程</strong>:这些线程在运行时将字节码动态编译成本地平台相关的机器码。</p></li><li><p><strong>信号分发线程</strong>:这个线程接收发送到 JVM 的信号并调用适当的 JVM 方法处理。</p></li></ul><h3 id="JVM内存区域"><a href="#JVM内存区域" class="headerlink" title="JVM内存区域"></a>JVM内存区域</h3><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java9-1588125198.png" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><ul><li><p>JVM 内存区域主要分为线程私有区域【<strong>程序计数器、虚拟机栈、本地方法区</strong>】、线程共享区域【<strong>JAVA 堆、方法区</strong>】、直接内存。<br>-<strong>线程私有数据区域生命周期与线程相同</strong>, 依赖用户线程的启动/结束 而 创建/销毁(在 HotspotVM 内, 每个线程都与操作系统的本地线程直接映射, 因此这部分内存区域的存/否跟随本地线程的生/死对应)。</p></li><li><p><strong>线程共享区域</strong>随虚拟机的启动/关闭而创建/销毁。</p></li></ul><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java3-1588125198.png" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><h6 id="程序计数器-线程私有）"><a href="#程序计数器-线程私有）" class="headerlink" title="程序计数器( 线程私有）"></a>程序计数器( 线程私有）</h6><ul><li><p>一块较小的内存空间, 是当前线程所执行的字节码的行号指示器，每条线程都要有一个独立的程序计数器，这类内存也称为“线程私有”的内存。</p></li><li><p>正在执行 java 方法的话，计数器记录的是虚拟机字节码指令的地址（当前指令的地址）。如果还是 Native 方法，则为空。</p></li><li><p>这个内存区域是唯一一个在虚拟机中没有规定任OutOfMemoryError 情况的区域。</p></li></ul><h6 id="JAVA虚拟机栈-线程私有"><a href="#JAVA虚拟机栈-线程私有" class="headerlink" title="JAVA虚拟机栈( 线程私有)"></a>JAVA虚拟机栈( 线程私有)</h6><ul><li><p><strong>是描述java方法执行的内存模型，每个方法在执行的同时都会创建一个栈帧（Stack Frame）用于存储局部变量表、操作数栈、动态链接、方法出口等信息</strong>。每一个方法从调用直至执行完成的过程，就对应着一个栈帧在虚拟机栈中入栈到出栈的过程。</p></li><li><p>栈帧（ Frame）是用来存储数据和部分过程结果的数据结构，同时也被用来处理动态链接(Dynamic Linking)、 方法返回值和异常分派（ Dispatch Exception）。<strong>栈帧随着方法调用而创建，随着方法结束而销毁</strong>——无论方法是正常完成还是异常完成（抛出了在方法内未被捕获的异常）都算作方法结束。  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java0-1588125198.png" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p></li></ul><h6 id="本地方法区-线程私有）"><a href="#本地方法区-线程私有）" class="headerlink" title="本地方法区(线程私有）"></a>本地方法区(线程私有）</h6><ul><li>本地方法区和 <strong>Java Stack</strong> 作用类似, 区别是虚拟机栈为执行 Java 方法服务, 而<strong>本地方法栈则为Native 方法服务</strong>, 如果一个 VM 实现使用 C-linkage 模型来支持 Native 调用, 那么该栈将会是一个C 栈，但 HotSpot VM 直接就把本地方法栈和虚拟机栈合二为一。</li></ul><h6 id="堆（Heap-线程共享）运行时数据区"><a href="#堆（Heap-线程共享）运行时数据区" class="headerlink" title="堆（Heap- 线程共享）运行时数据区"></a>堆（Heap- 线程共享）运行时数据区</h6><ul><li>是被线程共享的一块内存区域，创建的对象和数组都保存在 Java 堆内存中，也是垃圾收集器进行垃圾收集的最重要的内存区域。由于现代 VM 采用分代收集算法, 因此 Java 堆从 GC 的角度还可以细分为: <strong>新生代( Eden 区 、 From Survivor 区 和 To Survivor 区 )和老年代</strong>(jdk1.7)。</li></ul><h6 id="方法区-永久代-（线程共享）"><a href="#方法区-永久代-（线程共享）" class="headerlink" title="方法区/ 永久代 （线程共享）"></a>方法区/ 永久代 （线程共享）</h6><ul><li>即我们常说的永久代(Permanent Generation), 用于存储被 <strong>JVM 加载的类信息、常量、静态变量、即时编译器编译后的代码等数据</strong>. HotSpot VM把GC分代收集扩展至方法区, 即使用Java堆的永久代来实现方法区, 这样 HotSpot 的垃圾收集器就可以像管理 Java 堆一样管理这部分内存,而不必为方法区开发专门的内存管理器(永久带的内存回收的主要目标是针对常量池的回收和类型的卸载, 因此收益一般很小)。</li></ul><h6 id="运行时常量池"><a href="#运行时常量池" class="headerlink" title="运行时常量池"></a>运行时常量池</h6><ul><li>（Runtime Constant Pool）是方法区的一部分。Class 文件中除了有类的版本、字段、方法、接口等描述等信息外，还有一项信息是常量池（Constant Pool Table），用于存放编译期生成的各种字面量和符号引用，这部分内容将在类加载后存放到方法区的运行时常量池中。Java 虚拟机对 Class 文件的每一部分（自然也包括常量池）的格式都有严格的规定，每一个字节用于存储哪种数据都必须符合规范上的要求，这样才会被虚拟机认可、装载和执行。</li></ul><h6 id="直接内存"><a href="#直接内存" class="headerlink" title="直接内存"></a>直接内存</h6><ul><li>直接内存并不是 JVM 运行时数据区的一部分, 但也会被频繁的使用: 在 JDK 1.4 引入的 NIO 提供了基于 Channel 与 Buffer 的 IO 方式, 它可以使用 Native 函数库直接分配堆外内存, 然后使用DirectByteBuffer 对象作为这块内存的引用进行操作， 这样就避免了在 Java堆和 Native 堆中来回复制数据, 因此在一些场景中可以显著提高性能。</li></ul><h3 id="JVM运行时内存-jdk1-7"><a href="#JVM运行时内存-jdk1-7" class="headerlink" title="JVM运行时内存(jdk1.7)"></a>JVM运行时内存(jdk1.7)</h3><ul><li><p>Java 堆从 GC 的角度还可以细分为: <strong>新生代</strong>( Eden 区 、 From Survivor 区 和 To Survivor 区 )和<strong>老年代</strong>  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java2-1588125198.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p></li></ul><h6 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h6><p>是用来存放新生的对象。一般占据堆的1/3空间。由于频繁创建对象，所以新生代会频繁触发MinorGC 进行垃圾回收。新生代又分为 Eden 区、ServivorFrom、ServivorTo 三个区。</p><ul><li><p>Eden区：Java新对象的出生地（如果新创建的对象占用内存很大，则直接分配到老年代）。当Eden区内存不够的时候就会触发MinorGC，对新生代区进行一次垃圾回收。</p></li><li><p>ServivorFrom：上一次 GC 的幸存者，作为这一次 GC 的被扫描者。</p></li><li><p>ServivorTo：保留了一次 MinorGC 过程中的幸存者。</p></li><li><p>MinorGC 的过程：（复制-&gt;清空-&gt;互换）MinorGC 采用复制算法。</p></li><li><p><strong>eden 、 servicorFrom  复制到 ServicorTo，年龄+1</strong><br>  首先，把 Eden和 ServivorFrom区域中存活的对象复制到 ServicorTo区域（如果有对象的年龄以及达到了老年的(默认15岁，可以通过-XXMaxTenuringThreshold设置)，则赋值到老年代区），同时把这些对象的年龄+1（如果 ServicorTo 不够位置了就放到老年区）。</p></li><li><p><strong>清空 eden 、 servicorFrom</strong>**<br> 清空 Eden 和 ServicorFrom 中的对象；</p></li><li><p><strong>ServicorTo 和 ServicorFrom 互换</strong><br> 最后，ServicorTo 和 ServicorFrom 互换，原 ServicorTo 成为下一次 GC 时的 ServicorFrom区。</p></li></ul><h6 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h6><ul><li><p>主要存放应用程序中生命周期长的内存对象。</p></li><li><p>老年代的对象比较稳定，所以 MajorGC 不会频繁执行。在进行 MajorGC 前一般都先进行了一次 MinorGC，使得有新生代的对象晋身入老年代，导致空间不够用时才触发。当无法找到足够大的连续空间分配给新创建的较大对象时也会提前触发一次 MajorGC 进行垃圾回收腾出空间。</p></li><li><p>MajorGC 采用<strong>标记清除算法</strong>：首先扫描一次所有老年代，标记出存活的对象，然后回收没有标记的对象。MajorGC 的耗时比较长，因为要扫描再回收。MajorGC 会产生内存碎片，为了减少内存损耗，我们一般需要进行合并或者标记出来方便下次直接分配。当老年代也满了装不下的时候，就会抛出 OOM（Out of Memory）异常。</p></li></ul><h6 id="永久代"><a href="#永久代" class="headerlink" title="永久代"></a>永久代</h6><p>-指内存的永久保存区域，主要存放 Class 和 Meta（元数据）的信息,Class 在被加载的时候被放入永久区域，它和和存放实例的区域不同,<strong>GC 不会在主程序运行期对永久区域进行清理</strong>。所以这也导致了永久代的区域会随着加载的 Class 的增多而胀满，最终抛出 OOM 异常。</p><h6 id="JAVA8-与元数据"><a href="#JAVA8-与元数据" class="headerlink" title="JAVA8 与元数据"></a>JAVA8 与元数据</h6><p>在Java8中，<strong>永久代已经被移除，被一个称为“元数据区”（元空间）的区域所取代</strong>。元空间的本质和永久代类似，元空间与永久代之间最大的区别在于：<strong>元空间并不在虚拟机中，而是使用本地内存。因此，默认情况下，元空间的大小仅受本地内存限制</strong>。类的元数据放入 nativememory, 字符串池和类的静态变量放入 java 堆中，这样可以加载多少类的元数据就不再由MaxPermSize 控制, 而由系统的实际可用空间来控制。</p><h3 id="垃圾回收与算法"><a href="#垃圾回收与算法" class="headerlink" title="垃圾回收与算法"></a>垃圾回收与算法</h3><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java3-1588125198-1.png" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><h4 id="如何确定垃圾"><a href="#如何确定垃圾" class="headerlink" title="如何确定垃圾"></a>如何确定垃圾</h4><h6 id="引用计数法"><a href="#引用计数法" class="headerlink" title="引用计数法"></a>引用计数法</h6><ul><li>在 Java 中，引用和对象是有关联的。如果要操作对象则必须用引用进行。因此，很显然一个简单的办法是通过引用计数来判断一个对象是否可以回收。简单说，即一个对象如果没有任何与之关联的引用，即他们的引用计数都不为 0，则说明对象不太可能再被用到，那么这个对象就是可回收对象。</li></ul><h6 id="可达性分析"><a href="#可达性分析" class="headerlink" title="可达性分析"></a>可达性分析</h6><ul><li>为了解决引用计数法的循环引用问题，Java 使用了可达性分析的方法。通过一系列的“GC roots”对象作为起点搜索<strong>。如果在“GC roots”和一个对象之间没有可达路径，则称该对象是不可达的</strong>。要注意的是，不可达对象不等价于可回收对象，<strong>不可达对象变为可回收对象至少要经过两次标记过程</strong>。两次标记后仍然是可回收对象，则将面临回收。</li></ul><h4 id="标记清除算法（-Mark-Sweep-）"><a href="#标记清除算法（-Mark-Sweep-）" class="headerlink" title="标记清除算法（ Mark-Sweep ）"></a>标记清除算法（ Mark-Sweep ）</h4><ol><li><p>最基础的垃圾回收算法，分为两个阶段，标注和清除。标记阶段标记出所有需要回收的对象，清除阶段回收被标记的对象所占用的空间。如图  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java0-1588125198.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p></li></ol><pre><code>从图中我们就可以发现，该算法最大的问题是内存碎片化严重，后续可能发生大对象不能找到可利用空间的问题。</code></pre><h4 id="复制算法（copying-）"><a href="#复制算法（copying-）" class="headerlink" title="复制算法（copying ）"></a>复制算法（copying ）</h4><ul><li><p>为了解决 Mark-Sweep 算法内存碎片化的缺陷而被提出的算法。按内存容量将内存划分为等大小的两块。每次只使用其中一块，当这一块内存满后将尚存活的对象复制到另一块上去，把已使用的内存清掉，如图：  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java6-1588125198.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p></li></ul><p>  这种算法虽然实现简单，内存效率高，不易产生碎片，但是最大的问题是可用内存被压缩到了原本的一半。且存活对象增多的话，Copying 算法的效率会大大降低。</p><h4 id="标记整理算法-Mark-Compact"><a href="#标记整理算法-Mark-Compact" class="headerlink" title="标记整理算法(Mark-Compact)"></a>标记整理算法(Mark-Compact)</h4><p>结合了以上两个算法，为了避免缺陷而提出。标记阶段和 Mark-Sweep 算法相同，标<strong>记后不是清理对象，而是将存活对象移向内存的一端。然后清除端边界外的对象</strong>。如图：  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java0-1588125198-1.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><h3 id="分代收集算法"><a href="#分代收集算法" class="headerlink" title="分代收集算法"></a>分代收集算法</h3><ul><li>分代收集法是目前大部分 JVM 所采用的方法，其核心思想是根据对象存活的不同生命周期将内存划分为不同的域，一般情况下将 GC 堆划分为老生代(Tenured/Old Generation)和新生(YoungGeneration)。老生代的特点是每次垃圾回收时只有少量对象需要被回收，新生代的特点是每次垃圾回收时都有大量垃圾需要被回收，因此可以根据不同区域选择不同的算法。</li></ul><h5 id="新生代与复制算法"><a href="#新生代与复制算法" class="headerlink" title="新生代与复制算法"></a>新生代与复制算法</h5><ul><li><p>目前大部分 JVM 的 GC 对于新生代都采取 Copying 算法，因为新生代中每次垃圾回收都要回收大部分对象，即要复制的操作比较少，但通常并不是按照 1：1 来划分新生代。一般将新生代划分为一块较大的 Eden 空间和两个较小的 Survivor 空间(From Space, To Space)，每次使用Eden 空间和其中的一块 Survivor 空间，当进行回收时，将该两块空间中还存活的对象复制到另一块 Survivor 空间中。  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java2-1588125198-1.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p></li></ul><h5 id="老年代与标记复制算法"><a href="#老年代与标记复制算法" class="headerlink" title="老年代与标记复制算法"></a>老年代与标记复制算法</h5><p>而老年代因为每次只回收少量对象，因而采用 Mark-Compact 算法。</p><ul><li><p>JAVA 虚拟机提到过的处于<strong>方法区的永生代(Permanet Generation)，它用来存储 class 类，常量，方法描述等</strong>。对永生代的回收主要包括废弃常量和无用的类。</p></li><li><p>对象的内存分配主要在新生代的 Eden Space 和 Survivor Space 的 From Space(Survivor 目前存放对象的那一块)，少数情况会直接分配到老生代。</p></li><li><p>当新生代的 Eden Space 和 From Space 空间不足时就会发生一次 GC，进行 GC 后，EdenSpace 和 From Space 区的存活对象会被挪到 To Space，然后将 Eden Space 和 FromSpace 进行清理。</p></li><li><p>如果 To Space 无法足够存储某个对象，则将这个对象存储到老生代。</p></li><li><p>在进行 GC 后，使用的便是 Eden Space 和 To Space 了，如此反复循环。</p></li><li><p>当对象在 Survivor 区躲过一次 GC 后，其年龄就会+1。默认情况下年龄到达 15 的对象会被移到老生代中。</p></li></ul><h3 id="GC-分代收集算法-VS-分区收集算法"><a href="#GC-分代收集算法-VS-分区收集算法" class="headerlink" title="GC  分代收集算法 VS  分区收集算法"></a>GC  分代收集算法 VS  分区收集算法</h3><h4 id="分代收集算法-1"><a href="#分代收集算法-1" class="headerlink" title="分代收集算法"></a>分代收集算法</h4><p>当前主流 JVM 垃圾收集都采用”分代收集”(Generational Collection)算法, 这种算法会根据对象存活周期的不同将内存划分为几块, 如 JVM 中的 <strong>新生代、老年代、永久代</strong>，这样就可以根据各年代特点分别采用最适当的 GC 算法。</p><ul><li><p><strong>在新生代-复制算法</strong><br>每次垃圾收集都能发现大批对象已死, 只有少量存活. 因此选用复制算法, 只需要付出少量存活对象的复制成本就可以完成收集。</p></li><li><p><strong>在老年代-标记整理算法</strong><br>因为对象存活率高、没有额外空间对它进行分配担保, 就必须采用“<strong>标记—清理”或“标记—整理”</strong>算法来进行回收, 不必进行内存复制, 且直接腾出空闲内存。</p></li></ul><h4 id="分区收集算法"><a href="#分区收集算法" class="headerlink" title="分区收集算法"></a>分区收集算法</h4><p><strong>分区算法则将整个堆空间划分为连续的不同小区间, 每个小区间独立使用, 独立回收. 这样做的好处是可以控制一次回收多少个小区间</strong> , 根据目标停顿时间, 每次合理地回收若干个小区间(而不是整个堆), 从而减少一次 GC 所产生的停顿。</p><h3 id="GC-垃圾收集器"><a href="#GC-垃圾收集器" class="headerlink" title="GC 垃圾收集器"></a>GC 垃圾收集器</h3><p>Java 堆内存被划分为新生代和年老代两部分，新生代主要使用复制和标记-清除垃圾回收 算法 ,年老代主要使用标记-整理垃圾回收算法，因此 java 虚拟中针对新生代和年老代分别提供了多种不同的垃圾收集器，JDK1.6 中 Sun HotSpot 虚拟机的垃圾收集器如下：  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java5-1588125198.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><h4 id="Serial-垃圾收集器-（单线程、-复制算法-）"><a href="#Serial-垃圾收集器-（单线程、-复制算法-）" class="headerlink" title="Serial  垃圾收集器 （单线程、 复制算法 ）"></a>Serial  垃圾收集器 （单线程、 复制算法 ）</h4><ul><li><strong>Serial（英文连续）是最基本垃圾收集器，使用复制算法</strong>，曾经是JDK1.3.1之前新生代唯一的垃圾收集器。Serial 是一个单线程的收集器，它不但只会使用一个 CPU 或一条线程去完成垃圾收集工作，并且在进行垃圾收集的同时，必须暂停其他所有的工作线程，直到垃圾收集结束。Serial 垃圾收集器虽然在收集垃圾过程中需要暂停所有其他的工作线程，但是它简单高效，对于限定单个 CPU 环境来说，没有线程交互的开销，可以获得最高的单线程垃圾收集效率，因此 <strong>Serial垃圾收集器依然是 java 虚拟机运行在 Client 模式下默认的新生代垃圾收集器。</strong></li></ul><h4 id="ParNew-垃圾收集器-（Serial-多线程-）"><a href="#ParNew-垃圾收集器-（Serial-多线程-）" class="headerlink" title="ParNew  垃圾收集器 （Serial+ 多线程 ）"></a>ParNew  垃圾收集器 （Serial+ 多线程 ）</h4><ul><li><strong>ParNew 垃圾收集器其实是 Serial 收集器的多线程版本，也使用复制算法</strong>，除了使用多线程进行垃圾收集之外，其余的行为和 Serial 收集器完全一样，ParNew 垃圾收集器在垃圾收集过程中同样也要暂停所有其他的工作线程。ParNew 收集器默认开启和 CPU 数目相同的线程数，可以通过-XX:ParallelGCThreads 参数来限制垃圾收集器的线程数。【Parallel：平行的】ParNew虽然是除了多线程外和Serial收集器几乎完全一样，<strong>但是ParNew垃圾收集器是很多java虚拟机运行在 Server 模式下新生代的默认垃圾收集器。</strong></li></ul><h4 id="Parallel-Scavenge-收集器-（多线程复制算法、高效）"><a href="#Parallel-Scavenge-收集器-（多线程复制算法、高效）" class="headerlink" title="Parallel Scavenge  收集器 （多线程复制算法、高效）"></a>Parallel Scavenge  收集器 （多线程复制算法、高效）</h4><ul><li>Parallel Scavenge 收集器也是一个新生代垃圾收集器，同样使用复制算法，也是一个多线程的垃圾收集器，<strong>它重点关注的是程序达到一个可控制的吞吐量</strong>（Thoughput，CPU 用于运行用户代码的时间/CPU 总消耗时间，即吞吐量=运行用户代码时间/(运行用户代码时间+垃圾收集时间)），高吞吐量可以最高效率地利用 CPU 时间，尽快地完成程序的运算任务，主要适用于在后台运算而不需要太多交互的任务。<strong>自适应调节策略也是 ParallelScavenge 收集器与 ParNew 收集器的一个重要区别。</strong></li></ul><h4 id="Serial-Old-收集器-单线程标记整理算法）"><a href="#Serial-Old-收集器-单线程标记整理算法）" class="headerlink" title="Serial Old  收集器 (单线程标记整理算法）"></a>Serial Old  收集器 (单线程标记整理算法）</h4><p>Serial Old 是 Serial 垃圾收集器年老代版本，它同样是个单线程的收集器，使用标记-整理算法，这个收集器也主要是运行在 Client 默认的 java 虚拟机默认的年老代垃圾收集器。在 Server 模式下，主要有两个用途：  </p><ol><li>在 JDK1.5 之前版本中与新生代的 Parallel Scavenge 收集器搭配使用。  </li><li>作为年老代中使用 CMS 收集器的后备垃圾收集方案。<br>新生代 Serial 与年老代 Serial Old 搭配垃圾收集过程图：</li></ol><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java6-1588125198-1.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><p>新生代 Parallel Scavenge 收集器与 ParNew 收集器工作原理类似，都是多线程的收集器，都使用的是复制算法，在垃圾收集过程中都需要暂停所有的工作线程。新生代 ParallelScavenge/ParNew 与年老代 Serial Old 搭配垃圾收集过程图：                   </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java5-1588125198-1.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><h4 id="Parallel-Old-收集器（多线程标记整理算法）"><a href="#Parallel-Old-收集器（多线程标记整理算法）" class="headerlink" title="Parallel Old  收集器（多线程标记整理算法）"></a>Parallel Old  收集器（多线程标记整理算法）</h4><p>Parallel Old收集器是Parallel Scavenge的年老代版本，使用多线程的标记-整理算法，在JDK1.6才开始提供。在 JDK1.6 之前，新生代使用 ParallelScavenge 收集器只能搭配年老代的 Serial Old 收集器，只能保证新生代的吞吐量优先，无法保证整体的吞吐量，Parallel Old 正是为了在年老代同样提供吞吐量优先的垃圾收集器，如果系统对吞吐量要求比较高，可以优先考虑新生代 Parallel Scavenge和年老代 Parallel Old 收集器的搭配策略。新生代 Parallel Scavenge 和年老代 Parallel Old 收集器搭配运行过程图：  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java7-1588125198.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><h4 id="CMS-收集器-（多线程标记清除算法）"><a href="#CMS-收集器-（多线程标记清除算法）" class="headerlink" title="CMS  收集器 （多线程标记清除算法）"></a>CMS  收集器 （多线程标记清除算法）</h4><p>Concurrent mark sweep(CMS)收集器是一种年老代垃圾收集器，其最主要目标是获取最短垃圾回收停顿时间，和其他年老代使用标记-整理算法不同，它使用多线程的标记-清除算法。最短的垃圾收集停顿时间可以为交互比较高的程序提高用户体验。CMS 工作机制相比其他的垃圾收集器来说更复杂，整个过程分为以下 4 个阶段：<br> <strong>1.初始标记</strong>：只是标记一下 GC Roots 能直接关联的对象，速度很快，仍然需要暂停所有的工作线程。<br> <strong>2.并发标记：</strong> 进行 GC Roots 跟踪的过程，和用户线程一起工作，不需要暂停工作线程。<br> <strong>3.重新标记：</strong> 为了修正在并发标记期间，因用户程序继续运行而导致标记产生变动的那一部分对象的标记记录，仍然需要暂停所有的工作线程。<br> <strong>4.并发清除：</strong> 清除 GC Roots 不可达对象，和用户线程一起工作，不需要暂停工作线程。由于耗时最长的并<br>发标记和并发清除过程中，垃圾收集线程可以和用户现在一起并发工作，所以总体上来看<strong>CMS 收集器的内存回收和用户线程是一起并发地执行。</strong>  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java7-1588125198-1.jpeg" alt="超长JVM总结,面试必备" title="超长JVM总结,面试必备">在这里插入图片描述</p><h4 id="G1-收集器"><a href="#G1-收集器" class="headerlink" title="G1  收集器"></a>G1  收集器</h4><p>Garbage first 垃圾收集器是目前垃圾收集器理论发展的最前沿成果，相比与 CMS 收集器，G1 收<br>集器两个最突出的改进是：</p><ol><li><p>基于标记-整理算法，不产生内存碎片。</p></li><li><p>可以非常精确控制停顿时间，在不牺牲吞吐量前提下，实现低停顿垃圾回收。<br><strong>G1 收集器避免全区域垃圾收集，它把堆内存划分为大小固定的几个独立区域</strong>，并且跟踪这些区域的垃圾收集进度，同时在后台维护一个优先级列表，每次根据所允许的收集时间，<strong>优先回收垃圾最多的区域</strong>。区域划分和优先级区域回收机制，确保 G1 收集器可以在有限时间获得最高的垃圾收集效率。</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>秒杀系统设计的 5 个要点：前端三板斧＋后端两条路！</title>
      <link href="/2020/05/08/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84_5_%E4%B8%AA%E8%A6%81%E7%82%B9%EF%BC%9A%E5%89%8D%E7%AB%AF%E4%B8%89%E6%9D%BF%E6%96%A7%EF%BC%8B%E5%90%8E%E7%AB%AF%E4%B8%A4%E6%9D%A1%E8%B7%AF%EF%BC%81/"/>
      <url>/2020/05/08/%E7%A7%92%E6%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E7%9A%84_5_%E4%B8%AA%E8%A6%81%E7%82%B9%EF%BC%9A%E5%89%8D%E7%AB%AF%E4%B8%89%E6%9D%BF%E6%96%A7%EF%BC%8B%E5%90%8E%E7%AB%AF%E4%B8%A4%E6%9D%A1%E8%B7%AF%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者：cfyme</p><p><a href="https://www.tuicool.com/articles/JzQvUb" target="_blank" rel="noopener">https://www.tuicool.com/articles/JzQvUb</a></p></blockquote><h2 id="秒杀系统涉及到的知识点："><a href="#秒杀系统涉及到的知识点：" class="headerlink" title="秒杀系统涉及到的知识点："></a>秒杀系统涉及到的知识点：</h2><ul><li><p>高并发，cache，锁机制</p></li><li><p>基于缓存架构redis,Memcached的先进先出队列。</p></li><li><p>稍微大一点的秒杀，肯定是分布式的集群的，并发来自于多个节点的JVM，synchronized所有在JVM上加锁是不行了</p></li><li><p>数据库压力</p></li><li><p>秒杀超卖问题</p></li><li><p>如何防止用户来刷， 黑名单？IP限制？</p></li><li><p>利用memcached的带原子性特性的操作做并发控制.</p></li></ul><h2 id="秒杀简单设计方案如："><a href="#秒杀简单设计方案如：" class="headerlink" title="秒杀简单设计方案如："></a>秒杀简单设计方案如：</h2><p>比如有10件商品要秒杀，可以放到缓存中，读写时不要加锁。当并发量大的时候，可能有25个人秒杀成功，这样后面的就可以直接抛秒杀结束的静态页面。进去的25个人中有15个人是不可能获得商品的。所以可以根据进入的先后顺序只能前10个人购买成功。后面15个人就抛商品已秒杀完。</p><h2 id="假设我们的秒杀场景："><a href="#假设我们的秒杀场景：" class="headerlink" title="假设我们的秒杀场景："></a>假设我们的秒杀场景：</h2><p>比如某商品10件物品待秒. 假设有100台web服务器(假设web服务器是Nginx + Tomcat),n台app服务器,n个数据库</p><ol><li><p>第一步 如果Java层做过滤, 可以在每台web服务器的业务处理模块里做个计数器AtomicInteger(10)=待秒商品总数,decreaseAndGet()&gt;＝0的继续做后续处理, &lt;0的直接返回秒杀结束页面.<code>这样经过第一步的处理只剩下100台*10个=1000个请求</code>.</p></li><li><p>第二步, memcached 里以商品id作为key的value放个10, 每个web服务器在接到每个请求的同时, 向memcached服务器发起请求, 利用memcached的decr(key,1)操作返回值&gt;=0的继续处理, 其余的返回秒杀失败页面.<code>这样经过第二步的处理只剩下100台中最快速到达的10个请求</code>.</p></li><li><p>第三步, 向App服务器发起下单操作事务.</p></li><li><p>第四步, App服务器向商品所在的数据库请求减库存操作,</p></li></ol><p>(操作数据库时可以 <code>update table set count=count-1 where id=商品id and count&gt;0;</code> update 成功记录数为1, 再向订单数据库添加订单记录, 都成功后提交整个事务, 否则的话提示秒杀失败. 用户进入支付流程.</p><h2 id="在看看淘宝的秒杀："><a href="#在看看淘宝的秒杀：" class="headerlink" title="在看看淘宝的秒杀："></a>在看看淘宝的秒杀：</h2><h3 id="1、前端"><a href="#1、前端" class="headerlink" title="1、前端"></a>1、前端</h3><p>面对高并发的抢购活动，前端常用的三板斧是【扩容】【静态化】【限流】</p><ul><li><strong>扩容</strong></li></ul><p>加机器，这是最简单的方法，通过增加前端池的整体承载量来抗峰值。</p><ul><li><strong>静态化</strong></li></ul><p>将活动页面上的所有可以静态的元素全部静态化，并尽量减少动态元素。通过CDN来抗峰值。</p><ul><li><strong>限流</strong></li></ul><p>一般都会采用IP级别的限流，即针对某一个IP，限制单位时间内发起请求数量。</p><p>或者活动入口的时候增加游戏或者问题环节进行消峰操作。</p><ul><li><strong>有损服务</strong></li></ul><p>最后一招，在接近前端池承载能力的水位上限的时候，随机拒绝部分请求来保护活动整体的可用性。</p><h3 id="2、后端"><a href="#2、后端" class="headerlink" title="2、后端"></a>2、后端</h3><p>那么后端的数据库在高并发和超卖下会遇到什么问题呢</p><ul><li><p>首先MySQL自身对于高并发的处理性能就会出现问题，一般来说，MySQL的处理性能会随着并发thread上升而上升，但是到了一定的并发度之后会出现明显的拐点，之后一路下降，最终甚至会比单thread的性能还要差。</p></li><li><p>其次，超卖的根结在于减库存操作是一个事务操作，需要先select，然后insert，最后update -1。最后这个-1操作是不能出现负数的，但是当多用户在有库存的情况下并发操作，出现负数这是无法避免的。</p></li><li><p>最后，当减库存和高并发碰到一起的时候，由于操作的库存数目在同一行，就会出现争抢InnoDB行锁的问题，导致出现互相等待甚至死锁，从而大大降低MySQL的处理性能，最终导致前端页面出现超时异常。</p></li></ul><h2 id="针对上述问题，如何解决呢？淘宝的高大上解决方案："><a href="#针对上述问题，如何解决呢？淘宝的高大上解决方案：" class="headerlink" title="针对上述问题，如何解决呢？淘宝的高大上解决方案："></a>针对上述问题，如何解决呢？淘宝的高大上解决方案：</h2><ul><li><p>关闭死锁检测，提高并发处理性能。</p></li><li><p>修改源代码，将排队提到进入引擎层前，降低引擎层面的并发度。</p></li><li><p>组提交，降低server和引擎的交互次数，降低IO消耗。</p></li></ul><h3 id="解决方案1："><a href="#解决方案1：" class="headerlink" title="解决方案1："></a>解决方案1：</h3><p>将存库从MySQL前移到Redis中，所有的写操作放到内存中，由于Redis中不存在锁故不会出现互相等待，并且由于Redis的写性能和读性能都远高于MySQL，这就解决了高并发下的性能问题。然后通过队列等异步手段，将变化的数据异步写入到DB中。</p><p><strong>优点：</strong>解决性能问题</p><p><strong>缺点：</strong>没有解决超卖问题，同时由于异步写入DB，存在某一时刻DB和Redis中数据不一致的风险。</p><h3 id="解决方案2："><a href="#解决方案2：" class="headerlink" title="解决方案2："></a>解决方案2：</h3><p>引入队列，然后将所有写DB操作在单队列中排队，完全串行处理。当达到库存阀值的时候就不在消费队列，并关闭购买功能。这就解决了超卖问题。</p><p><strong>优点：</strong>解决超卖问题，略微提升性能。</p><p><strong>缺点：</strong>性能受限于队列处理机处理性能和DB的写入性能中最短的那个，另外多商品同时抢购的时候需要准备多条队列。</p><h3 id="解决方案3："><a href="#解决方案3：" class="headerlink" title="解决方案3："></a>解决方案3：</h3><p>将写操作前移到MC中，同时利用MC的轻量级的锁机制CAS来实现减库存操作。</p><p><strong>优点：</strong>读写在内存中，操作性能快，引入轻量级锁之后可以保证同一时刻只有一个写入成功，解决减库存问题。</p><p><strong>缺点：</strong>没有实测，基于CAS的特性不知道高并发下是否会出现大量更新失败？不过加锁之后肯定对并发性能会有影响。</p><h3 id="解决方案4："><a href="#解决方案4：" class="headerlink" title="解决方案4："></a>解决方案4：</h3><p>将提交操作变成两段式，先申请后确认。然后利用Redis的原子自增操作，同时利用Redis的事务特性来发号，保证拿到小于等于库存阀值的号的人都可以成功提交订单。然后数据异步更新到DB中。</p><p><strong>优点：</strong>解决超卖问题，库存读写都在内存中，故同时解决性能问题。</p><p><strong>缺点：</strong>由于异步写入DB，可能存在数据不一致。另可能存在少买，也就是如果拿到号的人不真正下订单，可能库存减为0，但是订单数并没有达到库存阀值。</p><h2 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h2><p>1、前端三板斧【扩容】【限流】【静态化】</p><p>2、后端两条路【内存】+【排队】</p>]]></content>
      
      
      
        <tags>
            
            <tag> 架构 </tag>
            
            <tag> 系统设计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>大白话带你梳理一下Dubbo的那些事儿</title>
      <link href="/2020/04/26/%E5%A4%A7%E7%99%BD%E8%AF%9D%E5%B8%A6%E4%BD%A0%E6%A2%B3%E7%90%86%E4%B8%80%E4%B8%8BDubbo%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/"/>
      <url>/2020/04/26/%E5%A4%A7%E7%99%BD%E8%AF%9D%E5%B8%A6%E4%BD%A0%E6%A2%B3%E7%90%86%E4%B8%80%E4%B8%8BDubbo%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B%E5%84%BF/</url>
      
        <content type="html"><![CDATA[<p><em>首先声明，本文并不是什么代码实战类型的文章，适合于想对dubbo有更加全面认识的读者阅读，文章不会过于深奥，只是将一系列的知识点串通起来，帮助读者温故而知新。</em></p><h2 id="RPC服务的介绍"><a href="#RPC服务的介绍" class="headerlink" title="RPC服务的介绍"></a>RPC服务的介绍</h2><p>相信有过一些分布式开发经历的读者都有用过一些RPC框架，通过框架包装好之后提供的API接口调用远程服务，体验感觉起来就和调用本地服务一样轻松。<strong>这么方便好用的技术框架，在实际的开发过程中是如何包装的呢?</strong></p><p>很早的时候，国外的工程师设计了一种能够通过A计算机调用B计算机上边应用程序的技术，这种技术不需要开发人员对于网络通讯了解过多，并且调用其他机器上边程序的时候和调用本地的程序一样方便好用。</p><p>A机器发起请求去调用B机器程序的时候会被挂起，B机器接收到A机器发起的请求参数之后会做一定的参数转换，最后将对应的程序结果返回给A，这就是最原始的RPC服务调用了。</p><h2 id="RPC调用的优势"><a href="#RPC调用的优势" class="headerlink" title="RPC调用的优势"></a>RPC调用的优势</h2><h3 id="简单"><a href="#简单" class="headerlink" title="简单"></a>简单</h3><p><strong>不需要开发者对于网络通信做过多的设置</strong>，例如我们在使用http协议进行远程接口调用的时候，总是会需要编写较多的http协议参数（header，context，Accept-Language,Accept-Encode等等），这些处理对于开发人员来说，实际上都并不是特别友好。但是RPC服务调用框架通常都将这类解析进行了对应的封装，大大降低了开发人员的使用难度。</p><h3 id="高效"><a href="#高效" class="headerlink" title="高效"></a>高效</h3><p>在网络传输方面，RPC更多是处于应用层和传输层之间。这里我们需要先理清楚一个问题，网络分层。RPC是处于会话层的部分，相比处于应用层的HTTP而言，<strong>RPC要比Rest服务调用更加轻便。</strong></p><h2 id="常见的远程调用技术"><a href="#常见的远程调用技术" class="headerlink" title="常见的远程调用技术"></a>常见的远程调用技术</h2><h3 id="rmi"><a href="#rmi" class="headerlink" title="rmi"></a>rmi</h3><p>利用java.rmi包实现，<strong>基于Java远程方法协议(Java Remote Method Protocol) 和java的原生序列化</strong>。</p><h3 id="Hessian"><a href="#Hessian" class="headerlink" title="Hessian"></a>Hessian</h3><p><strong>是一个轻量级的remoting onhttp工具</strong>，使用简单的方法提供了RMI的功能。基于HTTP协议，采用二进制编解码。</p><h3 id="protobuf-rpc-pro"><a href="#protobuf-rpc-pro" class="headerlink" title="protobuf-rpc-pro"></a>protobuf-rpc-pro</h3><p><strong>是一个Java类库</strong>，提供了基于 Google 的 Protocol Buffers 协议的远程方法调用的框架。基于 Netty 底层的 NIO 技术。支持 TCP 重用/ keep-alive、SSL加密、RPC 调用取消操作、嵌入式日志等功能。</p><h3 id="Thrift"><a href="#Thrift" class="headerlink" title="Thrift"></a>Thrift</h3><p><strong>是一种可伸缩的跨语言服务的软件框架</strong>。它拥有功能强大的代码生成引擎，无缝地支持C + +，C#，Java，Python和PHP和Ruby。thrift允许你定义一个描述文件，描述数据类型和服务接口。依据该文件，编译器方便地生成RPC客户端和服务器通信代码。</p><p>最初由facebook开发用做系统内部语言之间的RPC通信，2007年由facebook贡献到apache基金 ，现在是apache下的opensource之一 。支持多种语言之间的RPC方式的通信：php语言client可以构造一个对象，调用相应的服务方法来调用java语言的服务，跨越语言的C/S RPC调用。底层通讯基于SOCKET。</p><h3 id="Avro"><a href="#Avro" class="headerlink" title="Avro"></a>Avro</h3><p><strong>出自Hadoop之父Doug Cutting</strong>, 在Thrift已经相当流行的情况下推出Avro的目标不仅是提供一套类似Thrift的通讯中间件,更是要建立一个新的，标准性的云计算的数据交换和存储的Protocol。支持HTTP，TCP两种协议。</p><h3 id="Dubbo"><a href="#Dubbo" class="headerlink" title="Dubbo"></a>Dubbo</h3><p><strong>Dubbo是 阿里巴巴公司开源的一个高性能优秀的服务框架**</strong>，使得应用可通过高性能的 RPC 实现服务的输出和输入功能，可以和 Spring框架无缝集成。**</p><p>上边我们说到了RPC的远程调用发展历史，那么下边我们一起来深入探讨一下RPC的服务。</p><p>首先我们来看看OSI的网络协议内容。</p><h2 id="OSI的七层网络模型"><a href="#OSI的七层网络模型" class="headerlink" title="OSI的七层网络模型"></a>OSI的七层网络模型</h2><p>对于OSI的七层网络模型我绘制了下边的这么一张图：  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/01/java1-1578536515.png" alt="大白话带你梳理一下Dubbo的那些事儿" title="大白话带你梳理一下Dubbo的那些事儿">  </p><p><strong>下边是我个人对于这七层协议的理解：</strong></p><ul><li><p><strong>应用层</strong> 主要是对于服务接口的格式多定义，例如提供一定的终端接口暴露给外部应用调用。</p></li><li><p><strong>表示层</strong> 处理一些数据传输的格式转换，例如说编码的统一，加密和解密处理。</p></li><li><p><strong>会话层</strong> 管理用户的会话和对话，建立不同机器之间的会话连接。</p></li><li><p><strong>传输层</strong> 向网络层提供可靠有序的数据包信息。</p></li><li><p><strong>网络层</strong> 真正发送数据包信息的层面，提供流和拥塞控制，从而降低网络的资源损耗。</p></li><li><p><strong>数据链路层</strong> 封装对应的数据包，检测和纠正数据包传输信息。</p></li><li><p><strong>物理层</strong> 通过网络通讯设备发送数据</p></li></ul><h2 id="HTTP-amp-RPC"><a href="#HTTP-amp-RPC" class="headerlink" title="HTTP &amp; RPC"></a>HTTP &amp; RPC</h2><p>HTTP主要是位于TCP/IP协议栈的应用层部分，首先需要构建三次握手的链接，接着才能进行数据信息的请求发送，最后进行四次挥手断开链接。</p><p>RPC在请求的过程中跨越了传输层和应用层，这是因为它本身是依赖于Socket的原因。（再深入的原因我也不知道）。减少了上边几层的封装，RPC的请求效率自然是要比HTTP高效很多。</p><p><strong>那么一个完整的RPC调用应该包含哪些部分呢？</strong></p><p>通常我们将一个完整的RPC架构分为了以下几个核心组件：</p><ul><li><p>Server</p></li><li><p>Client</p></li><li><p>Server Stub</p></li><li><p>Client Stub</p></li></ul><p>这四个模块中我稍微说下stub吧。这个单词翻译过来称之为存根。</p><p>*<em>Client Stub *</em>就是将客户端请求的参数，服务名称，服务地址进行打包，统一发送给server方。</p><p>*<em>Server Stub *</em>我用通俗易懂的语言来解释就是服务端接收到Client发送的数据之后进行消息解包，调用本地方法。（看过netty拆包机制应该会对这块比较了解）。</p><h2 id="Dubbo的核心属性"><a href="#Dubbo的核心属性" class="headerlink" title="Dubbo的核心属性"></a>Dubbo的核心属性</h2><p>其实Dubbo配置里面的核心内容就是 _<strong>服务暴露，服务发现，服务治理</strong>_。</p><h3 id="什么是服务暴露，服务发现，服务治理？"><a href="#什么是服务暴露，服务发现，服务治理？" class="headerlink" title="什么是服务暴露，服务发现，服务治理？"></a>什么是服务暴露，服务发现，服务治理？</h3><p>下边我们用一段xml的配置来进行讲解：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">    http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"dubbo-invoker-provider"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dubbo:parameter</span> <span class="attr">key</span>=<span class="string">"qos.port"</span> <span class="attr">value</span>=<span class="string">"22222"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dubbo:application</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"com.sise.user.service.UserServiceImpl"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"com.sise.user.service.UserService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在dubbo的配置文件里面，通常我们所说的<strong>dubbo:service</strong> 可以理解为服务暴露，<strong>dubbo:refernce</strong> 为服务发现，<strong>mock</strong>是服务治理，<strong>timeout</strong>属于服务治理的一种（性能调优）.</p><p>假设dubbo里面希望将一些公共的配置抽取出来，我们可以通过properties文件进行配置，dubbo在加载配置文件的优先顺序如下：</p><ol><li><p>优先会读取JVM -D启动参数后边的内容</p></li><li><p>读取xml配置文件</p></li><li><p>读取properties配置文件内容</p></li></ol><p>dubbo默认会读取dubbo.properties配置文件的信息，例如下边这种配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dubbo.application.name&#x3D;dubbo-user-service</span><br><span class="line">dubbo.registry.address&#x3D;zookeeper:&#x2F;&#x2F;127.0.0.1:2181</span><br></pre></td></tr></table></figure><p>假设我们的dubbo配置文件不命名为dubbo.properties（假设命名为了my-dubbo.properties）的时候，可以在启动参数的后边加上这么一段指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Ddubbo.properties.file&#x3D;my-dubbo.properties</span><br></pre></td></tr></table></figure><p>那么在应用程序启动之后，对应的工程就会读取指定的配置文件，这样就可以将一些共用的dubbo配置给抽取了出来。</p><h2 id="XML和配置类的映射"><a href="#XML和配置类的映射" class="headerlink" title="XML和配置类的映射"></a>XML和配置类的映射</h2><p>在工作中，我们通常都会通过配置xml的方式来设定一个服务端暴露的服务接口和消费端需要调用的服务信息，这些配置的xml实际上在dubbo的源码中都会被解析为对应的实体类对象。</p><p>例如说我们常用到的reference配置类，下边我贴出一段代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sise.user.config;</span><br><span class="line"><span class="keyword">import</span> com.sise.user.service.UserService;</span><br><span class="line"><span class="keyword">import</span> com.sise.user.service.UserServiceImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * dubbo里面的自定义配置类</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> idea</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@data</span> 2019/12/29</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DubboSelfDefConfig</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * dubbo的服务暴露</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">server</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationConfig applicationConfig = <span class="keyword">new</span> ApplicationConfig();</span><br><span class="line">        applicationConfig.setName(<span class="string">"dubbo-server-config"</span>);</span><br><span class="line">        RegistryConfig registryConfig = <span class="keyword">new</span> RegistryConfig();</span><br><span class="line">        registryConfig.setAddress(<span class="string">"zookeeper://127.0.0.1:2181"</span>);</span><br><span class="line">        ProtocolConfig protocolConfig = <span class="keyword">new</span> ProtocolConfig();</span><br><span class="line">        protocolConfig.setName(<span class="string">"dubbo"</span>);</span><br><span class="line">        protocolConfig.setPort(<span class="number">20880</span>);</span><br><span class="line">        protocolConfig.setThreads(<span class="number">200</span>);</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserServiceImpl();</span><br><span class="line">        ServiceConfig&lt;UserService&gt; serviceConfig = <span class="keyword">new</span> ServiceConfig&lt;&gt;();</span><br><span class="line">        serviceConfig.setApplication(applicationConfig);</span><br><span class="line">        serviceConfig.setRegistry(registryConfig);</span><br><span class="line">        serviceConfig.setProtocol(protocolConfig);</span><br><span class="line">        serviceConfig.setInterface(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        serviceConfig.setRef(userService);</span><br><span class="line">        serviceConfig.export();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ApplicationConfig applicationConfig = <span class="keyword">new</span> ApplicationConfig();</span><br><span class="line">        applicationConfig.setName(<span class="string">"dubbo-client-config"</span>);</span><br><span class="line">        RegistryConfig registryConfig = <span class="keyword">new</span> RegistryConfig();</span><br><span class="line">        registryConfig.setAddress(<span class="string">"zookeeper://127.0.0.1:2181"</span>);</span><br><span class="line">        ReferenceConfig&lt;UserService&gt; referenceConfig = <span class="keyword">new</span> ReferenceConfig&lt;&gt;();</span><br><span class="line">        referenceConfig.setApplication(applicationConfig);</span><br><span class="line">        referenceConfig.setRegistry(registryConfig);</span><br><span class="line">        referenceConfig.setInterface(UserService<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        UserService localRef = referenceConfig.get();</span><br><span class="line">        localRef.echo(<span class="string">"idea"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException, IOException </span>&#123;</span><br><span class="line">        DubboSelfDefConfig d = <span class="keyword">new</span> DubboSelfDefConfig();</span><br><span class="line">        d.consumer();</span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">1</span>);</span><br><span class="line">        countDownLatch.await();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这段代码里面，通过案例可以发现有这些信息内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">UserService localRef = referenceConfig.get();</span><br><span class="line">localRef.echo(<span class="string">"idea"</span>);</span><br></pre></td></tr></table></figure><p>这两行语句是获取具体服务的核心之处，由于我在别处定义了一个叫做UserService 的公共服务接口，因此在服务引用的过程中可以进行转换。</p><h2 id="Dubbo2-7的三大新特新"><a href="#Dubbo2-7的三大新特新" class="headerlink" title="Dubbo2.7的三大新特新"></a>Dubbo2.7的三大新特新</h2><p>Dubbo的github官方地址为 <a href="https://github.com/apache/dubbo" target="_blank" rel="noopener">https://github.com/apache/dubbo</a>  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/01/java9-1578536515.png" alt="大白话带你梳理一下Dubbo的那些事儿" title="大白话带你梳理一下Dubbo的那些事儿">在这里插入图片描述</p><p>Dubbo 目前有如图所示的 5 个分支，其中 2.7.1-release 只是一个临时分支，忽略不计，对其他 4 个分支而言，我归纳了一下，分别有如下信息：</p><ul><li><p>2.5.x 近期已经通过投票，Dubbo 社区即将停止对其的维护。</p></li><li><p>2.6.x 为长期支持的版本，也是 Dubbo 贡献给 Apache 之前的版本，其包名前缀为：com.alibaba，JDK 版本对应 1.6。</p></li><li><p>3.x-dev 是前瞻性的版本，对 Dubbo 进行一些高级特性的补充，如支持 rx 特性。</p></li><li><p>master 为长期支持的版本，版本号为 2.7.x，也是 Dubbo 贡献给 Apache 的开发版本，其包名前缀为：org.apache，JDK 版本对应 1.8。</p></li></ul><h2 id="Dubbo-2-7-新特性"><a href="#Dubbo-2-7-新特性" class="headerlink" title="Dubbo 2.7 新特性"></a>Dubbo 2.7 新特性</h2><p>Dubbo 2.7.x 作为 Apache 的孵化版本，除了代码优化之外，还新增了许多重磅的新特性，本文将会介绍其中最典型的2个新特性：</p><ul><li><p><strong>异步化改造</strong></p></li><li><p><strong>三大中心改造</strong></p></li></ul><h3 id="异步化改造"><a href="#异步化改造" class="headerlink" title="异步化改造"></a>异步化改造</h3><p>1.异步化调用的方式，在Dubbo2.7版本里面提供了异步化调用的功能，相关案例代码如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/test"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Reference</span>(async = <span class="keyword">true</span>)</span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/testStr"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testStr</span><span class="params">(String param)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userService.testEcho(param);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是通过这种异步发送的方式我们通常都是获取不到响应值的，所以这里的return为null。</p><p>如果在低于2.7版本的dubbo框架中希望获取到异步返回的响应值还是需要通过RPC上下文来提取信息。</p><p>代码案例如下所示：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"/futureGet"</span>)</span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">futureGet</span><span class="params">(String param)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class="line">       userService.testEcho(param);</span><br><span class="line">       Future&lt;String&gt; future= RpcContext.getContext().getFuture();</span><br><span class="line">       String result = future.get();</span><br><span class="line">       System.out.println(<span class="string">"this is :"</span>+result);</span><br><span class="line">       <span class="keyword">return</span> result;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>通过RPC上下文的方式可以取到对应的响应值,但是这种方式需要有所等待，因此此时的效率会有所降低。假设我们将dubbo的版本提升到了2.7.1之后，通过使用CompletableFuture来进行接口优化的话，这部分的代码实现就会有所变化：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> idea</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">DemoService</span> </span>&#123;</span><br><span class="line">      <span class="function">String <span class="title">sayHello</span><span class="params">(String name)</span> </span>;</span><br><span class="line">      <span class="function"><span class="keyword">default</span> CompletableFuture&lt;String&gt; <span class="title">sayAsyncHello</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> CompletableFuture.completedFuture(sayHello(name));</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用方代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sise.consumer.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sise.dubbo.service.DemoService;</span><br><span class="line"><span class="keyword">import</span> org.apache.dubbo.config.annotation.Reference;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.CompletableFuture;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicReference;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> idea</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2019/12/31</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Version</span> V1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/demo"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Reference</span></span><br><span class="line">    <span class="keyword">private</span> DemoService demoService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/testDemo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testDemo</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"【testDemo】 this is :"</span>+name);</span><br><span class="line">        <span class="keyword">return</span> demoService.sayHello(name);</span><br><span class="line">    &#125;.</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/testAsyncDemo"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testAsyncDemo</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"【testAsyncDemo】 this is :"</span>+name);</span><br><span class="line">        CompletableFuture&lt;String&gt; future = demoService.sayAsyncHello(name);</span><br><span class="line">        AtomicReference&lt;String&gt; result = <span class="keyword">null</span>;</span><br><span class="line">        <span class="comment">//通过一条callback线程来处理响应的数据信息</span></span><br><span class="line">        future.whenComplete((retValue,exception)-&gt;&#123;</span><br><span class="line">           <span class="keyword">if</span>(exception==<span class="keyword">null</span>)&#123;</span><br><span class="line">               System.out.println(retValue);</span><br><span class="line">               result.set(retValue);</span><br><span class="line">           &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">               exception.printStackTrace();</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"通过一条callback线程来处理响应的数据信息,所以这个时候获取不到信息响应"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样的调用是借助了callback线程来帮我们处理原先的数据内容，关于dubbo里面的异步化调用，我借用了官方的一张图来进行展示：  </p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/01/java7-1578536515.png" alt="大白话带你梳理一下Dubbo的那些事儿" title="大白话带你梳理一下Dubbo的那些事儿">  </p><p>我们上边讲解的众多方法都只是针对于dubbo的客户端异步化，并没有讲解关于服务端的异步化处理，这是因为结合dubbo的业务线程池模型来思考，服务端的异步化处理比较鸡肋（因为dubbo内部服务端的线程池本身就是异步化调用的了）。</p><p>当然dubbo 2.6 里面对于接口异步化调用的配置到了2.7版本依旧有效。</p><h3 id="三大中心的改造"><a href="#三大中心的改造" class="headerlink" title="三大中心的改造"></a>三大中心的改造</h3><p><strong>注册中心</strong></p><p>在dubbo2.7之前，dubbo主要还是由consumer，provider ，register组成，然而在2.7版本之后，dubbo的注册中心被拆解为了三个中心，分别是原先的<strong>注册中心</strong>和<strong>元数据中心</strong>以及<strong>配置中心</strong>。</p><p><strong>元数据配置</strong></p><p>在dubbo2.7版本中，将原先注册在zk上边的过多数据进行了注册拆分，这样能够保证减少对于zk端的压力。具体配置如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">“zookeeper://127.0.0.1:2181”</span> <span class="attr">simplified</span>=<span class="string">"true"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>简化了相应配置之后，dubbo也只会上传一些必要的服务治理数据了，简化版本的服务数据只剩下下边这些信息：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">dubbo://30.5.120.185:20880/com.sise.TestService?</span><br><span class="line">application=test-provider&amp;</span><br><span class="line">dubbo=2.0.2&amp;</span><br><span class="line">release=2.7.0&amp;</span><br><span class="line">timestamp=1554982201973</span><br></pre></td></tr></table></figure><p>对于其他的元数据信息将会被存储到一些元数据中心里面，例如说redis，nacos，zk等</p><p>元数据配置改造主要解决的问题是：推送量大 -&gt; 存储数据量大 -&gt; 网络传输量大 -&gt; 延迟严重</p><h2 id="配置中心"><a href="#配置中心" class="headerlink" title="配置中心"></a>配置中心</h2><p>dubbo2.7开始支持多种分布式配置中心的组件。例如说：zk，Spring Cloud Config, Apollo, Nacos，关于这部分的配置网上的资料也比较多，我就不在这里细说了。</p><p><strong>END</strong></p>]]></content>
      
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo 面试18问</title>
      <link href="/2020/04/26/Dubbo_%E9%9D%A2%E8%AF%9518%E9%97%AE/"/>
      <url>/2020/04/26/Dubbo_%E9%9D%A2%E8%AF%9518%E9%97%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="dubbo是什么"><a href="#dubbo是什么" class="headerlink" title="dubbo是什么"></a>dubbo是什么</h2><p>dubbo是一个分布式框架，远程服务调用的分布式框架，其核心部分包含：</p><ul><li><p><strong>集群容错</strong>：提供基于接口方法的透明远程过程调用，包括多协议支持，以及软负载均衡，失败容错，地址路由，动态配置等集群支持。</p></li><li><p><strong>远程通讯</strong>：提供对多种基于长连接的NIO框架抽象封装，包括多种线程模型，序列化，以及“请求-响应”模式的信息交换方式。</p></li><li><p><strong>自动发现</strong>：基于注册中心目录服务，使服务消费方能动态的查找服务提供方，使地址透明，使服务提供方可以平滑增加或减少机器。</p></li></ul><h2 id="dubbo能做什么"><a href="#dubbo能做什么" class="headerlink" title="dubbo能做什么"></a>dubbo能做什么</h2><p>透明化的远程方法调用，就像调用本地方法一样调用远程方法，只需简单配置，没有任何API侵入。软负载均衡及容错机制，可在内网替代F5等硬件负载均衡器，降低成本，减少单点。</p><p>服务自动注册与发现，不再需要写死服务提供方地址，注册中心基于接口名查询服务提供者的IP地址，并且能够平滑添加或删除服务提供者。</p><h3 id="1、默认使用的是什么通信框架，还有别的选择吗"><a href="#1、默认使用的是什么通信框架，还有别的选择吗" class="headerlink" title="1、默认使用的是什么通信框架，还有别的选择吗?"></a>1、默认使用的是什么通信框架，还有别的选择吗?</h3><p>答：默认也推荐使用 netty 框架，还有 mina。</p><h3 id="2、服务调用是阻塞的吗？"><a href="#2、服务调用是阻塞的吗？" class="headerlink" title="2、服务调用是阻塞的吗？"></a>2、服务调用是阻塞的吗？</h3><p>答：默认是阻塞的，可以异步调用，没有返回值的可以这么做。</p><h3 id="3、一般使用什么注册中心？还有别的选择吗？"><a href="#3、一般使用什么注册中心？还有别的选择吗？" class="headerlink" title="3、一般使用什么注册中心？还有别的选择吗？"></a>3、一般使用什么注册中心？还有别的选择吗？</h3><p>答：推荐使用 zookeeper 注册中心，还有 Multicast注册中心, Redis注册中心, Simple注册中心.</p><p>ZooKeeper的节点是通过像树一样的结构来进行维护的，并且每一个节点通过路径来标示以及访问。除此之外，每一个节点还拥有自身的一些信息，包括：数据、数据长度、创建时间、修改时间等等。</p><h3 id="4、默认使用什么序列化框架，你知道的还有哪些？"><a href="#4、默认使用什么序列化框架，你知道的还有哪些？" class="headerlink" title="4、默认使用什么序列化框架，你知道的还有哪些？"></a>4、默认使用什么序列化框架，你知道的还有哪些？</h3><p>答：默认使用 Hessian 序列化，还有 Duddo、FastJson、Java 自带序列化。hessian是一个采用二进制格式传输的服务框架，相对传统soap web service，更轻量，更快速。</p><p><strong>Hessian原理与协议简析：</strong></p><p>http的协议约定了数据传输的方式，hessian也无法改变太多：</p><ul><li><p>hessian中client与server的交互，基于http-post方式。</p></li><li><p>hessian将辅助信息，封装在http header中，比如“授权token”等，我们可以基于http-header来封装关于“安全校验”“meta数据”等。hessian提供了简单的”校验”机制。</p></li><li><p>对于hessian的交互核心数据，比如“调用的方法”和参数列表信息，将通过post请求的body体直接发送，格式为字节流。</p></li><li><p>对于hessian的server端响应数据，将在response中通过字节流的方式直接输出。</p></li></ul><p>hessian的协议本身并不复杂，在此不再赘言；所谓协议(protocol)就是约束数据的格式，client按照协议将请求信息序列化成字节序列发送给server端，server端根据协议，将数据反序列化成“对象”，然后执行指定的方法，并将方法的返回值再次按照协议序列化成字节流，响应给client，client按照协议将字节流反序列化成”对象”。</p><h3 id="5、服务提供者能实现失效踢出是什么原理？"><a href="#5、服务提供者能实现失效踢出是什么原理？" class="headerlink" title="5、服务提供者能实现失效踢出是什么原理？"></a>5、服务提供者能实现失效踢出是什么原理？</h3><p>答：服务失效踢出基于 zookeeper 的临时节点原理。</p><h3 id="6、服务上线怎么不影响旧版本？"><a href="#6、服务上线怎么不影响旧版本？" class="headerlink" title="6、服务上线怎么不影响旧版本？"></a>6、服务上线怎么不影响旧版本？</h3><p>答：采用多版本开发，不影响旧版本。在配置中添加version来作为版本区分</p><h3 id="7、如何解决服务调用链过长的问题？"><a href="#7、如何解决服务调用链过长的问题？" class="headerlink" title="7、如何解决服务调用链过长的问题？"></a>7、如何解决服务调用链过长的问题？</h3><p>答：可以结合 zipkin 实现分布式服务追踪。</p><h3 id="8、说说核心的配置有哪些？"><a href="#8、说说核心的配置有哪些？" class="headerlink" title="8、说说核心的配置有哪些？"></a>8、说说核心的配置有哪些？</h3><p>核心配置有</p><ul><li><p>dubbo:service/</p></li><li><p>dubbo:reference/</p></li><li><p>dubbo:protocol/</p></li><li><p>dubbo:registry/</p></li><li><p>dubbo:application/</p></li><li><p>dubbo:provider/</p></li><li><p>dubbo:consumer/</p></li><li><p>dubbo:method/</p></li></ul><h3 id="9、dubbo-推荐用什么协议？"><a href="#9、dubbo-推荐用什么协议？" class="headerlink" title="9、dubbo 推荐用什么协议？"></a>9、dubbo 推荐用什么协议？</h3><p>答：默认使用 dubbo 协议。</p><h3 id="10、同一个服务多个注册的情况下可以直连某一个服务吗？"><a href="#10、同一个服务多个注册的情况下可以直连某一个服务吗？" class="headerlink" title="10、同一个服务多个注册的情况下可以直连某一个服务吗？"></a>10、同一个服务多个注册的情况下可以直连某一个服务吗？</h3><p>答：可以直连，修改配置即可，也可以通过 telnet 直接某个服务。</p><h3 id="11、dubbo-在安全机制方面如何解决的？"><a href="#11、dubbo-在安全机制方面如何解决的？" class="headerlink" title="11、dubbo 在安全机制方面如何解决的？"></a>11、dubbo 在安全机制方面如何解决的？</h3><p>dubbo 通过 token 令牌防止用户绕过注册中心直连，然后在注册中心管理授权，dubbo 提供了黑白名单，控制服务所允许的调用方。</p><h3 id="12、集群容错怎么做？"><a href="#12、集群容错怎么做？" class="headerlink" title="12、集群容错怎么做？"></a>12、集群容错怎么做？</h3><p>答：读操作建议使用 Failover 失败自动切换，默认重试两次其他服务器。写操作建议使用 Failfast 快速失败，发一次调用失败就立即报错。</p><h3 id="13、在使用过程中都遇到了些什么问题？如何解决的？"><a href="#13、在使用过程中都遇到了些什么问题？如何解决的？" class="headerlink" title="13、在使用过程中都遇到了些什么问题？如何解决的？"></a>13、在使用过程中都遇到了些什么问题？如何解决的？</h3><p><strong>1.同时配置了 XML 和 properties 文件，则 properties 中的配置无效</strong></p><p>只有 XML 没有配置时，properties 才生效。</p><p><strong>2.dubbo 缺省会在启动时检查依赖是否可用，不可用就抛出异常，阻止 spring 初始化完成，check 属性默认为 true。</strong></p><p>测试时有些服务不关心或者出现了循环依赖，将 check 设置为 false</p><p><strong>3.为了方便开发测试，线下有一个所有服务可用的注册中心，这时，如果有一个正在开发中的服务提供者注册，可能会影响消费者不能正常运行。</strong></p><p>解决：让服务提供者开发方，只订阅服务，而不注册正在开发的服务，通过直连测试正在开发的服务。设置 dubbo:registry 标签的 register 属性为 false。</p><p><strong>4.spring 2.x 初始化死锁问题。</strong></p><p>在 spring 解析到 dubbo:service 时，就已经向外暴露了服务，而 spring 还在接着初始化其他 bean，如果这时有请求进来，并且服务的实现类里有调用applicationContext.getBean() 的用法。getBean 线程和 spring 初始化线程的锁的顺序不一样，导致了线程死锁，不能提供服务，启动不了。</p><p>解决：不要在服务的实现类中使用 applicationContext.getBean(); 如果不想依赖配置顺序，可以将 dubbo:provider 的 deplay 属性设置为 - 1，使 dubbo 在容器初始化完成后再暴露服务。</p><p><strong>5.服务注册不上</strong></p><p>检查 dubbo 的 jar 包有没有在 classpath 中，以及有没有重复的 jar 包</p><p>检查暴露服务的 spring 配置有没有加载</p><p>在服务提供者机器上测试与注册中心的网络是否通</p><p><strong>6.出现 RpcException: No provider available for remote service 异常，表示没有可用的服务提供者，</strong></p><ul><li><p>检查连接的注册中心是否正确</p></li><li><p>到注册中心查看相应的服务提供者是否存在</p></li><li><p>检查服务提供者是否正常运行</p></li></ul><p><strong>7.出现” 消息发送失败” 异常</strong></p><p>通常是接口方法的传入传出参数未实现 Serializable 接口。</p><h3 id="14、dubbo-和-dubbox-之间的区别？"><a href="#14、dubbo-和-dubbox-之间的区别？" class="headerlink" title="14、dubbo 和 dubbox 之间的区别？"></a>14、dubbo 和 dubbox 之间的区别？</h3><p>答：dubbox 是当当网基于 dubbo 上做了一些扩展，如加了服务可 restful 调用，更新了开源组件等。</p><h3 id="15、你还了解别的分布式框架吗？"><a href="#15、你还了解别的分布式框架吗？" class="headerlink" title="15、你还了解别的分布式框架吗？"></a>15、你还了解别的分布式框架吗？</h3><p>答：别的还有 spring 的 spring cloud，facebook 的 thrift，twitter 的 finagle 等。</p><h3 id="16、Dubbo-支持哪些协议，每种协议的应用场景，优缺点？"><a href="#16、Dubbo-支持哪些协议，每种协议的应用场景，优缺点？" class="headerlink" title="16、Dubbo 支持哪些协议，每种协议的应用场景，优缺点？"></a>16、Dubbo 支持哪些协议，每种协议的应用场景，优缺点？</h3><p><strong>dubbo</strong>：单一长连接和 NIO 异步通讯，适合大并发小数据量的服务调用，以及消费者远大于提供者。传输协议 TCP，异步，Hessian 序列化；</p><p><strong>rmi</strong>：采用 JDK 标准的 rmi 协议实现，传输参数和返回参数对象需要实现 Serializable 接口，使用 java 标准序列化机制，使用阻塞式短连接，传输数据包大小混合，消费者和提供者个数差不多，可传文件，传输协议 TCP。多个短连接，TCP 协议传输，同步传输，适用常规的远程服务调用和 rmi 互操作。在依赖低版本的 Common-Collections 包，java 序列化存在安全漏洞；</p><p><strong>webservice</strong>：基于 WebService 的远程调用协议，集成 CXF 实现，提供和原生 WebService 的互操作。多个短连接，基于 HTTP 传输，同步传输，适用系统集成和跨语言调用；</p><p><strong>http</strong>：基于 Http 表单提交的远程调用协议，使用 Spring 的 HttpInvoke 实现。多个短连接，传输协议 HTTP，传入参数大小混合，提供者个数多于消费者，需要给应用程序和浏览器 JS 调用；</p><p><strong>hessian</strong>：集成 Hessian 服务，基于 HTTP 通讯，采用 Servlet 暴露服务，Dubbo 内嵌 Jetty 作为服务器时默认实现，提供与 Hession 服务互操作。多个短连接，同步 HTTP 传输，Hessian 序列化，传入参数较大，提供者大于消费者，提供者压力较大，可传文件；</p><p><strong>memcache</strong>：基于 memcached 实现的 RPC 协议 redis：基于 redis 实现的 RPC 协议</p><h3 id="17、Dubbo-集群的负载均衡有哪些策略"><a href="#17、Dubbo-集群的负载均衡有哪些策略" class="headerlink" title="17、Dubbo 集群的负载均衡有哪些策略　　"></a>17、Dubbo 集群的负载均衡有哪些策略　　</h3><p>Dubbo 提供了常见的集群策略实现，并预扩展点予以自行实现。</p><p><strong>Random LoadBalance</strong>：随机选取提供者策略，有利于动态调整提供者权重。截面碰撞率高，调用次数越多，分布越均匀；</p><p><strong>RoundRobin LoadBalance</strong>：轮循选取提供者策略，平均分布，但是存在请求累积的问题；</p><p><strong>LeastActive LoadBalance:</strong>：最少活跃调用策略，解决慢提供者接收更少的请求；</p><p><strong>ConstantHash LoadBalance:</strong>：一致性 Hash 策略，使相同参数请求总是发到同一提供者，一台机器宕机，可以基于虚拟节点，分摊至其他提供者，避免引起提供者的剧烈变动；</p><h3 id="18-服务调用超时问题怎么解决"><a href="#18-服务调用超时问题怎么解决" class="headerlink" title="18. 服务调用超时问题怎么解决"></a>18. 服务调用超时问题怎么解决</h3><p>dubbo在调用服务不成功时，默认是会重试两次的。这样在服务端的处理时间超过了设定的超时时间时，就会有重复请求，比如在发邮件时，可能就会发出多份重复邮件，执行注册请求时，就会插入多条重复的注册数据，那么怎么解决超时问题呢？如下</p><p>对于核心的服务中心，去除dubbo超时重试机制，并重新评估设置超时时间。业务处理代码必须放在服务端，客户端只做参数验证和服务调用，不涉及业务流程处理 全局配置实例</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dubbo:provider</span> <span class="attr">delay</span>=<span class="string">"-1"</span> <span class="attr">timeout</span>=<span class="string">"6000"</span> <span class="attr">retries</span>=<span class="string">"0"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>当然Dubbo的重试机制其实是非常好的QOS保证，它的路由机制，是会帮你把超时的请求路由到其他机器上，而不是本机尝试，所以 dubbo的重试机器也能一定程度的保证服务的质量。但是请一定要综合线上的访问情况，给出综合的评估。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mysql去重sql</title>
      <link href="/2020/04/21/Mysql%E5%8E%BB%E9%87%8Dsql/"/>
      <url>/2020/04/21/Mysql%E5%8E%BB%E9%87%8Dsql/</url>
      
        <content type="html"><![CDATA[<p>替换变量table_name 和 group_by</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DELETE</span><br><span class="line">FROM</span><br><span class="line">$&#123;table_name&#125;</span><br><span class="line">WHERE ID NOT IN (</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">(</span><br><span class="line">SELECT</span><br><span class="line">Max(ID)</span><br><span class="line">FROM</span><br><span class="line">    $&#123;table_name&#125;</span><br><span class="line">GROUP BY</span><br><span class="line">$&#123;group_by&#125;</span><br><span class="line">bb</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenResty下载与安装(Linux&amp;Windos)</title>
      <link href="/2020/04/21/OpenResty%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85(Linux&amp;Windos)/"/>
      <url>/2020/04/21/OpenResty%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85(Linux&amp;Windos)/</url>
      
        <content type="html"><![CDATA[<h1 id="OpenResty下载与安装"><a href="#OpenResty下载与安装" class="headerlink" title="OpenResty下载与安装"></a>OpenResty下载与安装</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h5 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OpenResty&#x3D;1.15.8.2 </span><br><span class="line">linux.centos&#x3D;7</span><br><span class="line">windows&#x3D;10</span><br></pre></td></tr></table></figure><h5 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h5><ul><li>OpenResty 官网:<a href="http://openresty.org/cn/" target="_blank" rel="noopener">http://openresty.org/cn/</a></li><li>OpenResty 下载及安装说明地址：<a href="http://openresty.org/cn/download.html" target="_blank" rel="noopener">http://openresty.org/cn/download.html</a></li></ul><h2 id="Win-10-安装"><a href="#Win-10-安装" class="headerlink" title="Win 10 安装"></a>Win 10 安装</h2><p>解压即安装，双击 nginx.exe 即运行；</p><p>或者进入安装目录，执行 start nginx.exe 即运行；</p><h2 id="Linux-Tar-安装"><a href="#Linux-Tar-安装" class="headerlink" title="Linux Tar 安装"></a>Linux Tar 安装</h2><p>官方源码安装指南：<a href="http://openresty.org/cn/installation.html" target="_blank" rel="noopener">http://openresty.org/cn/installation.html</a></p><h5 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install pcre-devel openssl-devel gcc curl</span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># .&#x2F;configure 默认 --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;openresty</span><br><span class="line"># .&#x2F;configure --help 查看更多的选项。</span><br><span class="line">.&#x2F;configure</span><br></pre></td></tr></table></figure><h5 id="编译与安装"><a href="#编译与安装" class="headerlink" title="编译与安装"></a>编译与安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 编译</span><br><span class="line">make </span><br><span class="line"># 安装</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 方式一：进入 openresty安装目录&#x2F;bin 目录，执行</span><br><span class="line">.&#x2F;openresty</span><br><span class="line"># 方式二：进入 openresty安装目录&#x2F;nginx&#x2F;sbin 目录，执行</span><br><span class="line">.&#x2F;nginx</span><br></pre></td></tr></table></figure><h2 id="Linux-Yum-安装"><a href="#Linux-Yum-安装" class="headerlink" title="Linux Yum 安装"></a>Linux Yum 安装</h2><h5 id="添加-OpenResty-仓库"><a href="#添加-OpenResty-仓库" class="headerlink" title="添加 OpenResty 仓库"></a>添加 OpenResty 仓库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager --add-repo https:&#x2F;&#x2F;openresty.org&#x2F;package&#x2F;centos&#x2F;openresty.repo</span><br></pre></td></tr></table></figure><h5 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 下载与安装</span><br><span class="line">sudo yum install -y openresty</span><br><span class="line"># 更新</span><br><span class="line">sudo yum check-update</span><br></pre></td></tr></table></figure><p>注：默认安装目录：/usr/local/openresty</p><h5 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 方式一：进入 openresty安装目录&#x2F;bin 目录，执行</span><br><span class="line">.&#x2F;openresty</span><br><span class="line"># 方式二：进入 openresty安装目录&#x2F;&#x2F;nginx&#x2F;sbin 目录，执行</span><br><span class="line">.&#x2F;nginx</span><br></pre></td></tr></table></figure><h5 id="安装-OpenResty-命令工具"><a href="#安装-OpenResty-命令工具" class="headerlink" title="安装 OpenResty 命令工具"></a>安装 OpenResty 命令工具</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y openresty-resty</span><br></pre></td></tr></table></figure><p>命令行工具 opm 在 openresty-opm 包里，而 restydoc 工具在 openresty-doc 包里头</p><h5 id="附录-configure-选项"><a href="#附录-configure-选项" class="headerlink" title="附录-configure 选项"></a>附录-configure 选项</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><span class="line">root@localhost openresty-1.15.8.2]# .&#x2F;configure --help</span><br><span class="line">  --help                             this message</span><br><span class="line"></span><br><span class="line">  --prefix&#x3D;PATH                      set the installation prefix (default to &#x2F;usr&#x2F;local&#x2F;openresty)</span><br><span class="line"></span><br><span class="line">  --with-debug                       enable debug logging</span><br><span class="line">  --with-dtrace-probes               enable dtrace USDT probes</span><br><span class="line">  --with-dtrace&#x3D;PATH                 set dtrace utility pathname</span><br><span class="line"></span><br><span class="line">  --with-no-pool-patch               enable the no-pool patch for debugging memory issues</span><br><span class="line"></span><br><span class="line">  -jN                                pass -jN option to make while building the bundled</span><br><span class="line">                                     Lua 5.1 interpreter or LuaJIT 2.1</span><br><span class="line"></span><br><span class="line">  --without-http_echo_module         disable ngx_http_echo_module</span><br><span class="line">  --without-http_xss_module          disable ngx_http_xss_module</span><br><span class="line">  --without-http_coolkit_module      disable ngx_http_coolkit_module</span><br><span class="line">  --without-http_set_misc_module     disable ngx_http_set_misc_module</span><br><span class="line">  --without-http_form_input_module   disable ngx_http_form_input_module</span><br><span class="line">  --without-http_encrypted_session_module</span><br><span class="line">                                     disable ngx_http_encrypted_session_module</span><br><span class="line">  --without-http_srcache_module      disable ngx_http_srcache_module</span><br><span class="line">  --without-http_lua_module          disable ngx_http_lua_module</span><br><span class="line">  --without-http_lua_upstream_module disable ngx_http_lua_upstream_module</span><br><span class="line">  --without-http_headers_more_module disable ngx_http_headers_more_module</span><br><span class="line">  --without-http_array_var_module    disable ngx_http_array_var_module</span><br><span class="line">  --without-http_memc_module         disable ngx_http_memc_module</span><br><span class="line">  --without-http_redis2_module       disable ngx_http_redis2_module</span><br><span class="line">  --without-http_redis_module        disable ngx_http_redis_module</span><br><span class="line">  --without-http_rds_json_module     disable ngx_http_rds_json_module</span><br><span class="line">  --without-http_rds_csv_module      disable ngx_http_rds_csv_module</span><br><span class="line">  --without-stream_lua_module        disable ngx_stream_lua_module</span><br><span class="line">  --without-ngx_devel_kit_module     disable ngx_devel_kit_module</span><br><span class="line">  --without-http_ssl_module          disable ngx_http_ssl_module</span><br><span class="line">  --without-stream_ssl_module        disable ngx_stream_ssl_module</span><br><span class="line"></span><br><span class="line">  --with-http_iconv_module           enable ngx_http_iconv_module</span><br><span class="line">  --with-http_drizzle_module         enable ngx_http_drizzle_module</span><br><span class="line">  --with-http_postgres_module        enable ngx_http_postgres_module</span><br><span class="line"></span><br><span class="line">  --without-lua_cjson                disable the lua-cjson library</span><br><span class="line">  --without-lua_tablepool            disable the lua-tablepool library (and by consequence, the</span><br><span class="line">                                     lua-resty-shell library)</span><br><span class="line">  --without-lua_redis_parser         disable the lua-redis-parser library</span><br><span class="line">  --without-lua_rds_parser           disable the lua-rds-parser library</span><br><span class="line">  --without-lua_resty_dns            disable the lua-resty-dns library</span><br><span class="line">  --without-lua_resty_memcached      disable the lua-resty-memcached library</span><br><span class="line">  --without-lua_resty_redis          disable the lua-resty-redis library</span><br><span class="line">  --without-lua_resty_mysql          disable the lua-resty-mysql library</span><br><span class="line">  --without-lua_resty_upload         disable the lua-resty-upload library</span><br><span class="line">  --without-lua_resty_upstream_healthcheck</span><br><span class="line">                                     disable the lua-resty-upstream-healthcheck library</span><br><span class="line">  --without-lua_resty_string         disable the lua-resty-string library</span><br><span class="line">  --without-lua_resty_websocket      disable the lua-resty-websocket library</span><br><span class="line">  --without-lua_resty_limit_traffic  disable the lua-resty-limit-traffic library</span><br><span class="line">  --without-lua_resty_lock           disable the lua-resty-lock library</span><br><span class="line">  --without-lua_resty_lrucache       disable the lua-resty-lrucache library</span><br><span class="line">  --without-lua_resty_signal         disable the lua-resty-signal library (and by consequence,</span><br><span class="line">                                     the lua-resty-shell library)</span><br><span class="line">  --without-lua_resty_shell          disable the lua-resty-shell library</span><br><span class="line">  --without-lua_resty_core           disable the lua-resty-core library</span><br><span class="line"></span><br><span class="line">  --with-luajit                      enable and build the bundled LuaJIT 2.1 (the default)</span><br><span class="line">  --with-luajit&#x3D;DIR                  use the external LuaJIT 2.1 installation specified by DIR</span><br><span class="line">  --with-luajit-xcflags&#x3D;FLAGS        Specify extra C compiler flags for LuaJIT 2.1</span><br><span class="line">  --without-luajit-lua52             Turns off the LuaJIT extensions from Lua 5.2 that may break</span><br><span class="line">                                     backward compatibility.</span><br><span class="line">  --without-luajit-gc64              Turns off the LuaJIT GC64 mode (which is enabled by default</span><br><span class="line">                                     on x86_64)</span><br><span class="line"></span><br><span class="line">  --with-libdrizzle&#x3D;DIR              specify the libdrizzle 1.0 (or drizzle) installation prefix</span><br><span class="line">  --with-libpq&#x3D;DIR                   specify the libpq (or postgresql) installation prefix</span><br><span class="line">  --with-pg_config&#x3D;PATH              specify the path of the pg_config utility</span><br><span class="line"></span><br><span class="line">Options directly inherited from nginx</span><br><span class="line"></span><br><span class="line">  --sbin-path&#x3D;PATH                   set nginx binary pathname</span><br><span class="line">  --modules-path&#x3D;PATH                set modules path</span><br><span class="line">  --conf-path&#x3D;PATH                   set nginx.conf pathname</span><br><span class="line">  --error-log-path&#x3D;PATH              set error log pathname</span><br><span class="line">  --pid-path&#x3D;PATH                    set nginx.pid pathname</span><br><span class="line">  --lock-path&#x3D;PATH                   set nginx.lock pathname</span><br><span class="line">  --tapset-prefix&#x3D;PATH               set systemtap tapset directory prefix</span><br><span class="line">  --stap-nginx-path&#x3D;PATH             set stap-nginx pathname</span><br><span class="line"></span><br><span class="line">  --user&#x3D;USER                        set non-privileged user for</span><br><span class="line">                                     worker processes</span><br><span class="line">  --group&#x3D;GROUP                      set non-privileged group for</span><br><span class="line">                                     worker processes</span><br><span class="line"></span><br><span class="line">  --build&#x3D;NAME                       set build name</span><br><span class="line">  --builddir&#x3D;DIR                     set the build directory</span><br><span class="line"></span><br><span class="line">  --with-select_module               enable select module</span><br><span class="line">  --without-select_module            disable select module</span><br><span class="line">  --with-poll_module                 enable poll module</span><br><span class="line">  --without-poll_module              disable poll module</span><br><span class="line"></span><br><span class="line">  --with-threads                     enable thread pool support</span><br><span class="line"></span><br><span class="line">  --with-file-aio                    enable file AIO support</span><br><span class="line">  --with-ipv6                        enable IPv6 support</span><br><span class="line"></span><br><span class="line">  --with-http_v2_module              enable ngx_http_v2_module</span><br><span class="line">  --with-http_realip_module          enable ngx_http_realip_module</span><br><span class="line">  --with-http_addition_module        enable ngx_http_addition_module</span><br><span class="line">  --with-http_xslt_module            enable ngx_http_xslt_module</span><br><span class="line">  --with-http_xslt_module&#x3D;dynamic    enable dynamic ngx_http_xslt_module</span><br><span class="line">  --with-http_image_filter_module    enable ngx_http_image_filter_module</span><br><span class="line">  --with-http_image_filter_module&#x3D;dynamic</span><br><span class="line">                                     enable dynamic ngx_http_image_filter_module</span><br><span class="line">  --with-http_geoip_module           enable ngx_http_geoip_module</span><br><span class="line">  --with-http_geoip_module&#x3D;dynamic   enable dynamic ngx_http_geoip_module</span><br><span class="line">  --with-http_sub_module             enable ngx_http_sub_module</span><br><span class="line">  --with-http_dav_module             enable ngx_http_dav_module</span><br><span class="line">  --with-http_flv_module             enable ngx_http_flv_module</span><br><span class="line">  --with-http_mp4_module             enable ngx_http_mp4_module</span><br><span class="line">  --with-http_gunzip_module          enable ngx_http_gunzip_module</span><br><span class="line">  --with-http_gzip_static_module     enable ngx_http_gzip_static_module</span><br><span class="line">  --with-http_auth_request_module    enable ngx_http_auth_request_module</span><br><span class="line">  --with-http_random_index_module    enable ngx_http_random_index_module</span><br><span class="line">  --with-http_secure_link_module     enable ngx_http_secure_link_module</span><br><span class="line">  --with-http_degradation_module     enable ngx_http_degradation_module</span><br><span class="line">  --with-http_slice_module           enable ngx_http_slice_module</span><br><span class="line">  --with-http_stub_status_module     enable ngx_http_stub_status_module</span><br><span class="line"></span><br><span class="line">  --without-http_charset_module      disable ngx_http_charset_module</span><br><span class="line">  --without-http_gzip_module         disable ngx_http_gzip_module</span><br><span class="line">  --without-http_ssi_module          disable ngx_http_ssi_module</span><br><span class="line">  --without-http_userid_module       disable ngx_http_userid_module</span><br><span class="line">  --without-http_access_module       disable ngx_http_access_module</span><br><span class="line">  --without-http_auth_basic_module   disable ngx_http_auth_basic_module</span><br><span class="line">  --without-http_autoindex_module    disable ngx_http_autoindex_module</span><br><span class="line">  --without-http_geo_module          disable ngx_http_geo_module</span><br><span class="line">  --without-http_map_module          disable ngx_http_map_module</span><br><span class="line">  --without-http_split_clients_module disable ngx_http_split_clients_module</span><br><span class="line">  --without-http_referer_module      disable ngx_http_referer_module</span><br><span class="line">  --without-http_rewrite_module      disable ngx_http_rewrite_module</span><br><span class="line">  --without-http_proxy_module        disable ngx_http_proxy_module</span><br><span class="line">  --without-http_fastcgi_module      disable ngx_http_fastcgi_module</span><br><span class="line">  --without-http_uwsgi_module        disable ngx_http_uwsgi_module</span><br><span class="line">  --without-http_scgi_module         disable ngx_http_scgi_module</span><br><span class="line">  --without-http_memcached_module    disable ngx_http_memcached_module</span><br><span class="line">  --without-http_limit_conn_module   disable ngx_http_limit_conn_module</span><br><span class="line">  --without-http_limit_req_module    disable ngx_http_limit_req_module</span><br><span class="line">  --without-http_empty_gif_module    disable ngx_http_empty_gif_module</span><br><span class="line">  --without-http_browser_module      disable ngx_http_browser_module</span><br><span class="line">  --without-http_upstream_hash_module</span><br><span class="line">                                     disable ngx_http_upstream_hash_module</span><br><span class="line">  --without-http_upstream_ip_hash_module</span><br><span class="line">                                     disable ngx_http_upstream_ip_hash_module</span><br><span class="line">  --without-http_upstream_least_conn_module</span><br><span class="line">                                     disable ngx_http_upstream_least_conn_module</span><br><span class="line">  --without-http_upstream_keepalive_module</span><br><span class="line">                                     disable ngx_http_upstream_keepalive_module</span><br><span class="line"></span><br><span class="line">  --without-http_upstream_zone_module</span><br><span class="line">                                     disable ngx_http_upstream_zone_module</span><br><span class="line">  --with-http_perl_module            enable ngx_http_perl_module</span><br><span class="line">  --with-http_perl_module&#x3D;dynamic    enable dynamic ngx_http_perl_module</span><br><span class="line">  --with-perl_modules_path&#x3D;PATH      set Perl modules path</span><br><span class="line">  --with-perl&#x3D;PATH                   set perl binary pathname</span><br><span class="line"></span><br><span class="line">  --http-log-path&#x3D;PATH               set http access log pathname</span><br><span class="line">  --http-client-body-temp-path&#x3D;PATH  set path to store</span><br><span class="line">                                     http client request body temporary files</span><br><span class="line">  --http-proxy-temp-path&#x3D;PATH        set path to store</span><br><span class="line">                                     http proxy temporary files</span><br><span class="line">  --http-fastcgi-temp-path&#x3D;PATH      set path to store</span><br><span class="line">                                     http fastcgi temporary files</span><br><span class="line">  --http-uwsgi-temp-path&#x3D;PATH        set path to store</span><br><span class="line">                                     http uwsgi temporary files</span><br><span class="line">  --http-scgi-temp-path&#x3D;PATH         set path to store</span><br><span class="line">                                     http scgi temporary files</span><br><span class="line"></span><br><span class="line">  --without-http                     disable HTTP server</span><br><span class="line">  --without-http-cache               disable HTTP cache</span><br><span class="line"></span><br><span class="line">  --with-mail                        enable POP3&#x2F;IMAP4&#x2F;SMTP proxy module</span><br><span class="line">  --with-mail&#x3D;dynamic                enable dynamic POP3&#x2F;IMAP4&#x2F;SMTP proxy module</span><br><span class="line">  --with-mail_ssl_module             enable ngx_mail_ssl_module</span><br><span class="line">  --without-mail_pop3_module         disable ngx_mail_pop3_module</span><br><span class="line">  --without-mail_imap_module         disable ngx_mail_imap_module</span><br><span class="line">  --without-mail_smtp_module         disable ngx_mail_smtp_module</span><br><span class="line"></span><br><span class="line">  --without-stream                   disable TCP&#x2F;UDP proxy module</span><br><span class="line">  --without-stream_ssl_module        disable ngx_stream_ssl_module</span><br><span class="line"></span><br><span class="line">  --with-stream                      enable TCP&#x2F;UDP proxy module (default on)</span><br><span class="line">  --with-stream&#x3D;dynamic              enable dynamic TCP&#x2F;UDP proxy module</span><br><span class="line">  --with-stream_ssl_module           enable ngx_stream_ssl_module (default on)</span><br><span class="line">  --with-stream_realip_module        enable ngx_stream_realip_module</span><br><span class="line">  --with-stream_geoip_module         enable ngx_stream_geoip_module</span><br><span class="line">  --with-stream_geoip_module&#x3D;dynamic enable dynamic ngx_stream_geoip_module</span><br><span class="line">  --with-stream_ssl_preread_module   enable ngx_stream_ssl_preread_module</span><br><span class="line">  --without-stream_limit_conn_module disable ngx_stream_limit_conn_module</span><br><span class="line">  --without-stream_access_module     disable ngx_stream_access_module</span><br><span class="line">  --without-stream_geo_module        disable ngx_stream_geo_module</span><br><span class="line">  --without-stream_map_module        disable ngx_stream_map_module</span><br><span class="line">  --without-stream_split_clients_module</span><br><span class="line">                                     disable ngx_stream_split_clients_module</span><br><span class="line">  --without-stream_return_module     disable ngx_stream_return_module</span><br><span class="line">  --without-stream_upstream_hash_module</span><br><span class="line">                                     disable ngx_stream_upstream_hash_module</span><br><span class="line">  --without-stream_upstream_least_conn_module</span><br><span class="line">                                     disable ngx_stream_upstream_least_conn_module</span><br><span class="line">  --without-stream_upstream_zone_module</span><br><span class="line">                                     disable ngx_stream_upstream_zone_module</span><br><span class="line"></span><br><span class="line">  --with-google_perftools_module     enable ngx_google_perftools_module</span><br><span class="line">  --with-cpp_test_module             enable ngx_cpp_test_module</span><br><span class="line"></span><br><span class="line">  --add-module&#x3D;PATH                  enable external module</span><br><span class="line">  --add-dynamic-module&#x3D;PATH          enable dynamic external module</span><br><span class="line"></span><br><span class="line">  --with-cc&#x3D;PATH                     set C compiler pathname</span><br><span class="line">  --with-cpp&#x3D;PATH                    set C preprocessor pathname</span><br><span class="line">  --with-cc-opt&#x3D;OPTIONS              set additional C compiler options</span><br><span class="line">  --with-ld-opt&#x3D;OPTIONS              set additional linker options</span><br><span class="line">  --with-cpu-opt&#x3D;CPU                 build for the specified CPU, valid values:</span><br><span class="line">                                     pentium, pentiumpro, pentium3, pentium4,</span><br><span class="line">                                     athlon, opteron, sparc32, sparc64, ppc64</span><br><span class="line"></span><br><span class="line">  --without-pcre                     disable PCRE library usage</span><br><span class="line">  --with-pcre                        force PCRE library usage</span><br><span class="line">  --with-pcre&#x3D;DIR                    set path to PCRE library sources</span><br><span class="line">  --with-pcre-opt&#x3D;OPTIONS            set additional make options for PCRE</span><br><span class="line">  --with-pcre-conf-opt&#x3D;OPTIONS       set additional configure options for PCRE</span><br><span class="line">  --with-pcre-jit                    build PCRE with JIT compilation support</span><br><span class="line"></span><br><span class="line">  --with-zlib&#x3D;DIR                    set path to zlib library sources</span><br><span class="line">  --with-zlib-opt&#x3D;OPTIONS            set additional build options for zlib</span><br><span class="line">  --with-zlib-asm&#x3D;CPU                use zlib assembler sources optimized</span><br><span class="line">                                     for the specified CPU, valid values:</span><br><span class="line">                                     pentium, pentiumpro</span><br><span class="line"></span><br><span class="line">  --with-libatomic                   force libatomic_ops library usage</span><br><span class="line">  --with-libatomic&#x3D;DIR               set path to libatomic_ops library sources</span><br><span class="line"></span><br><span class="line">  --with-openssl&#x3D;DIR                 set path to OpenSSL library sources</span><br><span class="line">  --with-openssl-opt&#x3D;OPTIONS         set additional build options for OpenSSL</span><br><span class="line"></span><br><span class="line">  --dry-run                          dry running the configure, for testing only</span><br><span class="line">  --platform&#x3D;PLATFORM                forcibly specify a platform name, for testing only</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「SIMBA1949」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;simba1949&#x2F;java&#x2F;article&#x2F;details&#x2F;103333599</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> devops </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>synchronized与Lock的区别与使用？</title>
      <link href="/2020/04/21/synchronized%E4%B8%8ELock%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2020/04/21/synchronized%E4%B8%8ELock%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><p>昨天在学习别人分享的面试经验时，看到Lock的使用。想起自己在上次面试也遇到了synchronized与Lock的区别与使用。</p><p>于是，我整理了两者的区别和使用情况，同时，对synchronized的使用过程一些常见问题的总结，最后是参照源码和说明文档，对Lock的使用写了几个简单的Demo。请大家批评指正。</p><h2 id="技术点："><a href="#技术点：" class="headerlink" title="技术点："></a>技术点：</h2><h3 id="1、线程与进程："><a href="#1、线程与进程：" class="headerlink" title="1、线程与进程："></a>1、线程与进程：</h3><p>在开始之前先把进程与线程进行区分一下，一个程序最少需要一个进程，而一个进程最少需要一个线程。关系是线程–&gt;进程–&gt;程序的大致组成结构。所以线程是程序执行流的最小单位，而进程是系统进行资源分配和调度的一个独立单位。以下我们所有讨论的都是建立在线程基础之上。</p><h3 id="2、Thread的几个重要方法："><a href="#2、Thread的几个重要方法：" class="headerlink" title="2、Thread的几个重要方法："></a>2、Thread的几个重要方法：</h3><p>我们先了解一下Thread的几个重要方法。</p><ul><li><p>start()方法，调用该方法开始执行该线程；</p></li><li><p>stop()方法，调用该方法强制结束该线程执行；</p></li><li><p>join方法，调用该方法等待该线程结束。</p></li><li><p>sleep()方法，调用该方法该线程进入等待。</p></li><li><p>run()方法，调用该方法直接执行线程的run()方法，但是线程调用start()方法时也会运行run()方法，区别就是一个是由线程调度运行run()方法，一个是直接调用了线程中的run()方法！！</p></li></ul><p>看到这里，可能有些人就会问啦，那wait()和notify()呢？要注意，其实wait()与notify()方法是Object的方法，不是Thread的方法！！同时，wait()与notify()会配合使用，分别表示线程挂起和线程恢复。</p><p>这里还有一个很常见的问题，顺带提一下：wait()与sleep()的区别，简单来说wait()会释放对象锁而sleep()不会释放对象锁。这些问题有很多的资料，不再赘述。</p><h3 id="3、线程状态："><a href="#3、线程状态：" class="headerlink" title="3、线程状态："></a>3、线程状态：</h3><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java8-1586835150.png" alt="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用" title="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用"></p><p>线程总共有5大状态，通过上面第二个知识点的介绍，理解起来就简单了。  </p><ul><li><p>新建状态：新建线程对象，并没有调用start()方法之前</p></li><li><p>就绪状态：调用start()方法之后线程就进入就绪状态，但是并不是说只要调用start()方法线程就马上变为当前线程，在变为当前线程之前都是为就绪状态。值得一提的是，线程在睡眠和挂起中恢复的时候也会进入就绪状态哦。</p></li><li><p>运行状态：线程被设置为当前线程，开始执行run()方法。就是线程进入运行状态</p></li><li><p>阻塞状态：线程被暂停，比如说调用sleep()方法后线程就进入阻塞状态</p></li><li><p>死亡状态：线程执行结束</p></li></ul><h3 id="4、锁类型"><a href="#4、锁类型" class="headerlink" title="4、锁类型"></a>4、锁类型</h3><ul><li><p>可重入锁：在执行对象中所有同步方法不用再次获得锁</p></li><li><p>可中断锁：在等待获取锁过程中可中断</p></li><li><p>公平锁：按等待获取锁的线程的等待时间进行获取，等待时间长的具有优先获取锁权利</p></li><li><p>读写锁：对资源读取和写入的时候拆分为2部分处理，读的时候可以多线程一起读，写的时候必须同步地写</p></li></ul><h2 id="synchronized与Lock的区别"><a href="#synchronized与Lock的区别" class="headerlink" title="synchronized与Lock的区别"></a>synchronized与Lock的区别</h2><p>1、我把两者的区别分类到了一个表中，方便大家对比：</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java3-1586835150.png" alt="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用" title="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用"></p><p>或许，看到这里还对LOCK所知甚少，那么接下来，我们进入LOCK的深入学习。</p><h2 id="Lock详细介绍与Demo"><a href="#Lock详细介绍与Demo" class="headerlink" title="Lock详细介绍与Demo"></a>Lock详细介绍与Demo</h2><p>以下是Lock接口的源码，笔者修剪之后的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Acquires the lock.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Acquires the lock unless the current thread is</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@linkplain</span> Thread#interrupt interrupted&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Acquires the lock only if it is free at the time of invocation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Acquires the lock if it is free within the given waiting time and the</span></span><br><span class="line"><span class="comment">     * current thread has not been &#123;<span class="doctag">@linkplain</span> Thread#interrupt interrupted&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Releases the lock.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从Lock接口中我们可以看到主要有个方法，这些方法的功能从注释中可以看出：</p><ul><li><p>lock()：获取锁，如果锁被暂用则一直等待</p></li><li><p>unlock()：释放锁</p></li><li><p>tryLock(): 注意返回类型是boolean，如果获取锁的时候锁被占用就返回false，否则返回true</p></li><li><p>tryLock(long time, TimeUnit unit)：比起tryLock()就是给了一个时间期限，保证等待参数时间</p></li><li><p>lockInterruptibly()：用该锁的获得方式，如果线程在获取锁的阶段进入了等待，那么可以中断此线程，先去做别的事</p></li></ul><p>通过 以上的解释，大致可以解释在上个部分中“锁类型(lockInterruptibly())”，“锁状态(tryLock())”等问题，还有就是前面子所获取的过程我所写的“大致就是可以尝试获得锁，线程可以不会一直等待”用了“可以”的原因。</p><p>下面是Lock一般使用的例子，注意ReentrantLock是Lock接口的实现。</p><h4 id="lock-："><a href="#lock-：" class="headerlink" title="lock()："></a>lock()：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.brickworkers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要参与同步的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Thread thread)</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"线程名"</span>+thread.getName() + <span class="string">"获得了锁"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"线程名"</span>+thread.getName() + <span class="string">"释放了锁"</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LockTest lockTest = <span class="keyword">new</span> LockTest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程1</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                lockTest.method(Thread.currentThread());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                lockTest.method(Thread.currentThread());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行情况：线程名t1获得了锁</span></span><br><span class="line"><span class="comment">//         线程名t1释放了锁</span></span><br><span class="line"><span class="comment">//         线程名t2获得了锁</span></span><br><span class="line"><span class="comment">//         线程名t2释放了锁</span></span><br></pre></td></tr></table></figure><h4 id="tryLock"><a href="#tryLock" class="headerlink" title="tryLock():"></a>tryLock():</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.brickworkers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要参与同步的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Thread thread)</span></span>&#123;</span><br><span class="line"><span class="comment">/*        lock.lock();</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            System.out.println("线程名"+thread.getName() + "获得了锁");</span></span><br><span class="line"><span class="comment">        &#125;catch(Exception e)&#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125; finally &#123;</span></span><br><span class="line"><span class="comment">            System.out.println("线程名"+thread.getName() + "释放了锁");</span></span><br><span class="line"><span class="comment">            lock.unlock();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(lock.tryLock())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"线程名"</span>+thread.getName() + <span class="string">"获得了锁"</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"线程名"</span>+thread.getName() + <span class="string">"释放了锁"</span>);</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"我是"</span>+Thread.currentThread().getName()+<span class="string">"有人占着锁，我就不要啦"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LockTest lockTest = <span class="keyword">new</span> LockTest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程1</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                lockTest.method(Thread.currentThread());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                lockTest.method(Thread.currentThread());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果： 线程名t2获得了锁</span></span><br><span class="line"><span class="comment">//         我是t1有人占着锁，我就不要啦</span></span><br><span class="line"><span class="comment">//         线程名t2释放了锁</span></span><br></pre></td></tr></table></figure><p>看到这里相信大家也都会使用如何使用Lock了吧，关于tryLock(long time, TimeUnit unit)和lockInterruptibly()不再赘述。前者主要存在一个等待时间，在测试代码中写入一个等待时间，后者主要是等待中断，会抛出一个中断异常，常用度不高，喜欢探究可以自己深入研究。</p><p>前面比较重提到“公平锁”，在这里可以提一下ReentrantLock对于平衡锁的定义，在源码中有这么两段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Sync object for non-fair locks</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7316153563782823691L</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Performs lock.  Try immediate barge, backing up to normal</span></span><br><span class="line"><span class="comment">        * acquire on failure.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">               setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               acquire(<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Sync object for fair locks</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3000897897090466540L</span>;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           acquire(<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Fair version of tryAcquire.  Don't grant access unless</span></span><br><span class="line"><span class="comment">        * recursive call or no waiters or is first.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">           <span class="keyword">int</span> c = getState();</span><br><span class="line">           <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">                   compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">                   setExclusiveOwnerThread(current);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">               <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">               <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">               setState(nextc);</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>从以上源码可以看出在Lock中可以自己控制锁是否公平，而且，默认的是非公平锁，以下是ReentrantLock的构造函数：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     sync = <span class="keyword">new</span> NonfairSync();<span class="comment">//默认非公平锁</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="尾记录："><a href="#尾记录：" class="headerlink" title="尾记录："></a>尾记录：</h2><p>笔者水平一般，不过此博客在引言中的目的已全部达到。这只是笔者在学习过程中的总结与概括，如存在不正确的，欢迎大家批评指出。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="1、两种锁的底层实现方式："><a href="#1、两种锁的底层实现方式：" class="headerlink" title="1、两种锁的底层实现方式："></a>1、两种锁的底层实现方式：</h3><p>synchronized：我们知道java是用字节码指令来控制程序（这里不包括热点代码编译成机器码）。在字节指令中，存在有synchronized所包含的代码块，那么会形成2段流程的执行。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java6-1586835150.png" alt="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用" title="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用"></p><p>我们点击查看SyncDemo.java的源码SyncDemo.class，可以看到如下：</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java5-1586835150.png" alt="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用" title="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用"></p><p>如上就是这段代码段字节码指令，没你想的那么难吧。言归正传，我们可以清晰段看到，其实synchronized映射成字节码指令就是增加来两个指令：monitorenter和monitorexit。当一条线程进行执行的遇到monitorenter指令的时候，它会去尝试获得锁，如果获得锁那么锁计数+1（为什么会加一呢，因为它是一个可重入锁，所以需要用这个锁计数判断锁的情况），如果没有获得锁，那么阻塞。当它遇到monitorexit的时候，锁计数器-1，当计数器为0，那么就释放锁。</p><p>那么有的朋友看到这里就疑惑了，那图上有2个monitorexit呀？马上回答这个问题：上面我以前写的文章也有表述过，synchronized锁释放有两种机制，一种就是执行完释放；另外一种就是发送异常，虚拟机释放。图中第二个monitorexit就是发生异常时执行的流程，这就是我开头说的“会有2个流程存在“。而且，从图中我们也可以看到在第13行，有一个goto指令，也就是说如果正常运行结束会跳转到19行执行。</p><p>这下，你对synchronized是不是了解的很清晰了呢。接下来我们再聊一聊Lock。</p><p>Lock：Lock实现和synchronized不一样，后者是一种悲观锁，它胆子很小，它很怕有人和它抢吃的，所以它每次吃东西前都把自己关起来。而Lock呢底层其实是CAS乐观锁的体现，它无所谓，别人抢了它吃的，它重新去拿吃的就好啦，所以它很乐观。具体底层怎么实现，博主不在细述，有机会的话，我会对concurrent包下面的机制好好和大家说说，如果面试问起，你就说底层主要靠volatile和CAS操作实现的。</p><p>现在，才是我真正想在这篇博文后面加的，我要说的是：尽可能去使用synchronized而不要去使用LOCK</p><p>什么概念呢？我和大家打个比方：你叫jdk，你生了一个孩子叫synchronized，后来呢，你领养了一个孩子叫LOCK。起初，LOCK刚来到新家的时候，它很乖，很懂事，各个方面都表现的比synchronized好。你很开心，但是你内心深处又有一点淡淡的忧伤，你不希望你自己亲生的孩子竟然还不如一个领养的孩子乖巧。这个时候，你对亲生的孩子教育更加深刻了，你想证明，你的亲生孩子synchronized并不会比领养的孩子LOCK差。（博主只是打个比方）</p><h3 id="那如何教育呢？"><a href="#那如何教育呢？" class="headerlink" title="那如何教育呢？"></a>那如何教育呢？</h3><p>在jdk1.6~jdk1.7的时候，也就是synchronized16、7岁的时候，你作为爸爸，你给他优化了，具体优化在哪里呢：</p><h3 id="1、线程自旋和适应性自旋"><a href="#1、线程自旋和适应性自旋" class="headerlink" title="1、线程自旋和适应性自旋"></a>1、线程自旋和适应性自旋</h3><p>我们知道，java’线程其实是映射在内核之上的，线程的挂起和恢复会极大的影响开销。并且jdk官方人员发现，很多线程在等待锁的时候，在很短的一段时间就获得了锁，所以它们在线程等待的时候，并不需要把线程挂起，而是让他无目的的循环，一般设置10次。这样就避免了线程切换的开销，极大的提升了性能。</p><p>而适应性自旋，是赋予了自旋一种学习能力，它并不固定自旋10次一下。他可以根据它前面线程的自旋情况，从而调整它的自旋，甚至是不经过自旋而直接挂起。</p><h3 id="2、锁消除"><a href="#2、锁消除" class="headerlink" title="2、锁消除"></a>2、锁消除</h3><p>什么叫锁消除呢？就是把不必要的同步在编译阶段进行移除。</p><p>那么有的小伙伴又迷糊了，我自己写的代码我会不知道这里要不要加锁？我加了锁就是表示这边会有同步呀？</p><p>并不是这样，这里所说的锁消除并不一定指代是你写的代码的锁消除，我打一个比方：</p><p>在jdk1.5以前，我们的String字符串拼接操作其实底层是StringBuffer来实现的（这个大家可以用我前面介绍的方法，写一个简单的demo，然后查看class文件中的字节码指令就清楚了），而在jdk1.5之后，那么是用StringBuilder来拼接的。我们考虑前面的情况，比如如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str1=<span class="string">"qwe"</span>;</span><br><span class="line">String str2=<span class="string">"asd"</span>;</span><br><span class="line">String str3=str1+str2;</span><br></pre></td></tr></table></figure><p>底层实现会变成这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">sb.append(<span class="string">"qwe"</span>);</span><br><span class="line">sb.append(<span class="string">"asd"</span>);</span><br></pre></td></tr></table></figure><p>我们知道，StringBuffer是一个线程安全的类，也就是说两个append方法都会同步，通过指针逃逸分析（就是变量不会外泄），我们发现在这段代码并不存在线程安全问题，这个时候就会把这个同步锁消除。</p><h3 id="3、锁粗化"><a href="#3、锁粗化" class="headerlink" title="3、锁粗化"></a>3、锁粗化</h3><p>在用synchronized的时候，我们都讲究为了避免大开销，尽量同步代码块要小。那么为什么还要加粗呢？</p><p>我们继续以上面的字符串拼接为例，我们知道在这一段代码中，每一个append都需要同步一次，那么我可以把锁粗化到第一个append和最后一个append（这里不要去纠结前面的锁消除，我只是打个比方）</p><h3 id="4、轻量级锁"><a href="#4、轻量级锁" class="headerlink" title="4、轻量级锁"></a>4、轻量级锁</h3><h3 id="5、偏向锁"><a href="#5、偏向锁" class="headerlink" title="5、偏向锁"></a>5、偏向锁</h3><p>关于最后这两种，我希望留个有缘的读者自己去查找，我不希望我把一件事情描述的那么详细，自己动手得到才是你自己的，博主可以告诉你的是，最后两种并不难。。加油吧，各位。</p><p><em>来源：<a href="https://blog.csdn.net/u012403290/" target="_blank" rel="noopener">https://blog.csdn.net/u012403290/</a></em></p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA并发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>API接口设计该如何设计？如何保证安全？</title>
      <link href="/2020/04/20/API%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E8%AF%A5%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%EF%BC%9F%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%AE%89%E5%85%A8%EF%BC%9F/"/>
      <url>/2020/04/20/API%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E8%AF%A5%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%EF%BC%9F%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%AE%89%E5%85%A8%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<p>在实际的业务中，难免会跟第三方系统进行数据的交互与传递，那么如何保证数据在传输过程中的安全呢（防窃取）？除了https的协议之外，能不能加上通用的一套算法以及规范来保证传输的安全性呢？  </p><p>下面我们就来讨论下常用的一些API设计的安全方法，可能不一定是最好的，有更牛逼的实现方式，但是这篇是我自己的经验分享.<br><strong>一、token 简介</strong><br>Token：访问令牌access token, 用于接口中, 用于标识接口调用者的身份、凭证，减少用户名和密码的传输次数。一般情况下客户端(接口调用方)需要先向服务器端申请一个接口调用的账号，服务器会给出一个appId和一个key, key用于参数签名使用，注意key保存到客户端，需要做一些安全处理，防止泄露。<br>Token的值一般是UUID，服务端生成Token后需要将token做为key，将一些和token关联的信息作为value保存到缓存服务器中(redis)，当一个请求过来后，服务器就去缓存服务器中查询这个Token是否存在，存在则调用接口，不存在返回接口错误，一般通过拦截器或者过滤器来实现，Token分为两种：  </p><ul><li><p>API Token(接口令牌): 用于访问不需要用户登录的接口，如登录、注册、一些基本数据的获取等。获取接口令牌需要拿appId、timestamp和sign来换，sign=加密(timestamp+key)</p></li><li><p>USER Token(用户令牌): 用于访问需要用户登录之后的接口，如：获取我的基本信息、保存、修改、删除等操作。获取用户令牌需要拿用户名和密码来换</p></li></ul><p>关于Token的时效性：token可以是一次性的、也可以在一段时间范围内是有效的，具体使用哪种看业务需要。<br>一般情况下接口最好使用https协议，如果使用http协议，Token机制只是一种减少被黑的可能性，其实只能防君子不能防小人。<br>一般token、timestamp和sign 三个参数会在接口中会同时作为参数传递，每个参数都有各自的用途。</p><p><strong>二、timestamp 简介</strong><br>timestamp: 时间戳，是客户端调用接口时对应的当前时间戳，时间戳用于防止DoS攻击。当黑客劫持了请求的url去DoS攻击，每次调用接口时接口都会判断服务器当前系统时间和接口中传的的timestamp的差值，如果这个差值超过某个设置的时间(假如5分钟)，那么这个请求将被拦截掉，如果在设置的超时时间范围内，是不能阻止DoS攻击的。timestamp机制只能减轻DoS攻击的时间，缩短攻击时间。如果黑客修改了时间戳的值可通过sign签名机制来处理。<br>DoS<br>DoS是Denial of Service的简称，即拒绝服务，造成DoS的攻击行为被称为DoS攻击，其目的是使计算机或网络无法提供正常的服务。最常见的DoS攻击有计算机网络带宽攻击和连通性攻击。<br>DoS攻击是指故意的攻击网络协议实现的缺陷或直接通过野蛮手段残忍地耗尽被攻击对象的资源，目的是让目标计算机或网络无法提供正常的服务或资源访问，使目标系统服务系统停止响应甚至崩溃，而在此攻击中并不包括侵入目标服务器或目标网络设备。这些服务资源包括网络带宽，文件系统空间容量，开放的进程或者允许的连接。这种攻击会导致资源的匮乏，无论计算机的处理速度多快、内存容量多大、网络带宽的速度多快都无法避免这种攻击带来的后果。  </p><ul><li><p>Pingflood: 该攻击在短时间内向目的主机发送大量ping包，造成网络堵塞或主机资源耗尽。  </p></li><li><p>Synflood: 该攻击以多个随机的源主机地址向目的主机发送SYN包，而在收到目的主机的SYN ACK后并不回应，这样，目的主机就为这些源主机建立了大量的连接队列，而且由于没有收到ACK一直维护着这些队列，造成了资源的大量消耗而不能向正常请求提供服务。  </p></li><li><p>Smurf：该攻击向一个子网的广播地址发一个带有特定请求（如ICMP回应请求）的包，并且将源地址伪装成想要攻击的主机地址。子网上所有主机都回应广播包请求而向被攻击主机发包，使该主机受到攻击。  </p></li><li><p>Land-based：攻击者将一个包的源地址和目的地址都设置为目标主机的地址，然后将该包通过IP欺骗的方式发送给被攻击主机，这种包可以造成被攻击主机因试图与自己建立连接而陷入死循环，从而很大程度地降低了系统性能。  </p></li><li><p>Ping of Death：根据TCP/IP的规范，一个包的长度最大为65536字节。尽管一个包的长度不能超过65536字节，但是一个包分成的多个片段的叠加却能做到。当一个主机收到了长度大于65536字节的包时，就是受到了Ping of Death攻击，该攻击会造成主机的宕机。  </p></li><li><p>Teardrop：IP数据包在网络传递时，数据包可以分成更小的片段。攻击者可以通过发送两段（或者更多）数据包来实现TearDrop攻击。第一个包的偏移量为0，长度为N，第二个包的偏移量小于N。为了合并这些数据段，TCP/IP堆栈会分配超乎寻常的巨大资源，从而造成系统资源的缺乏甚至机器的重新启动。  </p></li><li><p>PingSweep：使用ICMP Echo轮询多个主机。</p></li></ul><p><strong>三、sign 简介</strong><br>nonce：随机值，是客户端随机生成的值，作为参数传递过来，随机值的目的是增加sign签名的多变性。随机值一般是数字和字母的组合，6位长度，随机值的组成和长度没有固定规则。<br>sign: 一般用于参数签名，防止参数被非法篡改，最常见的是修改金额等重要敏感参数， sign的值一般是将所有非空参数按照升续排序然后+token+key+timestamp+nonce(随机数)拼接在一起，然后使用某种加密算法进行加密，作为接口中的一个参数sign来传递，也可以将sign放到请求头中。接口在网络传输过程中如果被黑客挟持，并修改其中的参数值，然后再继续调用接口，虽然参数的值被修改了，但是因为黑客不知道sign是如何计算出来的，不知道sign都有哪些值构成，不知道以怎样的顺序拼接在一起的，最重要的是不知道签名字符串中的key是什么，所以黑客可以篡改参数的值，但没法修改sign的值，当服务器调用接口前会按照sign的规则重新计算出sign的值然后和接口传递的sign参数的值做比较，如果相等表示参数值没有被篡改，如果不等，表示参数被非法篡改了，就不执行接口了。<br><strong>四、防止重复提交</strong>  </p><p>对于一些重要的操作需要防止客户端重复提交的(如非幂等性重要操作)，具体办法是当请求第一次提交时将sign作为key保存到redis，并设置超时时间，超时时间和Timestamp中设置的差值相同。当同一个请求第二次访问时会先检测redis是否存在该sign，如果存在则证明重复提交了，接口就不再继续调用了。如果sign在缓存服务器中因过期时间到了，而被删除了，此时当这个url再次请求服务器时，因token的过期时间和sign的过期时间一直，sign过期也意味着token过期，那样同样的url再访问服务器会因token错误会被拦截掉，这就是为什么sign和token的过期时间要保持一致的原因。拒绝重复调用机制确保URL被别人截获了也无法使用（如抓取数据）。<br>对于哪些接口需要防止重复提交可以自定义个注解来标记。<br>注意：所有的安全措施都用上的话有时候难免太过复杂，在实际项目中需要根据自身情况作出裁剪，比如可以只使用签名机制就可以保证信息不会被篡改，或者定向提供服务的时候只用Token机制就可以了。如何裁剪，全看项目实际情况和对接口安全性的要求。<br><strong>五、使用流程</strong><br>1.接口调用方(客户端)向接口提供方(服务器)申请接口调用账号，申请成功后，接口提供方会给接口调用方一个appId和一个key参数<br>2.客户端携带参数appId、timestamp、sign去调用服务器端的API token，其中sign=加密(appId + timestamp + key)<br>3.客户端拿着api_token 去访问不需要登录就能访问的接口<br>4.当访问用户需要登录的接口时，客户端跳转到登录页面，通过用户名和密码调用登录接口，登录接口会返回一个usertoken, 客户端拿着usertoken 去访问需要登录才能访问的接口<br>sign的作用是防止参数被篡改，客户端调用服务端时需要传递sign参数，服务器响应客户端时也可以返回一个sign用于客户度校验返回的值是否被非法篡改了。客户端传的sign和服务器端响应的sign算法可能会不同。</p><p><strong>六、示例代码</strong><br>1. dependency  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2. RedisConfiguration  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> RedisConfiguration &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JedisConnectionFactory jedisConnectionFactory()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JedisConnectionFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持存储对象</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; redisTemplate()&#123;</span><br><span class="line">        RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; redisTemplate = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">        redisTemplate.setConnectionFactory(jedisConnectionFactory());</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(<span class="built_in">Object</span>.class);</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3. TokenController  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/token"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TokenController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * API Token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param sign</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/api_token"</span>)</span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;AccessToken&gt; apiToken(<span class="built_in">String</span> appId, <span class="meta">@RequestHeader</span>(<span class="string">"timestamp"</span>) <span class="built_in">String</span> timestamp, <span class="meta">@RequestHeader</span>(<span class="string">"sign"</span>) <span class="built_in">String</span> sign) &#123;</span><br><span class="line">        Assert.isTrue(!StringUtils.isEmpty(appId) &amp;&amp; !StringUtils.isEmpty(timestamp) &amp;&amp; !StringUtils.isEmpty(sign), <span class="string">"参数错误"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        long reqeustInterval = System.currentTimeMillis() - Long.valueOf(timestamp);</span><br><span class="line">        Assert.isTrue(reqeustInterval &lt; <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>, <span class="string">"请求过期，请重新请求"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 根据appId查询数据库获取appSecret</span></span><br><span class="line">        AppInfo appInfo = <span class="keyword">new</span> AppInfo(<span class="string">"1"</span>, <span class="string">"12345678954556"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 校验签名</span></span><br><span class="line">        <span class="built_in">String</span> signString = timestamp + appId + appInfo.getKey();</span><br><span class="line">        <span class="built_in">String</span> signature = MD5Util.encode(signString);</span><br><span class="line">        log.info(signature);</span><br><span class="line">        Assert.isTrue(signature.equals(sign), <span class="string">"签名错误"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 如果正确生成一个token保存到redis中，如果错误返回错误信息</span></span><br><span class="line">        AccessToken accessToken = <span class="keyword">this</span>.saveToken(<span class="number">0</span>, appInfo, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ApiResponse.success(accessToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotRepeatSubmit</span>(<span class="number">5000</span>)</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"user_token"</span>)</span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;UserInfo&gt; userToken(<span class="built_in">String</span> username, <span class="built_in">String</span> password) &#123;</span><br><span class="line">        <span class="comment">// 根据用户名查询密码, 并比较密码(密码可以RSA加密一下)</span></span><br><span class="line">        UserInfo userInfo = <span class="keyword">new</span> UserInfo(username, <span class="string">"81255cb0dca1a5f304328a70ac85dcbd"</span>, <span class="string">"111111"</span>);</span><br><span class="line">        <span class="built_in">String</span> pwd = password + userInfo.getSalt();</span><br><span class="line">        <span class="built_in">String</span> passwordMD5 = MD5Util.encode(pwd);</span><br><span class="line">        Assert.isTrue(passwordMD5.equals(userInfo.getPassword()), <span class="string">"密码错误"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 保存Token</span></span><br><span class="line">        AppInfo appInfo = <span class="keyword">new</span> AppInfo(<span class="string">"1"</span>, <span class="string">"12345678954556"</span>);</span><br><span class="line">        AccessToken accessToken = <span class="keyword">this</span>.saveToken(<span class="number">1</span>, appInfo, userInfo);</span><br><span class="line">        userInfo.setAccessToken(accessToken);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.success(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccessToken saveToken(int tokenType, AppInfo appInfo,  UserInfo userInfo) &#123;</span><br><span class="line">        <span class="built_in">String</span> token = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// token有效期为2小时</span></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.setTime(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">        calendar.add(Calendar.SECOND, <span class="number">7200</span>);</span><br><span class="line">        <span class="built_in">Date</span> expireTime = calendar.getTime();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 保存token</span></span><br><span class="line">        ValueOperations&lt;<span class="built_in">String</span>, TokenInfo&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">        TokenInfo tokenInfo = <span class="keyword">new</span> TokenInfo();</span><br><span class="line">        tokenInfo.setTokenType(tokenType);</span><br><span class="line">        tokenInfo.setAppInfo(appInfo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tokenType == <span class="number">1</span>) &#123;</span><br><span class="line">            tokenInfo.setUserInfo(userInfo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        operations.set(token, tokenInfo, <span class="number">7200</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        AccessToken accessToken = <span class="keyword">new</span> AccessToken(token, expireTime);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        long timestamp = System.currentTimeMillis();</span><br><span class="line">        System.out.println(timestamp);</span><br><span class="line">        <span class="built_in">String</span> signString = timestamp + <span class="string">"1"</span> + <span class="string">"12345678954556"</span>;</span><br><span class="line">        <span class="built_in">String</span> sign = MD5Util.encode(signString);</span><br><span class="line">        System.out.println(sign);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line">        signString = <span class="string">"password=123456&amp;username=1&amp;12345678954556"</span> + <span class="string">"ff03e64b-427b-45a7-b78b-47d9e8597d3b1529815393153sdfsdfsfs"</span> + timestamp + <span class="string">"A1scr6"</span>;</span><br><span class="line">        sign = MD5Util.encode(signString);</span><br><span class="line">        System.out.println(sign);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4. WebMvcConfiguration  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] excludePathPatterns  = &#123;<span class="string">"/api/token/api_token"</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenInterceptor tokenInterceptor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">        registry.addInterceptor(tokenInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">"/api/**"</span>)</span><br><span class="line">                .excludePathPatterns(excludePathPatterns);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">5</span>. TokenInterceptor</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler 访问的目标方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String token = request.getHeader(<span class="string">"token"</span>);</span><br><span class="line">        String timestamp = request.getHeader(<span class="string">"timestamp"</span>);</span><br><span class="line">        <span class="comment">// 随机字符串</span></span><br><span class="line">        String nonce = request.getHeader(<span class="string">"nonce"</span>);</span><br><span class="line">        String sign = request.getHeader(<span class="string">"sign"</span>);</span><br><span class="line">        Assert.isTrue(!StringUtils.isEmpty(token) &amp;&amp; !StringUtils.isEmpty(timestamp) &amp;&amp; !StringUtils.isEmpty(sign), <span class="string">"参数错误"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取超时时间</span></span><br><span class="line">        NotRepeatSubmit notRepeatSubmit = ApiUtil.getNotRepeatSubmit(handler);</span><br><span class="line">        <span class="keyword">long</span> expireTime = notRepeatSubmit == <span class="keyword">null</span> ? <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span> : notRepeatSubmit.value();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 请求时间间隔</span></span><br><span class="line">        <span class="keyword">long</span> reqeustInterval = System.currentTimeMillis() - Long.valueOf(timestamp);</span><br><span class="line">        Assert.isTrue(reqeustInterval &lt; expireTime, <span class="string">"请求超时，请重新请求"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 校验Token是否存在</span></span><br><span class="line">        ValueOperations&lt;String, TokenInfo&gt; tokenRedis = redisTemplate.opsForValue();</span><br><span class="line">        TokenInfo tokenInfo = tokenRedis.get(token);</span><br><span class="line">        Assert.notNull(tokenInfo, <span class="string">"token错误"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 校验签名(将所有的参数加进来，防止别人篡改参数) 所有参数看参数名升续排序拼接成url</span></span><br><span class="line">        <span class="comment">// 请求参数 + token + timestamp + nonce</span></span><br><span class="line">        String signString = ApiUtil.concatSignString(request) + tokenInfo.getAppInfo().getKey() + token + timestamp + nonce;</span><br><span class="line">        String signature = MD5Util.encode(signString);</span><br><span class="line">        <span class="keyword">boolean</span> flag = signature.equals(sign);</span><br><span class="line">        Assert.isTrue(flag, <span class="string">"签名错误"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 拒绝重复调用(第一次访问时存储，过期时间和请求超时时间保持一致), 只有标注不允许重复提交注解的才会校验</span></span><br><span class="line">        <span class="keyword">if</span> (notRepeatSubmit != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ValueOperations&lt;String, Integer&gt; signRedis = redisTemplate.opsForValue();</span><br><span class="line">            <span class="keyword">boolean</span> exists = redisTemplate.hasKey(sign);</span><br><span class="line">            Assert.isTrue(!exists, <span class="string">"请勿重复提交"</span>);</span><br><span class="line">            signRedis.set(sign, <span class="number">0</span>, expireTime, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6. MD5Util —-MD5工具类，加密生成数字签名  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MD5Util</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final String hexDigits[] = &#123; <span class="string">"0"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>,</span><br><span class="line">            <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">byteArrayToHexString</span>(<span class="params"><span class="keyword">byte</span> b[]</span>)</span> &#123;</span><br><span class="line">        StringBuffer resultSb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++)</span><br><span class="line">            resultSb.append(byteToHexString(b[i]));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultSb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">byteToHexString</span>(<span class="params"><span class="keyword">byte</span> b</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> n = b;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">            n += <span class="number">256</span>;</span><br><span class="line">        <span class="keyword">int</span> d1 = n / <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">int</span> d2 = n % <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> hexDigits[d1] + hexDigits[d2];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span>(<span class="params">String origin</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> encode(origin, <span class="string">"UTF-8"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span>(<span class="params">String origin, String charsetname</span>)</span> &#123;</span><br><span class="line">        String resultString = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resultString = <span class="keyword">new</span> String(origin);</span><br><span class="line">            MessageDigest md = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            <span class="keyword">if</span> (charsetname == <span class="literal">null</span> || <span class="string">""</span>.<span class="keyword">equals</span>(charsetname))</span><br><span class="line">                resultString = byteArrayToHexString(md.digest(resultString</span><br><span class="line">                        .getBytes()));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                resultString = byteArrayToHexString(md.digest(resultString</span><br><span class="line">                        .getBytes(charsetname)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7. @NotRepeatSubmit   —–自定义注解，防止重复提交。  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 禁止重复提交</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> @<span class="keyword">interface</span> <span class="title">NotRepeatSubmit</span> &#123;</span><br><span class="line">    <span class="comment">/** 过期时间，单位毫秒 **/</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">value</span>(<span class="params"></span>) <span class="keyword">default</span> 5000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8. AccessToken  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> AccessToken &#123;</span><br><span class="line">    <span class="comment">/** token */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> token;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 失效时间 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Date</span> expireTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9. AppInfo  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> AppInfo &#123;</span><br><span class="line">    <span class="comment">/** App id */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> appId;</span><br><span class="line">    <span class="comment">/** API 秘钥 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10. TokenInfo  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TokenInfo</span> &#123;</span><br><span class="line">    <span class="comment">/** token类型: api:0 、user:1 */</span></span><br><span class="line">    <span class="keyword">private</span> Integer tokenType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** App 信息 */</span></span><br><span class="line">    <span class="keyword">private</span> AppInfo appInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 用户其他数据 */</span></span><br><span class="line">    <span class="keyword">private</span> UserInfo userInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11. UserInfo  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> UserInfo &#123;</span><br><span class="line">    <span class="comment">/** 用户名 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> username;</span><br><span class="line">    <span class="comment">/** 手机号 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> mobile;</span><br><span class="line">    <span class="comment">/** 邮箱 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> email;</span><br><span class="line">    <span class="comment">/** 密码 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> password;</span><br><span class="line">    <span class="comment">/** 盐 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> salt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccessToken accessToken;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UserInfo(<span class="built_in">String</span> username, <span class="built_in">String</span> password, <span class="built_in">String</span> salt) &#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.salt = salt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12. ApiCodeEnum  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 错误码code可以使用纯数字,使用不同区间标识一类错误，也可以使用纯字符，也可以使用前缀+编号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 错误码：ERR + 编号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 可以使用日志级别的前缀作为错误类型区分 Info(I) Error(E) Warning(W)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 或者以业务模块 + 错误号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * TODO 错误码设计</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Alipay 用了两个code，两个msg(https://docs.open.alipay.com/api_1/alipay.trade.pay)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ApiCodeEnum &#123;</span><br><span class="line">    SUCCESS(<span class="string">"10000"</span>, <span class="string">"success"</span>),</span><br><span class="line">    UNKNOW_ERROR(<span class="string">"ERR0001"</span>,<span class="string">"未知错误"</span>),</span><br><span class="line">    PARAMETER_ERROR(<span class="string">"ERR0002"</span>,<span class="string">"参数错误"</span>),</span><br><span class="line">    TOKEN_EXPIRE(<span class="string">"ERR0003"</span>,<span class="string">"认证过期"</span>),</span><br><span class="line">    REQUEST_TIMEOUT(<span class="string">"ERR0004"</span>,<span class="string">"请求超时"</span>),</span><br><span class="line">    SIGN_ERROR(<span class="string">"ERR0005"</span>,<span class="string">"签名错误"</span>),</span><br><span class="line">    REPEAT_SUBMIT(<span class="string">"ERR0006"</span>,<span class="string">"请不要频繁操作"</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 代码 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> code;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 结果 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> msg;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ApiCodeEnum(<span class="built_in">String</span> code, <span class="built_in">String</span> msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> getCode() &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> getMsg() &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>13. ApiResult  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ApiResult &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 代码 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> code;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 结果 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>14. ApiUtil  ——-这个参考支付宝加密的算法写的.我直接Copy过来了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ApiUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按参数名升续拼接参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">request</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="built_in">String</span> concatSignString(HttpServletRequest request) &#123;</span><br><span class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; paramterMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        request.getParameterMap().forEach((key, value) -&gt; paramterMap.put(key, value[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">// 按照key升续排序，然后拼接参数</span></span><br><span class="line">        <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; keySet = paramterMap.keySet();</span><br><span class="line">        <span class="built_in">String</span>[] keyArray = keySet.toArray(<span class="keyword">new</span> <span class="built_in">String</span>[keySet.size()]);</span><br><span class="line">        Arrays.sort(keyArray);</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">String</span> k : keyArray) &#123;</span><br><span class="line">            <span class="comment">// 或略掉的字段</span></span><br><span class="line">            <span class="keyword">if</span> (k.equals(<span class="string">"sign"</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (paramterMap.get(k).trim().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 参数值为空，则不参与签名</span></span><br><span class="line">                sb.append(k).append(<span class="string">"="</span>).append(paramterMap.get(k).trim()).append(<span class="string">"&amp;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="built_in">String</span> concatSignString(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; map) &#123;</span><br><span class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; paramterMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.forEach((key, value) -&gt; paramterMap.put(key, value));</span><br><span class="line">        <span class="comment">// 按照key升续排序，然后拼接参数</span></span><br><span class="line">        <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; keySet = paramterMap.keySet();</span><br><span class="line">        <span class="built_in">String</span>[] keyArray = keySet.toArray(<span class="keyword">new</span> <span class="built_in">String</span>[keySet.size()]);</span><br><span class="line">        Arrays.sort(keyArray);</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">String</span> k : keyArray) &#123;</span><br><span class="line">            <span class="keyword">if</span> (paramterMap.get(k).trim().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 参数值为空，则不参与签名</span></span><br><span class="line">                sb.append(k).append(<span class="string">"="</span>).append(paramterMap.get(k).trim()).append(<span class="string">"&amp;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取方法上的<span class="doctag">@NotRepeatSubmit</span>注解</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">handler</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">static</span> NotRepeatSubmit getNotRepeatSubmit(<span class="built_in">Object</span> handler) &#123;</span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod) &#123;</span><br><span class="line">            HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">            Method method = handlerMethod.getMethod();</span><br><span class="line">            NotRepeatSubmit annotation = method.getAnnotation(NotRepeatSubmit.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> annotation;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>15. ApiResponse</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ApiResponse&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/** 结果 */</span></span><br><span class="line">    <span class="keyword">private</span> ApiResult result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据 */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 签名 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> sign;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse success(T data) &#123;</span><br><span class="line">        <span class="keyword">return</span> response(ApiCodeEnum.SUCCESS.getCode(), ApiCodeEnum.SUCCESS.getMsg(), data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApiResponse error(<span class="built_in">String</span> code, <span class="built_in">String</span> msg) &#123;</span><br><span class="line">        <span class="keyword">return</span> response(code, msg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse response(<span class="built_in">String</span> code, <span class="built_in">String</span> msg, T data) &#123;</span><br><span class="line">        ApiResult result = <span class="keyword">new</span> ApiResult(code, msg);</span><br><span class="line">        ApiResponse response = <span class="keyword">new</span> ApiResponse();</span><br><span class="line">        response.setResult(result);</span><br><span class="line">        response.setData(data);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">String</span> sign = signData(data);</span><br><span class="line">        response.setSign(sign);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="built_in">String</span> signData(T data) &#123;</span><br><span class="line">        <span class="comment">// TODO 查询key</span></span><br><span class="line">        <span class="built_in">String</span> key = <span class="string">"12345678954556"</span>;</span><br><span class="line">        Map&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; responseMap = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            responseMap = getFields(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">String</span> urlComponent = ApiUtil.concatSignString(responseMap);</span><br><span class="line">        <span class="built_in">String</span> signature = urlComponent + <span class="string">"key="</span> + key;</span><br><span class="line">        <span class="built_in">String</span> sign = MD5Util.encode(signature);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sign;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param data 反射的对象,获取对象的字段名和值</span></span><br><span class="line"><span class="comment">     * @throws IllegalArgumentException</span></span><br><span class="line"><span class="comment">     * @throws IllegalAccessException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; getFields(<span class="built_in">Object</span> data) throws IllegalAccessException, IllegalArgumentException &#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        Map&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Field[] fields = data.getClass().getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">            Field field = fields[i];</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="built_in">String</span> name = field.getName();</span><br><span class="line">            <span class="built_in">Object</span> value = field.get(data);</span><br><span class="line">            <span class="keyword">if</span> (field.get(data) != <span class="literal">null</span>) &#123;</span><br><span class="line">                map.put(name, value.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>七、ThreadLocal</strong><br>ThreadLocal是线程内的全局上下文。就是在单个线程中，方法之间共享的内存，每个方法都可以从该上下文中获取值和修改值。<br>实际案例：<br>在调用api时都会传一个token参数，通常会写一个拦截器来校验token是否合法，我们可以通过token找到对应的用户信息(User)，如果token合法，然后将用户信息存储到ThreadLocal中，这样无论是在controller、service、dao的哪一层都能访问到该用户的信息。作用类似于Web中的request作用域。<br>传统方式我们要在方法中访问某个变量，可以通过传参的形式往方法中传参，如果多个方法都要使用那么每个方法都要传参；如果使用ThreadLocal所有方法就不需要传该参数了，每个方法都可以通过ThreadLocal来访问该值。  </p><ul><li><p>ThreadLocalUtil.set(“key”, value); 保存值</p></li><li><p>T value = ThreadLocalUtil.get(“key”); 获取值</p></li></ul><p>ThreadLocalUtil</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalUtil</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    private <span class="keyword">static</span> final ThreadLocal&lt;<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt;&gt; threadLocal = <span class="keyword">new</span> ThreadLocal() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; initialValue() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; getThreadLocal()&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> &lt;T&gt; T <span class="keyword">get</span>(String key) &#123;</span><br><span class="line">        <span class="built_in">Map</span> map = (<span class="built_in">Map</span>)threadLocal.get();</span><br><span class="line">        <span class="keyword">return</span> (T)map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> &lt;T&gt; T <span class="keyword">get</span>(String key,T defaultValue) &#123;</span><br><span class="line">        <span class="built_in">Map</span> map = (<span class="built_in">Map</span>)threadLocal.get();</span><br><span class="line">        <span class="keyword">return</span> (T)map.get(key) == <span class="literal">null</span> ? defaultValue : (T)map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">set</span>(String key, Object value) &#123;</span><br><span class="line">        <span class="built_in">Map</span> map = (<span class="built_in">Map</span>)threadLocal.get();</span><br><span class="line">        map.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">set</span>(Map&lt;String, Object&gt; keyValueMap) &#123;</span><br><span class="line">        <span class="built_in">Map</span> map = (<span class="built_in">Map</span>)threadLocal.get();</span><br><span class="line">        map.putAll(keyValueMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> remove() &#123;</span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> &lt;T&gt; <span class="built_in">Map</span>&lt;<span class="built_in">String</span>,T&gt; fetchVarsByPrefix(<span class="built_in">String</span> prefix) &#123;</span><br><span class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">String</span>,T&gt; vars = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>( prefix == <span class="literal">null</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> vars;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Map</span> map = (<span class="built_in">Map</span>)threadLocal.get();</span><br><span class="line">        <span class="built_in">Set</span>&lt;<span class="built_in">Map</span>.Entry&gt; <span class="keyword">set</span> = map.entrySet();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for( Map.Entry entry : <span class="keyword">set</span>)&#123;</span><br><span class="line">            <span class="built_in">Object</span> key = entry.getKey();</span><br><span class="line">            <span class="keyword">if</span>( key <span class="keyword">instanceof</span> <span class="built_in">String</span> )&#123;</span><br><span class="line">                <span class="keyword">if</span>( ((<span class="built_in">String</span>) key).startsWith(prefix) )&#123;</span><br><span class="line">                    vars.put((<span class="built_in">String</span>)key,(T)entry.getValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vars;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> &lt;T&gt; T remove(<span class="built_in">String</span> key) &#123;</span><br><span class="line">        <span class="built_in">Map</span> map = (<span class="built_in">Map</span>)threadLocal.get();</span><br><span class="line">        <span class="keyword">return</span> (T)map.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> clear(<span class="built_in">String</span> prefix) &#123;</span><br><span class="line">        <span class="keyword">if</span>( prefix == <span class="literal">null</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Map</span> map = (<span class="built_in">Map</span>)threadLocal.get();</span><br><span class="line">        <span class="built_in">Set</span>&lt;<span class="built_in">Map</span>.Entry&gt; <span class="keyword">set</span> = map.entrySet();</span><br><span class="line">        List&lt;String&gt; removeKeys = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for( Map.Entry entry : <span class="keyword">set</span> )&#123;</span><br><span class="line">            <span class="built_in">Object</span> key = entry.getKey();</span><br><span class="line">            <span class="keyword">if</span>( key <span class="keyword">instanceof</span> <span class="built_in">String</span> )&#123;</span><br><span class="line">                <span class="keyword">if</span>( ((<span class="built_in">String</span>) key).startsWith(prefix) )&#123;</span><br><span class="line">                    removeKeys.add((<span class="built_in">String</span>)key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>( <span class="built_in">String</span> key : removeKeys )&#123;</span><br><span class="line">            map.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结:这个是目前第三方数据接口交互过程中常用的一些参数与使用示例，希望对大家有点帮助。<br>当然如果为了保证更加的安全，可以加上RSA,RSA2，AES等等加密方式，保证了数据的更加的安全，但是唯一的缺点是加密与解密比较耗费CPU的资源。  </p><blockquote><p>来源：<a href="https://www.cnblogs.com/jurendage/p/12653865.html" target="_blank" rel="noopener">https://www.cnblogs.com/jurendage/p/12653865.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案</title>
      <link href="/2020/04/20/%E8%B0%88%E8%B0%88%E5%85%B3%E4%BA%8E%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%EF%BC%8C%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
      <url>/2020/04/20/%E8%B0%88%E8%B0%88%E5%85%B3%E4%BA%8E%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%EF%BC%8C%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
      
        <content type="html"><![CDATA[<blockquote><p>作者：Tom-shushu</p><p>cnblogs.com/Tom-shushu/p/10636382.html</p></blockquote><h2 id="1-我们使用缓存时的业务流程大概为："><a href="#1-我们使用缓存时的业务流程大概为：" class="headerlink" title="1.我们使用缓存时的业务流程大概为："></a>1.我们使用缓存时的业务流程大概为：</h2><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java10-1586143832.png" alt="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案" title="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案"></p><p>当我们查询一条数据时，先去查询缓存，如果缓存有就直接返回，如果没有就去查询数据库，然后返回。这种情况下就可能出现下面的一些现象。</p><h2 id="2-缓存穿透"><a href="#2-缓存穿透" class="headerlink" title="2.缓存穿透"></a>2.缓存穿透</h2><h3 id="2-1什么是缓存穿透"><a href="#2-1什么是缓存穿透" class="headerlink" title="2.1什么是缓存穿透"></a>2.1什么是缓存穿透</h3><p>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p><h3 id="2-2缓存穿透带来的问题"><a href="#2-2缓存穿透带来的问题" class="headerlink" title="2.2缓存穿透带来的问题"></a>2.2缓存穿透带来的问题</h3><p>试想一下，如果有黑客对你的系统进行攻击，拿一个不存在的id去查询数据，会产生大量的请求到你的数据库去查询，可能会导致你的数据库由于压力过大而宕掉。</p><h3 id="2-3解决的办法"><a href="#2-3解决的办法" class="headerlink" title="2.3解决的办法"></a>2.3解决的办法</h3><h4 id="2-3-1缓存空值"><a href="#2-3-1缓存空值" class="headerlink" title="2.3.1缓存空值"></a>2.3.1缓存空值</h4><p>之所以会发生穿透，就是因为缓存中没有储存这些空数据的key。从而导致每次查询都到数据库去了。</p><p>那么我们就可以为这些key对应的值设置为null丢到缓存里面去。后面出现查询这个key的请求的时候直接返回null。</p><p>这样就不用再到数据库中去走一圈了，但是别忘了设置过期时间。</p><p>缓存空对象会有两个问题：</p><ul><li><p>第一，空值做了缓存，意味着缓存层中存了更多的键，需要更多的内存空间 ( 如果是攻击，问题更严重 )，比较有效的方法是针对这类数据设置一个较短的过期时间，让其自动剔除。</p></li><li><p>第二，缓存层和存储层的数据会有一段时间窗口的不一致，可能会对业务有一定影响。例如过期时间设置为 5分钟，如果此时存储层添加了这个数据，那此段时间就会出现缓存层和存储层数据的不一致，此时可以利用消息系统或者其他方式清除掉缓存层中的空对象。</p></li></ul><h4 id="2-3-2用布隆过滤器BloomFilter"><a href="#2-3-2用布隆过滤器BloomFilter" class="headerlink" title="2.3.2用布隆过滤器BloomFilter"></a>2.3.2用布隆过滤器BloomFilter</h4><p>BloomFilter类似于一个hbase set用来判断某个元素(key)是否存在于某个集合中。</p><p>这种方式在大数据场景应用比较多，比如Hbase中使用它去判断数据是否在磁盘上。还有在爬虫场景判断url是否已经被爬取过。</p><p>这种方案可以加在第一种方案中，在缓存之前加一层BloomFilter，在查询的时候先去BloomFilter去查询key是否存在，如果不存在就直接返回，存在再去查缓存——–&gt;差数据库。</p><p>流程图如下：</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java6-1586143832-1.png" alt="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案" title="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案"></p><h3 id="2-4如何选择"><a href="#2-4如何选择" class="headerlink" title="2.4如何选择"></a>2.4如何选择</h3><p>针对于一些恶意攻击，攻击带来大量key是不存在的，那么我们采用第一种方案就会缓存大量不存在的数据。此时我们采用第一种方案就不合适了，我们完全可以先使用第二种方案过滤掉这些key。</p><p>针对这些key异常多，请求多，重复率比较低的数据，我们就没有必要进行缓存，使用第二种方案直接过滤掉。</p><p>而对于空数据的key有限的，重复率比较高的，我们则可以采用第一种方式进行缓存。</p><h2 id="3-缓存击穿"><a href="#3-缓存击穿" class="headerlink" title="3.缓存击穿"></a>3.缓存击穿</h2><h3 id="3-1什么是缓存击穿"><a href="#3-1什么是缓存击穿" class="headerlink" title="3.1什么是缓存击穿"></a>3.1什么是缓存击穿</h3><p>缓存击穿是我们使用缓存可能遇到的第二个问题。</p><p>在平时高并发的系统中，大量的请求同时查询一个key时，此时这个key正好失效了，就会导致大量的请求都打到数据库上面去，这种现象我们称为缓存击穿。</p><h3 id="3-2会带来什么问题"><a href="#3-2会带来什么问题" class="headerlink" title="3.2会带来什么问题"></a>3.2会带来什么问题</h3><p>会造成某一时刻数据请求量过大，压力剧增。</p><h3 id="3-3如何解决"><a href="#3-3如何解决" class="headerlink" title="3.3如何解决"></a>3.3如何解决</h3><p>上面现象是多个线程同时去查询数据库的这一条数据，那么我们可以在第一个查询数据的请求上使用一个互斥锁来锁住它。（如果是单机，可以用synchronized或者lock来处理，如果是分布式环境可以用分布式锁就可以了（分布式锁，可以用memcache的add, redis的setnx, zookeeper的添加节点操作））</p><p>其他线程走到这一步拿不到锁就等着，等待第一个线程查询到了数据，然后做缓存。后面的线程进来发现已经有了缓存，就直接走缓存。</p><h2 id="4-缓存雪崩"><a href="#4-缓存雪崩" class="headerlink" title="4.缓存雪崩"></a>4.缓存雪崩</h2><h3 id="4-1什么是缓存雪崩"><a href="#4-1什么是缓存雪崩" class="headerlink" title="4.1什么是缓存雪崩"></a>4.1什么是缓存雪崩</h3><p>缓存雪崩的情况是指：当某一时刻发生大规模的缓存失效的情况，比如你的缓存服务宕机了，会有大量的请求进来直接打到数据库上面，结果就是数据库挂掉。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java9-1586143832.png" alt="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案" title="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案"></p><h3 id="4-2解决办法"><a href="#4-2解决办法" class="headerlink" title="4.2解决办法"></a>4.2解决办法</h3><h4 id="4-2-1雪崩前：使用集群缓存，保证缓存服务的高可用"><a href="#4-2-1雪崩前：使用集群缓存，保证缓存服务的高可用" class="headerlink" title="4.2.1雪崩前：使用集群缓存，保证缓存服务的高可用"></a>4.2.1雪崩前：使用集群缓存，保证缓存服务的高可用</h4><p>这种方案就是在发生雪崩前对缓存集群，实现高可用，如果是使用Redis，可以使用（主从 + 哨兵），Redis Cluster来避免Redis全盘崩溃的情况。</p><h4 id="4-2-2雪崩中：ehcache本地缓存-Hystrix限流-amp-降级，避免MySQl被打死"><a href="#4-2-2雪崩中：ehcache本地缓存-Hystrix限流-amp-降级，避免MySQl被打死" class="headerlink" title="4.2.2雪崩中：ehcache本地缓存 + Hystrix限流 &amp; 降级，避免MySQl被打死"></a>4.2.2雪崩中：ehcache本地缓存 + Hystrix限流 &amp; 降级，避免MySQl被打死</h4><p>使用ehcache本地缓存的目的也是考虑Redis Cluster完全不可用的时候，ehcache本地缓存还能够支撑一阵。</p><p>使用Hystrix进行限流 &amp; 降级，比如一秒来了5000个请求，我们可以设置假设一秒只能有2000个请求可以通过这个组件，那么其他剩余的3000请求就会走限流逻辑。</p><p>然后去调用我们自己开发的降级组件（降级）,比如设置的一些默认值等等之类的。以此来保护最后的MySQl不会被大量的请求打死。</p><h4 id="4-2-3雪崩后：开启Redis持久化，尽快恢复缓存集群。"><a href="#4-2-3雪崩后：开启Redis持久化，尽快恢复缓存集群。" class="headerlink" title="4.2.3雪崩后：开启Redis持久化，尽快恢复缓存集群。"></a>4.2.3雪崩后：开启Redis持久化，尽快恢复缓存集群。</h4><h2 id="5-解决热点数据集中失效问题"><a href="#5-解决热点数据集中失效问题" class="headerlink" title="5.解决热点数据集中失效问题"></a>5.解决热点数据集中失效问题</h2><p>我们在设置缓存的时候，一般会给缓存设置一个失效的时间，过了这个时间，缓存就失效了。</p><p>对于一些热点数据来说，当缓存失效后会存在大量的请求到数据库上来，从而可能导致数据库崩溃的情况。</p><h3 id="5-1解决办法"><a href="#5-1解决办法" class="headerlink" title="5.1解决办法"></a>5.1解决办法</h3><h4 id="5-1-1设置不同的失效时间"><a href="#5-1-1设置不同的失效时间" class="headerlink" title="5.1.1设置不同的失效时间"></a>5.1.1设置不同的失效时间</h4><p>为了避免这些热点数据集体失效，那么我们在设置缓存过期时间的时侯，让他们失效的时间错开。比如我们可以在原有的失效时间基础上增加一个随机值。</p><h4 id="5-1-2互斥锁"><a href="#5-1-2互斥锁" class="headerlink" title="5.1.2互斥锁"></a>5.1.2互斥锁</h4><p>结合上面的击穿情况，在第一个请求去查询数据库的时候对它加一个互斥锁，其余的查询请求都会被阻塞住，直到锁被释放，从而保护数据库。</p><p>但是也是由于它会阻塞其他线程，此时系统的吞吐量会下降。需要结合实际业务去考虑。</p>]]></content>
      
      
      
        <tags>
            
            <tag> JAVA缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>FFmpeg 视频处理教程！</title>
      <link href="/2020/04/01/FFmpeg_%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2020/04/01/FFmpeg_%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2020/01/" target="_blank" rel="noopener">2020年1月14日</a></p><p><a href="https://www.ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a> 是视频处理最常用的开源软件。</p><p>它功能强大，用途广泛，大量用于视频网站和商业软件（比如 Youtube 和 iTunes），也是许多音频和视频格式的标准编码/解码实现。</p><p><img src="https://www.wangbase.com/blogimg/asset/202001/bg2020011401.jpg" alt=""></p><p>FFmpeg 本身是一个庞大的项目，包含许多组件和库文件，最常用的是它的命令行工具。本文介绍 FFmpeg 命令行如何处理视频，比桌面视频处理软件更简洁高效。</p><p>如果你还没安装，可以根据<a href="https://www.ffmpeg.org/download.html" target="_blank" rel="noopener">官方文档</a> 先完成安装。</p><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>介绍 FFmpeg 用法之前，需要了解一些视频处理的基本概念。</p><h3 id="1-1-容器"><a href="#1-1-容器" class="headerlink" title="1.1 容器"></a>1.1 容器</h3><p>视频文件本身其实是一个容器（container），里面包括了视频和音频，也可能有字幕等其他内容。</p><p>常见的容器格式有以下几种。一般来说，视频文件的后缀名反映了它的容器格式。</p><blockquote><ul><li><p>MP4</p></li><li><p>MKV</p></li><li><p>WebM</p></li><li><p>AVI</p></li></ul></blockquote><p>下面的命令查看 FFmpeg 支持的容器。</p><blockquote><p>$ ffmpeg -formats</p></blockquote><h3 id="1-2-编码格式"><a href="#1-2-编码格式" class="headerlink" title="1.2 编码格式"></a>1.2 编码格式</h3><p>视频和音频都需要经过编码，才能保存成文件。不同的编码格式（CODEC），有不同的压缩率，会导致文件大小和清晰度的差异。</p><p>常用的视频编码格式如下。</p><blockquote><ul><li><p>H.262</p></li><li><p>H.264</p></li><li><p>H.265</p></li></ul></blockquote><p>上面的编码格式都是有版权的，但是可以免费使用。此外，还有几种无版权的视频编码格式。</p><blockquote><ul><li><p>VP8</p></li><li><p>VP9</p></li><li><p>AV1</p></li></ul></blockquote><p>常用的音频编码格式如下。</p><blockquote><ul><li><p>MP3</p></li><li><p>AAC</p></li></ul></blockquote><p>上面所有这些都是有损的编码格式，编码后会损失一些细节，以换取压缩后较小的文件体积。无损的编码格式压缩出来的文件体积较大，这里就不介绍了。</p><p>下面的命令可以查看 FFmpeg 支持的编码格式，视频编码和音频编码都在内。</p><blockquote><p>$ ffmpeg -codecs</p></blockquote><h3 id="1-3-编码器"><a href="#1-3-编码器" class="headerlink" title="1.3 编码器"></a>1.3 编码器</h3><p>编码器（encoders）是实现某种编码格式的库文件。只有安装了某种格式的编码器，才能实现该格式视频/音频的编码和解码。</p><p>以下是一些 FFmpeg 内置的视频编码器。</p><blockquote><ul><li><p>libx264：最流行的开源 H.264 编码器</p></li><li><p>NVENC：基于 NVIDIA GPU 的 H.264 编码器</p></li><li><p>libx265：开源的 HEVC 编码器</p></li><li><p>libvpx：谷歌的 VP8 和 VP9 编码器</p></li><li><p>libaom：AV1 编码器</p></li></ul></blockquote><p>音频编码器如下。</p><blockquote><ul><li><p>libfdk-aac</p></li><li><p>aac</p></li></ul></blockquote><p>下面的命令可以查看 FFmpeg 已安装的编码器。</p><blockquote><p>$ ffmpeg -encoders</p></blockquote><h2 id="二、FFmpeg-的使用格式"><a href="#二、FFmpeg-的使用格式" class="headerlink" title="二、FFmpeg 的使用格式"></a>二、FFmpeg 的使用格式</h2><p>FFmpeg 的命令行参数非常多，可以分成五个部分。</p><blockquote><p>$ ffmpeg {1} {2} -i {3} {4} {5}</p></blockquote><p>上面命令中，五个部分的参数依次如下。</p><blockquote><ol><li><p>全局参数</p></li><li><p>输入文件参数</p></li><li><p>输入文件</p></li><li><p>输出文件参数</p></li><li><p>输出文件</p></li></ol></blockquote><p>参数太多的时候，为了便于查看，ffmpeg 命令可以写成多行。</p><blockquote><p>$ ffmpeg \[全局参数] \[输入文件参数] \-i [输入文件] \[输出文件参数] \[输出文件]</p></blockquote><p>下面是一个例子。</p><blockquote><p>$ ffmpeg \-y \ # 全局参数-c:a libfdk_aac -c:v libx264 \ # 输入文件参数-i input.mp4 \ # 输入文件-c:v libvpx-vp9 -c:a libvorbis \ # 输出文件参数output.webm # 输出文件</p></blockquote><p>上面的命令将 mp4 文件转成 webm 文件，这两个都是容器格式。输入的 mp4 文件的音频编码格式是 aac，视频编码格式是 H.264；输出的 webm 文件的视频编码格式是 VP9，音频格式是 Vorbis。</p><p>如果不指明编码格式，FFmpeg 会自己判断输入文件的编码。因此，上面的命令可以简单写成下面的样子。</p><blockquote><p>$ ffmpeg -i input.avi output.mp4</p></blockquote><h2 id="三、常用命令行参数"><a href="#三、常用命令行参数" class="headerlink" title="三、常用命令行参数"></a>三、常用命令行参数</h2><p>FFmpeg 常用的命令行参数如下。</p><blockquote><ul><li><p><code>-c</code>：指定编码器</p></li><li><p><code>-c copy</code>：直接复制，不经过重新编码（这样比较快）</p></li><li><p><code>-c:v</code>：指定视频编码器</p></li><li><p><code>-c:a</code>：指定音频编码器</p></li><li><p><code>-i</code>：指定输入文件</p></li><li><p><code>-an</code>：去除音频流</p></li><li><p><code>-vn</code>： 去除视频流</p></li><li><p><code>-preset</code>：指定输出的视频质量，会影响文件的生成速度，有以下几个可用的值 ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow。</p></li><li><p><code>-y</code>：不经过确认，输出时直接覆盖同名文件。</p></li></ul></blockquote><h2 id="四、常见用法"><a href="#四、常见用法" class="headerlink" title="四、常见用法"></a>四、常见用法</h2><p>下面介绍 FFmpeg 几种常见用法。</p><h3 id="4-1-查看文件信息"><a href="#4-1-查看文件信息" class="headerlink" title="4.1 查看文件信息"></a>4.1 查看文件信息</h3><p>查看视频文件的元信息，比如编码格式和比特率，可以只使用<code>-i</code>参数。</p><blockquote><p>$ ffmpeg -i input.mp4</p></blockquote><p>上面命令会输出很多冗余信息，加上<code>-hide_banner</code>参数，可以只显示元信息。</p><blockquote><p>$ ffmpeg -i input.mp4 -hide_banner</p></blockquote><h3 id="4-2-转换编码格式"><a href="#4-2-转换编码格式" class="headerlink" title="4.2 转换编码格式"></a>4.2 转换编码格式</h3><p>转换编码格式（transcoding）指的是， 将视频文件从一种编码转成另一种编码。比如转成 H.264 编码，一般使用编码器<code>libx264</code>，所以只需指定输出文件的视频编码器即可。</p><blockquote><p>$ ffmpeg -i [input.file] -c:v libx264 output.mp4</p></blockquote><p>下面是转成 H.265 编码的写法。</p><blockquote><p>$ ffmpeg -i [input.file] -c:v libx265 output.mp4</p></blockquote><h3 id="4-3-转换容器格式"><a href="#4-3-转换容器格式" class="headerlink" title="4.3 转换容器格式"></a>4.3 转换容器格式</h3><p>转换容器格式（transmuxing）指的是，将视频文件从一种容器转到另一种容器。下面是 mp4 转 webm 的写法。</p><blockquote><p>$ ffmpeg -i input.mp4 -c copy output.webm</p></blockquote><p>上面例子中，只是转一下容器，内部的编码格式不变，所以使用<code>-c copy</code>指定直接拷贝，不经过转码，这样比较快。</p><h3 id="4-4-调整码率"><a href="#4-4-调整码率" class="headerlink" title="4.4 调整码率"></a>4.4 调整码率</h3><p>调整码率（transrating）指的是，改变编码的比特率，一般用来将视频文件的体积变小。下面的例子指定码率最小为964K，最大为3856K，缓冲区大小为 2000K。</p><blockquote><p>$ ffmpeg \-i input.mp4 \-minrate 964K -maxrate 3856K -bufsize 2000K <br>output.mp4</p></blockquote><h3 id="4-5-改变分辨率（transsizing）"><a href="#4-5-改变分辨率（transsizing）" class="headerlink" title="4.5 改变分辨率（transsizing）"></a>4.5 改变分辨率（transsizing）</h3><p>下面是改变视频分辨率（transsizing）的例子，从 1080p 转为 480p 。</p><blockquote><p>$ ffmpeg \-i input.mp4 \-vf scale=480:-1 <br>output.mp4</p></blockquote><h3 id="4-6-提取音频"><a href="#4-6-提取音频" class="headerlink" title="4.6 提取音频"></a>4.6 提取音频</h3><p>有时，需要从视频里面提取音频（demuxing），可以像下面这样写。</p><blockquote><p>$ ffmpeg \-i input.mp4 \-vn -c:a copy <br>output.aac</p></blockquote><p>上面例子中，<code>-vn</code>表示去掉视频，<code>-c:a copy</code>表示不改变音频编码，直接拷贝。</p><h3 id="4-7-添加音轨"><a href="#4-7-添加音轨" class="headerlink" title="4.7 添加音轨"></a>4.7 添加音轨</h3><p>添加音轨（muxing）指的是，将外部音频加入视频，比如添加背景音乐或旁白。</p><blockquote><p>$ ffmpeg \-i input.aac -i input.mp4 <br>output.mp4</p></blockquote><p>上面例子中，有音频和视频两个输入文件，FFmpeg 会将它们合成为一个文件。</p><h3 id="4-8-截图"><a href="#4-8-截图" class="headerlink" title="4.8 截图"></a>4.8 截图</h3><p>下面的例子是从指定时间开始，连续对1秒钟的视频进行截图。</p><blockquote><p>$ ffmpeg \-y \-i input.mp4 \-ss 00:01:24 -t 00:00:01 <br>output_%3d.jpg</p></blockquote><p>如果只需要截一张图，可以指定只截取一帧。</p><blockquote><p>$ ffmpeg \-ss 01:23:45 \-i input \-vframes 1 -q:v 2 <br>output.jpg</p></blockquote><p>上面例子中，<code>-vframes 1</code>指定只截取一帧，<code>-q:v 2</code>表示输出的图片质量，一般是1到5之间（1 为质量最高）。</p><h3 id="4-9-裁剪"><a href="#4-9-裁剪" class="headerlink" title="4.9 裁剪"></a>4.9 裁剪</h3><p>裁剪（cutting）指的是，截取原始视频里面的一个片段，输出为一个新视频。可以指定开始时间（start）和持续时间（duration），也可以指定结束时间（end）。</p><blockquote><p>$ ffmpeg -ss [start] -i [input] -t [duration] -c copy [output]$ ffmpeg -ss [start] -i [input] -to [end] -c copy [output]</p></blockquote><p>下面是实际的例子。</p><blockquote><p>$ ffmpeg -ss 00:01:50 -i [input] -t 10.5 -c copy [output]$ ffmpeg -ss 2.5 -i [input] -to 10 -c copy [output]</p></blockquote><p>上面例子中，<code>-c copy</code>表示不改变音频和视频的编码格式，直接拷贝，这样会快很多。</p><h3 id="4-10-为音频添加封面"><a href="#4-10-为音频添加封面" class="headerlink" title="4.10 为音频添加封面"></a>4.10 为音频添加封面</h3><p>有些视频网站只允许上传视频文件。如果要上传音频文件，必须为音频添加封面，将其转为视频，然后上传。</p><p>下面命令可以将音频文件，转为带封面的视频文件。</p><blockquote><p>$ ffmpeg \-loop 1 \-i cover.jpg -i input.mp3 \-c:v libx264 -c:a aac -b:a 192k -shortest <br>output.mp4</p></blockquote><p>上面命令中，有两个输入文件，一个是封面图片<code>cover.jpg</code>，另一个是音频文件<code>input.mp3</code>。<code>-loop 1</code>参数表示图片无限循环，<code>-shortest</code>参数表示音频文件结束，输出视频就结束。</p><h2 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h2><ul><li><p><a href="https://github.com/leandromoreira/ffmpeg-libav-tutorial#chapter-3---transcoding" target="_blank" rel="noopener">FFmpeg libav tutorial</a></p></li><li><p><a href="https://github.com/leandromoreira/digital_video_introduction/blob/master/encoding_pratical_examples.md#split-and-merge-smoothly" target="_blank" rel="noopener">Digital video introduction</a></p></li><li><p><a href="http://slhck.info/ffmpeg-encoding-course/" target="_blank" rel="noopener">FFmpeg encoding and editing course</a></p></li><li><p><a href="http://dragonquest64.blogspot.com/2019/10/making-slideshows-wffmpeg.html" target="_blank" rel="noopener">Making Slideshows w/FFMpeg</a></p></li><li><p><a href="https://itsfoss.com/ffmpeg/" target="_blank" rel="noopener">The Complete Guide for Using ffmpeg in Linux</a></p></li></ul><p>（完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 视频处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub 敏捷开发入门教程</title>
      <link href="/2020/04/01/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
      <url>/2020/04/01/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2019/03/" target="_blank" rel="noopener">2019年3月 6日</a></p><p>敏捷开发（agile development）是非常流行的软件开发方法。据<a href="https://www.statista.com/statistics/673786/worldwide-software-development-survey-agile-development-continuous-integration-adoption/" target="_blank" rel="noopener">统计</a>，2018年90%的软件开发采用敏捷开发。</p><p>但是，到底什么是敏捷开发，能说清的人却不多。本文尝试用简洁易懂的语言，解释敏捷开发。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019030701.jpg" alt=""></p><h2 id="一、迭代开发"><a href="#一、迭代开发" class="headerlink" title="一、迭代开发"></a>一、迭代开发</h2><p>敏捷开发的核心是迭代开发（iterative development）。敏捷一定是采用迭代开发的方式。</p><p>那么什么是”迭代开发”呢？迭代的英文是 iterative，直译为”重复”，迭代开发其实就是”重复开发”。</p><p>对于大型软件项目，传统的开发方式是采用一个大周期（比如一年）进行开发，整个过程就是一次”大开发”；迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次”大开发”变成多次”小开发”，每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019030702.jpg" alt=""></p><p>举例来说，SpaceX 公司想造一个大推力火箭，将人类送到火星。但是，它不是一开始就造大火箭，而是先造一个最简陋的小火箭 Falcon 1。结果，第一次发射就爆炸了，直到第四次发射，才成功进入轨道。然后，开发了中型火箭 Falcon 9，九年中发射了70次。最后，才开发 Falcon 重型火箭。如果 SpaceX 不采用迭代开发，它可能直到现在还无法上天。</p><p>迭代开发将一个大任务，分解成多次连续的开发，本质就是逐步改进。开发者先快速发布一个有效但不完美的最简版本，然后不断迭代。每一次迭代都包含规划、设计、编码、测试、评估五个步骤，不断改进产品，添加新功能。通过频繁的发布，以及跟踪对前一次迭代的反馈，最终接近较完善的产品形态。</p><h2 id="二、增量开发"><a href="#二、增量开发" class="headerlink" title="二、增量开发"></a>二、增量开发</h2><p>迭代开发只是要求将开发分成多个迭代，并没有回答一个重要的问题：怎么划分迭代，哪个任务在这个迭代，哪个任务在下个迭代？这时，一般采用”增量开发”（incremental development）划分迭代。</p><p>所谓”增量开发”，指的是软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019030703.jpg" alt=""></p><p>举例来说，房产公司开发一个10栋楼的小区。如果采用增量开发的模式，该公司第一个迭代就是交付一号楼，第二个迭代交付二号楼……每个迭代都是完成一栋完整的楼。而不是第一个迭代挖好10栋楼的地基，第二个迭代建好每栋楼的骨架，第三个迭代架设屋顶……</p><p>增量开发加上迭代开发，才算真正的敏捷开发。</p><h2 id="三、敏捷开发的好处"><a href="#三、敏捷开发的好处" class="headerlink" title="三、敏捷开发的好处"></a>三、敏捷开发的好处</h2><h3 id="3-1-早期交付"><a href="#3-1-早期交付" class="headerlink" title="3.1 早期交付"></a>3.1 早期交付</h3><p>敏捷开发的第一个好处，就是早期交付，从而大大降低成本。</p><p>还是以上一节的房产公司为例，如果按照传统的”瀑布开发模式”，先挖10栋楼的地基、再盖骨架、然后架设屋顶，每个阶段都等到前一个阶段完成后开始，可能需要两年才能一次性交付10栋楼。也就是说，如果不考虑预售，该项目必须等到两年后才能回款。</p><p>敏捷开发是六个月后交付一号楼，后面每两个月交付一栋楼。因此，半年就能回款10%，后面每个月都会有现金流，资金压力就大大减轻了。</p><h3 id="3-2-降低风险"><a href="#3-2-降低风险" class="headerlink" title="3.2 降低风险"></a>3.2 降低风险</h3><p>敏捷开发的第二个好处是，及时了解市场需求，降低产品不适用的风险。</p><p>请想一想，哪一种情况损失比较小：10栋楼都造好以后，才发现卖不出去，还是造好第一栋楼，就发现卖不出去，从而改进或停建后面9栋楼？</p><p>对于软件项目来说，先有一个原型产品，了解市场的接受程度，往往是项目成功的关键。有一本书叫做《梦断代码》，副标题就是”20+个程序员，三年时间，4732个bug，100+万美元，最后失败的故事”，这就是没有采用敏捷开发的结果。相反的，Instagram 最初是一个地理位置打卡 App，后来发现用户不怎么在乎地理位置，更喜欢上传照片，就改做照片上传软件，结果成了独角兽。</p><p>由于敏捷开发可以不断试错，找出对业务最重要的功能，然后通过迭代，调整软件方向。相比传统方式，大大增加了产品成功的可能性。如果市场需求不确定，或者你对该领域不熟悉，那么敏捷开发几乎是唯一可行的应对方式。</p><h2 id="四、如何进行每一次迭代"><a href="#四、如何进行每一次迭代" class="headerlink" title="四、如何进行每一次迭代"></a>四、如何进行每一次迭代</h2><p>虽然敏捷开发将软件开发分成多个迭代，但是也要求，每次迭代都是一个完整的软件开发周期，必须按照软件工程的方法论，进行正规的流程管理。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019030704.jpg" alt=""></p><p>具体来说，每次迭代都必须依次完成以下五个步骤。</p><blockquote><ol><li><p>需求分析（requirements analysis）</p></li><li><p>设计（design）</p></li><li><p>编码（coding）</p></li><li><p>测试（testing）</p></li><li><p>部署和评估（deployment / evaluation）</p></li></ol></blockquote><p>每个迭代大约持续2~6周。</p><h2 id="五、敏捷开发的价值观"><a href="#五、敏捷开发的价值观" class="headerlink" title="五、敏捷开发的价值观"></a>五、敏捷开发的价值观</h2><p>《敏捷软件开发宣言》里面提到四个价值观。</p><blockquote><ul><li><p>程序员的主观能动性，以及程序员之间的互动，优于既定流程和工具。</p></li><li><p>软件能够运行，优于详尽的文档。</p></li><li><p>跟客户的密切协作，优于合同和谈判。</p></li><li><p>能够响应变化，优于遵循计划。</p></li></ul></blockquote><h2 id="六、十二条原则"><a href="#六、十二条原则" class="headerlink" title="六、十二条原则"></a>六、十二条原则</h2><p>该宣言还提出十二条敏捷开发的原则。</p><ol><li><p>通过早期和持续交付有价值的软件，实现客户满意度。</p></li><li><p>欢迎不断变化的需求，即使是在项目开发的后期。要善于利用需求变更，帮助客户获得竞争优势。</p></li><li><p>不断交付可用的软件，周期通常是几周，越短越好。</p></li><li><p>项目过程中，业务人员与开发人员必须在一起工作。</p></li><li><p>项目必须围绕那些有内在动力的个人而建立，他们应该受到信任。</p></li><li><p>面对面交谈是最好的沟通方式。</p></li><li><p>可用性是衡量进度的主要指标。</p></li><li><p>提倡可持续的开发，保持稳定的进展速度。</p></li><li><p>不断关注技术是否优秀，设计是否良好。</p></li><li><p>简单性至关重要，尽最大可能减少不必要的工作。</p></li><li><p>最好的架构、要求和设计，来自团队内部自发的认识。</p></li><li><p>团队要定期反思如何更有效，并相应地进行调整。</p></li></ol><h2 id="七、参考链接"><a href="#七、参考链接" class="headerlink" title="七、参考链接"></a>七、参考链接</h2><ul><li><p><a href="https://www.mindk.com/blog/iterative-development/" target="_blank" rel="noopener">Iterative development: the secret to great product launches</a>, Pavlo Zinchenko</p></li><li><p><a href="https://en.wikipedia.org/wiki/Agile_software_development" target="_blank" rel="noopener">Agile software development</a>, Wikipedia</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 项目管理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth 2.0 的四种方式！</title>
      <link href="/2020/04/01/OAuth_2.0_%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/04/01/OAuth_2.0_%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2019/04/" target="_blank" rel="noopener">2019年4月 9日</a></p><p><a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html" target="_blank" rel="noopener">上一篇文章</a>介绍了 OAuth 2.0 是一种授权机制，主要用来颁发令牌（token）。本文接着介绍颁发令牌的实务操作。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040901.jpg" alt=""></p><p>下面我假定，你已经理解了 OAuth 2.0 的含义和设计思想，否则请先阅读这个系列的<a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html" target="_blank" rel="noopener">上一篇文章</a>。</p><blockquote><p>进入正文之前，插播一则活动消息。</p><p>4月22日（周一）到4月29日（下周一），每天晚上八点都有两小时的免费直播课，体系化介绍高级前端开发知识，网易云课堂主办。<a href="http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html#support" target="_blank" rel="noopener">详细介绍</a>请看本文结尾，欢迎关注。</p></blockquote><h2 id="RFC-6749"><a href="#RFC-6749" class="headerlink" title="RFC 6749"></a>RFC 6749</h2><p>OAuth 2.0 的标准是 <a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="noopener">RFC 6749</a> 文件。该文件先解释了 OAuth 是什么。</p><blockquote><p>OAuth 引入了一个授权层，用来分离两种不同的角色：客户端和资源所有者。……资源所有者同意以后，资源服务器可以向客户端颁发令牌。客户端通过令牌，去请求数据。</p></blockquote><p>这段话的意思就是，OAuth 的核心就是向第三方应用颁发令牌。然后，RFC 6749 接着写道：</p><blockquote><p>（由于互联网有多种场景，）本标准定义了获得令牌的四种授权方式（authorization grant ）。</p></blockquote><p>也就是说，OAuth 2.0 规定了四种获得令牌的流程。你可以选择最适合自己的那一种，向第三方应用颁发令牌。下面就是这四种授权方式。</p><blockquote><ul><li><p>授权码（authorization-code）</p></li><li><p>隐藏式（implicit）</p></li><li><p>密码式（password）：</p></li><li><p>客户端凭证（client credentials）</p></li></ul></blockquote><p>注意，不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：客户端 ID（client ID）和客户端密钥（client secret）。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的。</p><h2 id="第一种授权方式：授权码"><a href="#第一种授权方式：授权码" class="headerlink" title="第一种授权方式：授权码"></a>第一种授权方式：授权码</h2><p>授权码（authorization code）方式，指的是第三方应用先申请一个授权码，然后再用该码获取令牌。</p><p>这种方式是最常用的流程，安全性也最高，它适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。</p><p>第一步，A 网站提供一个链接，用户点击后就会跳转到 B 网站，授权用户数据给 A 网站使用。下面就是 A 网站跳转 B 网站的一个示意链接。</p><blockquote><p><a href="https://b.com/oauth/authorize" target="_blank" rel="noopener">https://b.com/oauth/authorize</a>?<br>  response_type=code&amp;<br>  client_id=CLIENT_ID&amp;<br>  redirect_uri=CALLBACK_URL&amp;<br>  scope=read</p></blockquote><p>上面 URL 中，<code>response_type</code>参数表示要求返回授权码（<code>code</code>），<code>client_id</code>参数让 B 知道是谁在请求，<code>redirect_uri</code>参数是 B 接受或拒绝请求后的跳转网址，<code>scope</code>参数表示要求的授权范围（这里是只读）。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040902.jpg" alt=""></p><p>第二步，用户跳转后，B 网站会要求用户登录，然后询问是否同意给予 A 网站授权。用户表示同意，这时 B 网站就会跳回<code>redirect_uri</code>参数指定的网址。跳转时，会传回一个授权码，就像下面这样。</p><blockquote><p><a href="https://a.com/callback?code=AUTHORIZATION_CODE" target="_blank" rel="noopener">https://a.com/callback?code=AUTHORIZATION_CODE</a></p></blockquote><p>上面 URL 中，<code>code</code>参数就是授权码。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040907.jpg" alt=""></p><p>第三步，A 网站拿到授权码以后，就可以在后端，向 B 网站请求令牌。</p><blockquote><p><a href="https://b.com/oauth/token" target="_blank" rel="noopener">https://b.com/oauth/token</a>?<br> client_id=CLIENT_ID&amp;<br> client_secret=CLIENT_SECRET&amp;<br> grant_type=authorization_code&amp;<br> code=AUTHORIZATION_CODE&amp;<br> redirect_uri=CALLBACK_URL</p></blockquote><p>上面 URL 中，<code>client_id</code>参数和<code>client_secret</code>参数用来让 B 确认 A 的身份（<code>client_secret</code>参数是保密的，因此只能在后端发请求），<code>grant_type</code>参数的值是<code>AUTHORIZATION_CODE</code>，表示采用的授权方式是授权码，<code>code</code>参数是上一步拿到的授权码，<code>redirect_uri</code>参数是令牌颁发后的回调网址。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040904.jpg" alt=""></p><p>第四步，B 网站收到请求以后，就会颁发令牌。具体做法是向<code>redirect_uri</code>指定的网址，发送一段 JSON 数据。</p><blockquote><p>{<br>  “access_token”:”ACCESS_TOKEN”,<br>  “token_type”:”bearer”,<br>  “expires_in”:2592000,<br>  “refresh_token”:”REFRESH_TOKEN”,<br>  “scope”:”read”,<br>  “uid”:100101,<br>  “info”:{…}}</p></blockquote><p>上面 JSON 数据中，<code>access_token</code>字段就是令牌，A 网站在后端拿到了。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040905.jpg" alt=""></p><h2 id="第二种方式：隐藏式"><a href="#第二种方式：隐藏式" class="headerlink" title="第二种方式：隐藏式"></a>第二种方式：隐藏式</h2><p>有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。RFC 6749 就规定了第二种方式，允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为（授权码）”隐藏式”（implicit）。</p><p>第一步，A 网站提供一个链接，要求用户跳转到 B 网站，授权用户数据给 A 网站使用。</p><blockquote><p><a href="https://b.com/oauth/authorize" target="_blank" rel="noopener">https://b.com/oauth/authorize</a>?<br>  response_type=token&amp;<br>  client_id=CLIENT_ID&amp;<br>  redirect_uri=CALLBACK_URL&amp;<br>  scope=read</p></blockquote><p>上面 URL 中，<code>response_type</code>参数为<code>token</code>，表示要求直接返回令牌。</p><p>第二步，用户跳转到 B 网站，登录后同意给予 A 网站授权。这时，B 网站就会跳回<code>redirect_uri</code>参数指定的跳转网址，并且把令牌作为 URL 参数，传给 A 网站。</p><blockquote><p><a href="https://a.com/callback#token=ACCESS_TOKEN" target="_blank" rel="noopener">https://a.com/callback#token=ACCESS_TOKEN</a></p></blockquote><p>上面 URL 中，<code>token</code>参数就是令牌，A 网站因此直接在前端拿到令牌。</p><p>注意，令牌的位置是 URL 锚点（fragment），而不是查询字符串（querystring），这是因为 OAuth 2.0 允许跳转网址是 HTTP 协议，因此存在”中间人攻击”的风险，而浏览器跳转时，锚点不会发到服务器，就减少了泄漏令牌的风险。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040906.jpg" alt=""></p><p>这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。</p><h2 id="第三种方式：密码式"><a href="#第三种方式：密码式" class="headerlink" title="第三种方式：密码式"></a>第三种方式：密码式</h2><p>如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为”密码式”（password）。</p><p>第一步，A 网站要求用户提供 B 网站的用户名和密码。拿到以后，A 就直接向 B 请求令牌。</p><blockquote><p><a href="https://oauth.b.com/token" target="_blank" rel="noopener">https://oauth.b.com/token</a>?<br>  grant_type=password&amp;<br>  username=USERNAME&amp;<br>  password=PASSWORD&amp;<br>  client_id=CLIENT_ID</p></blockquote><p>上面 URL 中，<code>grant_type</code>参数是授权方式，这里的<code>password</code>表示”密码式”，<code>username</code>和<code>password</code>是 B 的用户名和密码。</p><p>第二步，B 网站验证身份通过后，直接给出令牌。注意，这时不需要跳转，而是把令牌放在 JSON 数据里面，作为 HTTP 回应，A 因此拿到令牌。</p><p>这种方式需要用户给出自己的用户名/密码，显然风险很大，因此只适用于其他授权方式都无法采用的情况，而且必须是用户高度信任的应用。</p><h2 id="第四种方式：凭证式"><a href="#第四种方式：凭证式" class="headerlink" title="第四种方式：凭证式"></a>第四种方式：凭证式</h2><p>最后一种方式是凭证式（client credentials），适用于没有前端的命令行应用，即在命令行下请求令牌。</p><p>第一步，A 应用在命令行向 B 发出请求。</p><blockquote><p><a href="https://oauth.b.com/token" target="_blank" rel="noopener">https://oauth.b.com/token</a>?<br>  grant_type=client_credentials&amp;<br>  client_id=CLIENT_ID&amp;<br>  client_secret=CLIENT_SECRET</p></blockquote><p>上面 URL 中，<code>grant_type</code>参数等于<code>client_credentials</code>表示采用凭证式，<code>client_id</code>和<code>client_secret</code>用来让 B 确认 A 的身份。</p><p>第二步，B 网站验证通过以后，直接返回令牌。</p><p>这种方式给出的令牌，是针对第三方应用的，而不是针对用户的，即有可能多个用户共享同一个令牌。</p><h2 id="令牌的使用"><a href="#令牌的使用" class="headerlink" title="令牌的使用"></a>令牌的使用</h2><p>A 网站拿到令牌以后，就可以向 B 网站的 API 请求数据了。</p><p>此时，每个发到 API 的请求，都必须带有令牌。具体做法是在请求的头信息，加上一个<code>Authorization</code>字段，令牌就放在这个字段里面。</p><blockquote><p>curl -H “Authorization: Bearer ACCESS_TOKEN” \“<a href="https://api.b.com&quot;" target="_blank" rel="noopener">https://api.b.com&quot;</a></p></blockquote><p>上面命令中，<code>ACCESS_TOKEN</code>就是拿到的令牌。</p><h2 id="更新令牌"><a href="#更新令牌" class="headerlink" title="更新令牌"></a>更新令牌</h2><p>令牌的有效期到了，如果让用户重新走一遍上面的流程，再申请一个新的令牌，很可能体验不好，而且也没有必要。OAuth 2.0 允许用户自动更新令牌。</p><p>具体方法是，B 网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据，另一个用于获取新的令牌（refresh token 字段）。令牌到期前，用户使用 refresh token 发一个请求，去更新令牌。</p><blockquote><p><a href="https://b.com/oauth/token" target="_blank" rel="noopener">https://b.com/oauth/token</a>?<br>  grant_type=refresh_token&amp;<br>  client_id=CLIENT_ID&amp;<br>  client_secret=CLIENT_SECRET&amp;<br>  refresh_token=REFRESH_TOKEN</p></blockquote><p>上面 URL 中，<code>grant_type</code>参数为<code>refresh_token</code>表示要求更新令牌，<code>client_id</code>参数和<code>client_secret</code>参数用于确认身份，<code>refresh_token</code>参数就是用于更新令牌的令牌。</p><p>B 网站验证通过以后，就会颁发新的令牌。</p><p>写到这里，颁发令牌的四种方式就介绍完了。<a href="http://www.ruanyifeng.com/blog/2019/04/github-oauth.html" target="_blank" rel="noopener">下一篇文章</a>会编写一个真实的 Demo，演示如何通过 OAuth 2.0 向 GitHub 的 API 申请令牌，然后再用令牌获取数据。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 认证授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub 第三方登录示例教程！</title>
      <link href="/2020/04/01/GitHub_OAuth_%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E7%A4%BA%E4%BE%8B%E6%95%99%E7%A8%8B/"/>
      <url>/2020/04/01/GitHub_OAuth_%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E7%A4%BA%E4%BE%8B%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2019/04/" target="_blank" rel="noopener">2019年4月21日</a></p><p>这组 OAuth 系列教程，<a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html" target="_blank" rel="noopener">第一篇</a>介绍了基本概念，<a href="http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html" target="_blank" rel="noopener">第二篇</a>介绍了获取令牌的四种方式，今天演示一个实例，如何通过 OAuth 获取 API 数据。</p><p>很多网站登录时，允许使用第三方网站的身份，这称为”第三方登录”。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019042101.jpg" alt=""></p><p>下面就以 GitHub 为例，写一个最简单的应用，演示第三方登录。</p><h2 id="一、第三方登录的原理"><a href="#一、第三方登录的原理" class="headerlink" title="一、第三方登录的原理"></a>一、第三方登录的原理</h2><p>所谓第三方登录，实质就是 OAuth 授权。用户想要登录 A 网站，A 网站让用户提供第三方网站的数据，证明自己的身份。获取第三方网站的身份数据，就需要 OAuth 授权。</p><p>举例来说，A 网站允许 GitHub 登录，背后就是下面的流程。</p><blockquote><ol><li><p>A 网站让用户跳转到 GitHub。</p></li><li><p>GitHub 要求用户登录，然后询问”A 网站要求获得 xx 权限，你是否同意？”</p></li><li><p>用户同意，GitHub 就会重定向回 A 网站，同时发回一个授权码。</p></li><li><p>A 网站使用授权码，向 GitHub 请求令牌。</p></li><li><p>GitHub 返回令牌.</p></li><li><p>A 网站使用令牌，向 GitHub 请求用户数据。</p></li></ol></blockquote><p>下面就是这个流程的代码实现。</p><h2 id="二、应用登记"><a href="#二、应用登记" class="headerlink" title="二、应用登记"></a>二、应用登记</h2><p>一个应用要求 OAuth 授权，必须先到对方网站登记，让对方知道是谁在请求。</p><p>所以，你要先去 GitHub 登记一下。当然，我已经登记过了，你使用我的登记信息也可以，但为了完整走一遍流程，还是建议大家自己登记。这是免费的。</p><p>访问这个<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">网址</a>，填写登记表。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019042102.jpg" alt=""></p><p>应用的名称随便填，主页 URL 填写<code>http://localhost:8080</code>，跳转网址填写 <code>http://localhost:8080/oauth/redirect</code>。</p><p>提交表单以后，GitHub 应该会返回客户端 ID（client ID）和客户端密钥（client secret），这就是应用的身份识别码。</p><h2 id="三、示例仓库"><a href="#三、示例仓库" class="headerlink" title="三、示例仓库"></a>三、示例仓库</h2><p>我写了一个<a href="https://github.com/ruanyf/node-oauth-demo" target="_blank" rel="noopener">代码仓库</a>，请将它克隆到本地。</p><blockquote><p>$ git clone <a href="mailto:git@github.com">git@github.com</a>:ruanyf/node-oauth-demo.git<br>$ cd node-oauth-demo</p></blockquote><p>两个配置项要改一下，写入上一步的身份识别码。</p><blockquote><ul><li><p><a href="https://github.com/ruanyf/node-oauth-demo/blob/master/index.js#L3" target="_blank" rel="noopener"><code>index.js</code></a>：改掉变量<code>clientID</code> and <code>clientSecret</code></p></li><li><p><a href="https://github.com/ruanyf/node-oauth-demo/blob/master/public/index.html#L16" target="_blank" rel="noopener"><code>public/index.html</code></a>：改掉变量<code>client_id</code></p></li></ul></blockquote><p>然后，安装依赖。</p><blockquote><p>$ npm install</p></blockquote><p>启动服务。</p><blockquote><p>$ node index.js</p></blockquote><p>浏览器访问<code>http://localhost:8080</code>，就可以看到这个示例了。</p><h2 id="四、浏览器跳转-GitHub"><a href="#四、浏览器跳转-GitHub" class="headerlink" title="四、浏览器跳转 GitHub"></a>四、浏览器跳转 GitHub</h2><p>示例的首页很简单，就是一个链接，让用户跳转到 GitHub。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019042103.jpg" alt=""></p><p>跳转的 URL 如下。</p><blockquote><p><a href="https://github.com/login/oauth/authorize" target="_blank" rel="noopener">https://github.com/login/oauth/authorize</a>?<br>  client_id=7e015d8ce32370079895&amp;<br>  redirect_uri=<a href="http://localhost:8080/oauth/redirect" target="_blank" rel="noopener">http://localhost:8080/oauth/redirect</a></p></blockquote><p>这个 URL 指向 GitHub 的 OAuth 授权网址，带有两个参数：<code>client_id</code>告诉 GitHub 谁在请求，<code>redirect_uri</code>是稍后跳转回来的网址。</p><p>用户点击到了 GitHub，GitHub 会要求用户登录，确保是本人在操作。</p><h2 id="五、授权码"><a href="#五、授权码" class="headerlink" title="五、授权码"></a>五、授权码</h2><p>登录后，GitHub 询问用户，该应用正在请求数据，你是否同意授权。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019042104.png" alt=""></p><p>用户同意授权， GitHub 就会跳转到<code>redirect_uri</code>指定的跳转网址，并且带上授权码，跳转回来的 URL 就是下面的样子。</p><blockquote><p><a href="http://localhost:8080/oauth/redirect" target="_blank" rel="noopener">http://localhost:8080/oauth/redirect</a>?<br>  code=859310e7cecc9196f4af</p></blockquote><p>后端收到这个请求以后，就拿到了授权码（<code>code</code>参数）。</p><h2 id="六、后端实现"><a href="#六、后端实现" class="headerlink" title="六、后端实现"></a>六、后端实现</h2><p>示例的<a href="https://github.com/ruanyf/node-oauth-demo/blob/master/index.js" target="_blank" rel="noopener">后端</a>采用 Koa 框架编写，具体语法请看<a href="http://www.ruanyifeng.com/blog/2017/08/koa.html" target="_blank" rel="noopener">教程</a>。</p><p>这里的关键是针对<code>/oauth/redirect</code>的请求，编写一个<a href="https://github.com/ruanyf/node-oauth-demo/blob/master/index.js#L16" target="_blank" rel="noopener">路由</a>，完成 OAuth 认证。</p><blockquote><p>const oauth = async ctx =&gt; {<br>  // …};app.use(route.get(‘/oauth/redirect’, oauth));</p></blockquote><p>上面代码中，<code>oauth</code>函数就是路由的处理函数。下面的代码都写在这个函数里面。</p><p>路由函数的第一件事，是从 URL 取出授权码。</p><blockquote><p>const requestToken = ctx.request.query.code;</p></blockquote><h2 id="七、令牌"><a href="#七、令牌" class="headerlink" title="七、令牌"></a>七、令牌</h2><p>后端使用这个授权码，向 GitHub 请求令牌。</p><blockquote><p>const tokenResponse = await axios({<br>  method: ‘post’,<br>  url: ‘<a href="https://github.com/login/oauth/access_token?&#39;" target="_blank" rel="noopener">https://github.com/login/oauth/access_token?&#39;</a> +<br>    `client_id=${clientID}&amp;` +<br>    `client_secret=${clientSecret}&amp;` +<br>    `code=${requestToken}`,<br>  headers: {<br>    accept: ‘application/json’<br>  }});</p></blockquote><p>上面代码中，GitHub 的令牌接口<code>https://github.com/login/oauth/access_token</code>需要提供三个参数。</p><blockquote><ul><li><p><code>client_id</code>：客户端的 ID</p></li><li><p><code>client_secret</code>：客户端的密钥</p></li><li><p><code>code</code>：授权码</p></li></ul></blockquote><p>作为回应，GitHub 会返回一段 JSON 数据，里面包含了令牌<code>accessToken</code>。</p><blockquote><p>const accessToken = tokenResponse.data.access_token;</p></blockquote><h2 id="八、API-数据"><a href="#八、API-数据" class="headerlink" title="八、API 数据"></a>八、API 数据</h2><p>有了令牌以后，就可以向 API 请求数据了。</p><blockquote><p>const result = await axios({<br>  method: ‘get’,<br>  url: `<a href="https://api.github.com/user\`" target="_blank" rel="noopener">https://api.github.com/user\`</a>,<br>  headers: {<br>    accept: ‘application/json’,<br>    Authorization: `token ${accessToken}`  }});</p></blockquote><p>上面代码中，GitHub API 的地址是<code>https://api.github.com/user</code>，请求的时候必须在 HTTP 头信息里面带上令牌<code>Authorization: token 361507da</code>。</p><p>然后，就可以拿到用户数据，得到用户的身份。</p><blockquote><p>const name = result.data.name;ctx.response.redirect(<code>/welcome.html?name=${name}</code>);</p></blockquote><p>（完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 认证授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OAuth 2.0 的一个简单解释！</title>
      <link href="/2020/04/01/OAuth_2.0_%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/"/>
      <url>/2020/04/01/OAuth_2.0_%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2019/04/" target="_blank" rel="noopener">2019年4月 4日</a></p><p><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">OAuth 2.0</a> 是目前最流行的授权机制，用来授权第三方应用，获取用户数据。</p><p>这个标准比较抽象，使用了很多术语，初学者不容易理解。其实说起来并不复杂，下面我就通过一个简单的类比，帮助大家轻松理解，OAuth 2.0 到底是什么。</p><h2 id="一、快递员问题"><a href="#一、快递员问题" class="headerlink" title="一、快递员问题"></a>一、快递员问题</h2><p>我住在一个大型的居民小区。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040401.jpg" alt=""></p><p>小区有门禁系统。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040402.jpg" alt=""></p><p>进入的时候需要输入密码。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040403.jpg" alt=""></p><p>我经常网购和外卖，每天都有快递员来送货。我必须找到一个办法，让快递员通过门禁系统，进入小区。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040404.jpg" alt=""></p><p>如果我把自己的密码，告诉快递员，他就拥有了与我同样的权限，这样好像不太合适。万一我想取消他进入小区的权力，也很麻烦，我自己的密码也得跟着改了，还得通知其他的快递员。</p><p>有没有一种办法，让快递员能够自由进入小区，又不必知道小区居民的密码，而且他的唯一权限就是送货，其他需要密码的场合，他都没有权限？</p><h2 id="二、授权机制的设计"><a href="#二、授权机制的设计" class="headerlink" title="二、授权机制的设计"></a>二、授权机制的设计</h2><p>于是，我设计了一套授权机制。</p><p>第一步，门禁系统的密码输入器下面，增加一个按钮，叫做”获取授权”。快递员需要首先按这个按钮，去申请授权。</p><p>第二步，他按下按钮以后，屋主（也就是我）的手机就会跳出对话框：有人正在要求授权。系统还会显示该快递员的姓名、工号和所属的快递公司。</p><p>我确认请求属实，就点击按钮，告诉门禁系统，我同意给予他进入小区的授权。</p><p>第三步，门禁系统得到我的确认以后，向快递员显示一个进入小区的令牌（access token）。令牌就是类似密码的一串数字，只在短期内（比如七天）有效。</p><p>第四步，快递员向门禁系统输入令牌，进入小区。</p><p>有人可能会问，为什么不是远程为快递员开门，而要为他单独生成一个令牌？这是因为快递员可能每天都会来送货，第二天他还可以复用这个令牌。另外，有的小区有多重门禁，快递员可以使用同一个令牌通过它们。</p><h2 id="三、互联网场景"><a href="#三、互联网场景" class="headerlink" title="三、互联网场景"></a>三、互联网场景</h2><p>我们把上面的例子搬到互联网，就是 OAuth 的设计了。</p><p>首先，居民小区就是储存用户数据的网络服务。比如，微信储存了我的好友信息，获取这些信息，就必须经过微信的”门禁系统”。</p><p>其次，快递员（或者说快递公司）就是第三方应用，想要穿过门禁系统，进入小区。</p><p>最后，我就是用户本人，同意授权第三方应用进入小区，获取我的数据。</p><p>简单说，OAuth 就是一种授权机制。数据的所有者告诉系统，同意授权第三方应用进入系统，获取这些数据。系统从而产生一个短期的进入令牌（token），用来代替密码，供第三方应用使用。</p><h2 id="四、令牌与密码"><a href="#四、令牌与密码" class="headerlink" title="四、令牌与密码"></a>四、令牌与密码</h2><p>令牌（token）与密码（password）的作用是一样的，都可以进入系统，但是有三点差异。</p><p>（1）令牌是短期的，到期会自动失效，用户自己无法修改。密码一般长期有效，用户不修改，就不会发生变化。</p><p>（2）令牌可以被数据所有者撤销，会立即失效。以上例而言，屋主可以随时取消快递员的令牌。密码一般不允许被他人撤销。</p><p>（3）令牌有权限范围（scope），比如只能进小区的二号门。对于网络服务来说，只读令牌就比读写令牌更安全。密码一般是完整权限。</p><p>上面这些设计，保证了令牌既可以让第三方应用获得权限，同时又随时可控，不会危及系统安全。这就是 OAuth 2.0 的优点。</p><p>注意，只要知道了令牌，就能进入系统。系统一般不会再次确认身份，所以令牌必须保密，泄漏令牌与泄漏密码的后果是一样的。 这也是为什么令牌的有效期，一般都设置得很短的原因。</p><p>OAuth 2.0 对于如何颁发令牌的细节，规定得非常详细。具体来说，一共分成四种授权类型（authorization grant），即四种颁发令牌的方式，适用于不同的互联网场景。<a href="http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html" target="_blank" rel="noopener">下一篇文章</a>，我就来介绍这四种类型，并给出代码实例。</p><p>（完）</p><h3 id="文档信息"><a href="#文档信息" class="headerlink" title="文档信息"></a>文档信息</h3><ul><li><p>版权声明：自由转载-非商用-非衍生-保持署名（<a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" target="_blank" rel="noopener">创意共享3.0许可证</a>）</p></li><li><p>发表日期： 2019年4月 4日</p></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 认证授权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【57期】面试官问，MySQL建索引需要遵循哪些原则呢？</title>
      <link href="/2020/03/25/%E3%80%9057%E6%9C%9F%E3%80%91%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%EF%BC%8CMySQL%E5%BB%BA%E7%B4%A2%E5%BC%95%E9%9C%80%E8%A6%81%E9%81%B5%E5%BE%AA%E5%93%AA%E4%BA%9B%E5%8E%9F%E5%88%99%E5%91%A2%EF%BC%9F/"/>
      <url>/2020/03/25/%E3%80%9057%E6%9C%9F%E3%80%91%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%EF%BC%8CMySQL%E5%BB%BA%E7%B4%A2%E5%BC%95%E9%9C%80%E8%A6%81%E9%81%B5%E5%BE%AA%E5%93%AA%E4%BA%9B%E5%8E%9F%E5%88%99%E5%91%A2%EF%BC%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-选择唯一性索引"><a href="#1-选择唯一性索引" class="headerlink" title="1.选择唯一性索引"></a>1.选择唯一性索引</h2><p>唯一性索引的值是唯一的，可以更快速的通过该索引来确定某条记录。例如，学生表中学号是具有唯一性的字段。为该字段建立唯一性索引可以很快的确定某个学生的信息。如果使用姓名的话，可能存在同名现象，从而降低查询速度。</p><h2 id="2-为经常需要排序、分组和联合操作的字段建立索引"><a href="#2-为经常需要排序、分组和联合操作的字段建立索引" class="headerlink" title="2.为经常需要排序、分组和联合操作的字段建立索引"></a>2.为经常需要排序、分组和联合操作的字段建立索引</h2><p>经常需要ORDER BY、GROUP BY、DISTINCT和UNION等操作的字段，排序操作会浪费很多时间。如果为其建立索引，可以有效地避免排序操作。</p><h2 id="3-为常作为查询条件的字段建立索引"><a href="#3-为常作为查询条件的字段建立索引" class="headerlink" title="3.为常作为查询条件的字段建立索引"></a>3.为常作为查询条件的字段建立索引</h2><p>如果某个字段经常用来做查询条件，那么该字段的查询速度会影响整个表的查询速度。因此，为这样的字段建立索引，可以提高整个表的查询速度。</p><h2 id="4-限制索引的数目"><a href="#4-限制索引的数目" class="headerlink" title="4.限制索引的数目"></a>4.限制索引的数目</h2><p>索引的数目不是越多越好。每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。修改表时，对索引的重构和更新很麻烦。越多的索引，会使更新表变得很浪费时间。</p><h2 id="5-尽量使用数据量少的索引"><a href="#5-尽量使用数据量少的索引" class="headerlink" title="5.尽量使用数据量少的索引"></a>5.尽量使用数据量少的索引</h2><p>如果索引的值很长，那么查询的速度会受到影响。例如，对一个CHAR(100)类型的字段进行全文检索需要的时间肯定要比对CHAR(10)类型的字段需要的时间要多。</p><h2 id="6-尽量使用前缀来索引"><a href="#6-尽量使用前缀来索引" class="headerlink" title="6.尽量使用前缀来索引"></a>6.尽量使用前缀来索引</h2><p>如果索引字段的值很长，最好使用值的前缀来索引。例如，TEXT和BLOG类型的字段，进行全文检索会很浪费时间。如果只检索字段的前面的若干个字符，这样可以提高检索速度。</p><h2 id="7-删除不再使用或者很少使用的索引"><a href="#7-删除不再使用或者很少使用的索引" class="headerlink" title="7.删除不再使用或者很少使用的索引"></a>7.删除不再使用或者很少使用的索引</h2><p>表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。数据库管理员应当定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</p><h2 id="8-最左前缀匹配原则，非常重要的原则。"><a href="#8-最左前缀匹配原则，非常重要的原则。" class="headerlink" title="8.最左前缀匹配原则，非常重要的原则。"></a>8.最左前缀匹配原则，非常重要的原则。</h2><p>mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a 1=”” and=”” b=”2” c=”“&gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><h2 id="9-和in可以乱序。"><a href="#9-和in可以乱序。" class="headerlink" title="9.=和in可以乱序。"></a>9.=和in可以乱序。</h2><p>比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p><h2 id="10-尽量选择区分度高的列作为索引。"><a href="#10-尽量选择区分度高的列作为索引。" class="headerlink" title="10.尽量选择区分度高的列作为索引。"></a>10.尽量选择区分度高的列作为索引。</h2><p>区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就 是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条 记录</p><h2 id="11-索引列不能参与计算，保持列“干净”。"><a href="#11-索引列不能参与计算，保持列“干净”。" class="headerlink" title="11.索引列不能参与计算，保持列“干净”。"></a>11.索引列不能参与计算，保持列“干净”。</h2><p>比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本 太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);</p><h2 id="12-尽量的扩展索引，不要新建索引。"><a href="#12-尽量的扩展索引，不要新建索引。" class="headerlink" title="12.尽量的扩展索引，不要新建索引。"></a>12.尽量的扩展索引，不要新建索引。</h2><p>比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可</p><p>注意：选择索引的最终目的是为了使查询的速度变快。上面给出的原则是最基本的准则，但不能拘泥于上面的准则。读者要在以后的学习和工作中进行不断的实践。根据应用的实际情况进行分析和判断，选择最合适的索引方式。## 目标</p><p>去除 iconfinder 上 icon 的水印</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>利用水印像素点和原图像素点颜色合并的原理，如果拥有加过水印的图片和水印图片，就可以反向推出原图原像素点的颜色；前提是你得拥有他的水印图片</p><p>来源：<a href="https://blog.csdn.net/u013412790/" target="_blank" rel="noopener">https://blog.csdn.net/u013412790/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）</title>
      <link href="/2020/03/25/%E3%80%9063%E6%9C%9F%E3%80%91%E8%B0%88%E8%B0%88MySQL_%E7%B4%A2%E5%BC%95%EF%BC%8CB+%E6%A0%91%E5%8E%9F%E7%90%86%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%BB%BA%E7%B4%A2%E5%BC%95%E7%9A%84%E5%87%A0%E5%A4%A7%E5%8E%9F%E5%88%99%EF%BC%88MySQL%E9%9D%A2%E8%AF%95%E7%AC%AC%E5%85%AD%E5%BC%B9%EF%BC%89/"/>
      <url>/2020/03/25/%E3%80%9063%E6%9C%9F%E3%80%91%E8%B0%88%E8%B0%88MySQL_%E7%B4%A2%E5%BC%95%EF%BC%8CB+%E6%A0%91%E5%8E%9F%E7%90%86%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%BB%BA%E7%B4%A2%E5%BC%95%E7%9A%84%E5%87%A0%E5%A4%A7%E5%8E%9F%E5%88%99%EF%BC%88MySQL%E9%9D%A2%E8%AF%95%E7%AC%AC%E5%85%AD%E5%BC%B9%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>MYSQL一直了解得都不多，之前写sql准备提交生产环境之前的时候，老员工帮我检查了下sql，让修改了一下存储引擎，当时我使用的是Myisam，后面改成InnoDB了。为什么要改成这样，之前都没有听过存储引擎，于是网上查了一下。</p><p>事实上使用不同的存储引擎也是有很大区别的，下面猿友们可以了解一下。</p><h2 id="一、存储引擎的比较"><a href="#一、存储引擎的比较" class="headerlink" title="一、存储引擎的比较"></a>一、存储引擎的比较</h2><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java1-1584537211.png" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><blockquote><p>注：上面提到的B树索引并没有指出是B-Tree和B+Tree索引，但是B-树和B+树的定义是有区别的。</p></blockquote><p>在 MySQL 中，主要有四种类型的索引，分别为：B-Tree 索引， Hash 索引， Fulltext 索引和 R-Tree 索引。</p><p>B-Tree 索引是 MySQL 数据库中使用最为频繁的索引类型，除了 Archive 存储引擎之外的其他所有的存储引擎都支持 B-Tree 索引。Archive 引擎直到 MySQL 5.1 才支持索引，而且只支持索引单个 AUTO_INCREMENT 列。</p><p>不仅仅在 MySQL 中是如此，实际上在其他的很多数据库管理系统中B-Tree 索引也同样是作为最主要的索引类型，这主要是因为 B-Tree 索引的存储结构在数据库的数据检索中有非常优异的表现。</p><p>一般来说， MySQL 中的 B-Tree 索引的物理文件大多都是以 Balance Tree 的结构来存储的，也就是所有实际需要的数据都存放于 Tree 的 Leaf Node(叶子节点) ，而且到任何一个 Leaf Node 的最短路径的长度都是完全相同的，所以我们大家都称之为 B-Tree 索引。</p><p>当然，可能各种数据库（或 MySQL 的各种存储引擎）在存放自己的 B-Tree 索引的时候会对存储结构稍作改造。如 Innodb 存储引擎的 B-Tree 索引实际使用的存储结构实际上是 B+Tree，也就是在 B-Tree 数据结构的基础上做了很小的改造，在每一个Leaf Node 上面出了存放索引键的相关信息之外，还存储了指向与该 Leaf Node 相邻的后一个 LeafNode 的指针信息（增加了顺序访问指针），这主要是为了加快检索多个相邻 Leaf Node 的效率考虑。</p><p>InnoDB是Mysql的默认存储引擎(Mysql5.5.5之前是MyISAM）</p><p>可能对于没有了解过索引的猿友这样看这篇文章十分吃力，这类猿友有必要先对Mysql索引有个大体的了解。</p><p>接下来我们先看看B-树、B+树的概念。弄清楚，为什么加了索引查询速度会加快？</p><h2 id="二、B-树、B-树概念"><a href="#二、B-树、B-树概念" class="headerlink" title="二、B-树、B+树概念"></a>二、B-树、B+树概念</h2><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p>即二叉搜索树：</p><ol><li><p>所有非叶子结点至多拥有两个儿子（Left和Right）；</p></li><li><p>所有结点存储一个关键字；</p></li><li><p>非叶子结点的左指针指向小于其关键字的子树，右指针指向大于其关键字的子树；</p></li></ol><p>如：</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java8-1584537211.jpeg" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h3><p>是一种多路搜索树（并不是二叉的）：</p><ol><li><p>定义任意非叶子结点最多只有M个儿子；且M&gt;2；</p></li><li><p>根结点的儿子数为[2, M]；</p></li><li><p>除根结点以外的非叶子结点的儿子数为[M/2, M]；</p></li><li><p>每个结点存放至少M/2-1（取上整）和至多M-1个关键字；（至少2个关键字）</p></li><li><p>非叶子结点的关键字个数=指向儿子的指针个数-1；</p></li><li><p>非叶子结点的关键字：K[1], K[2], …, K[M-1]；且K[i] &lt; K[i+1]；</p></li><li><p>非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树；</p></li><li><p>所有叶子结点位于同一层；</p></li></ol><p>如：（M=3）</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java7-1584537211.jpeg" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><p>B-树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点；</p><p><strong>B-树的特性：</strong></p><ol><li><p>关键字集合分布在整颗树中；</p></li><li><p>任何一个关键字出现且只出现在一个结点中；</p></li><li><p>搜索有可能在非叶子结点结束；</p></li><li><p>其搜索性能等价于在关键字全集内做一次二分查找；</p></li><li><p>自动层次控制；</p></li></ol><p>由于限制了除根结点以外的非叶子结点，至少含有M/2个儿子，确保了结点的至少利用率。</p><p>所以B-树的性能总是等价于二分查找（与M值无关），也就没有B树平衡的问题；</p><p>由于M/2的限制，在插入结点时，如果结点已满，需要将结点分裂为两个各占M/2的结点；删除结点时，需将两个不足M/2的兄弟结点合并；</p><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+树"></a>B+树</h3><p>B+树是B-树的变体，也是一种多路搜索树：</p><ol><li><p>其定义基本与B-树同，除了：</p></li><li><p>非叶子结点的子树指针与关键字个数相同；</p></li><li><p>非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树（B-树是开区间）；</p></li><li><p>为所有叶子结点增加一个链指针；</p></li><li><p>所有关键字都在叶子结点出现；</p></li></ol><p>如：（M=3）</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java6-1584537211.jpeg" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><p>B+的搜索与B-树也基本相同，区别是B+树只有达到叶子结点才命中（B-树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找；</p><p><strong>B+的特性：</strong></p><ol><li><p>所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；</p></li><li><p>不可能在非叶子结点命中；</p></li><li><p>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；</p></li><li><p>更适合文件索引系统；</p></li></ol><h2 id="三、建索引的几大原则"><a href="#三、建索引的几大原则" class="headerlink" title="三、建索引的几大原则"></a>三、建索引的几大原则</h2><p>1.最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><p>2.=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p><p>3.尽量选择区分度高的列作为索引,区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录</p><p>4.索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);</p><p>5.尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可</p><p><em>来源：blog.csdn.net/u013142781/article/details/51706790</em></p>]]></content>
      
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【58期】盘点那些面试中最常问的MySQL问题，第一弹！</title>
      <link href="/2020/03/25/%E3%80%9058%E6%9C%9F%E3%80%91%E7%9B%98%E7%82%B9%E9%82%A3%E4%BA%9B%E9%9D%A2%E8%AF%95%E4%B8%AD%E6%9C%80%E5%B8%B8%E9%97%AE%E7%9A%84MySQL%E9%97%AE%E9%A2%98%EF%BC%8C%E7%AC%AC%E4%B8%80%E5%BC%B9%EF%BC%81/"/>
      <url>/2020/03/25/%E3%80%9058%E6%9C%9F%E3%80%91%E7%9B%98%E7%82%B9%E9%82%A3%E4%BA%9B%E9%9D%A2%E8%AF%95%E4%B8%AD%E6%9C%80%E5%B8%B8%E9%97%AE%E7%9A%84MySQL%E9%97%AE%E9%A2%98%EF%BC%8C%E7%AC%AC%E4%B8%80%E5%BC%B9%EF%BC%81/</url>
      
        <content type="html"><![CDATA[<h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">1、MySQL中myisam与innodb的区别</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">MyISAM：</strong></p><ul class=" list-paddingleft-2" style="list-style-type: square;">    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">不支持事务，但是每次查询都是原子的；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">支持表级锁，即每次操作对整个表加锁；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">存储表的总行数；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">一个MYISAM表有三个文件：索引文件、表结构文件、数据文件；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;"><span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">采用</span>非<span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">聚集索引，索引文件的数据域存储指向数据文件的指针。</span><span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">辅索引与主索引基本一致，但是辅索引不用保证唯一性。</span></span>        </p>    </li></ul><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">InnoDb：</strong></p><ul class=" list-paddingleft-2" style="list-style-type: square;">    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">支持ACID的事务，支持事务的四种隔离级别；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">支持行级锁及外键约束：因此可以支持写并发；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">不存储总行数；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">一个InnoDb引擎存储在一个文件空间（共享表空间，表大小不受操作系统控制，一个表可能分布在多个文件里），也有可能为多个（设置为独立表空，表大小受操作系统文件大小限制，一般为2G），受操作系统文件大小的限制；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">主键索引采用聚集索引（索引的数据域存储数据文件本身），辅索引的数据域存储主键的值；因此从辅索引查找数据，需要先通过辅索引找到主键值，再访问辅索引；最好使用自增主键，防止插入数据时，为维持B+树结构，文件的大调整。</span>        </p>    </li></ul><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">两者的适用场景：</strong></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    因为MyISAM相对简单所以在效率上要优于InnoDB.如果系统读多，写少。对原子性要求低。那么MyISAM最好的选择。且MyISAM恢复速度快。可直接用备份覆盖恢复。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    如果系统读少，写多的时候，尤其是并发写入高的时候。InnoDB就是首选了。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box;"><em style="box-sizing: border-box;"><span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; color: rgb(255, 0, 0);">扩展问题：myisam与innodb引擎下select count(*)哪个更快，为什么？</span></em></strong></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    知道的童鞋，欢迎留言说出正确答案~</p><h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">2、MySQL INT和CHAR隐式类型转换需要注意什么？</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    主要需要记住下面两点：</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    1、当查询字段是INT类型，如果查询条件为CHAR，将查询条件转换为INT，如果是字符串前导都是数字，将截取前导数字用来比较，如果没有前导数字，则转换为0。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">2.、当查询字段是CHAR/VARCHAR类型，如果查询条件为INT，将查询字段</span>转<span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">换为INT再进行比较，可能会造成全表扫描。</span></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">答案解析</strong></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    有如下一张测试表product，id为int类型，name为varchar类型。</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">+----+----------+| id | name   |+----+----------+|  1 | apple   ||  2 | banana ||  3 | 99cat   |+----+----------+</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    情况1:</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">// 查询条件转化为数字1再比较mysql&gt; select * from product where id = &#39;1abc23&#39;;+----+---------+| id | name  |+----+---------+|  1 | apple  |+----+---------+</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    情况2:</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">// 查询字段全部转化成数字，id:1和id:2字段值转化为0，id:3转化成99，再比较mysql&gt; select * from product where name=0;+----+----------+| id | name   |+----+----------+|  1 | apple   ||  2 | banana |+----+----------+</pre><h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">3、MySQL 如何高效率随机获取N条数据？</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    假设表叫做mm_account。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    ID连续的情况下（注意不能带where，否则结果不好）：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT *FROM `mm_account` AS t1 JOIN (SELECT ROUND(RAND() * (SELECT MAX(id) FROM `mm_account`)) AS id) AS t2WHERE t1.id &gt;= t2.idORDER BY t1.id ASC LIMIT 4;</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    ID不连续的情况下：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT * FROM `mm_account` WHERE id &gt;= (SELECT floor(RAND() * (SELECT MAX(id) FROM `mm_account`)))  and city=&quot;city_91&quot; and showSex=1ORDER BY id LIMIT 4;</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    如果有一个字段叫id，最快的方法如下（随机获取5条）：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT * FROM mm_account WHERE id &gt;= ((SELECT MAX(id) FROM mm_account)-(SELECT MIN(id) FROM mm_account)) * RAND() + (SELECT MIN(id) FROM mm_account)limit 5;</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    如果带where语句，上面就不适合了，带where语句请看下面：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT *FROM `mm_account` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `mm_account` where id&lt;1000 )-(SELECT MIN(id) FROM `mm_account` where id&lt;1000 ))+(SELECT MIN(id) FROM `mm_account` where id&lt;1000 )) AS id) AS t2WHERE t1.id &gt;= t2.idORDER BY t1.id LIMIT 5;</pre><h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">4、说说你知道的MySQL的索引类型，并分别简述一下各自的场景。</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">普通索引：</strong>没有任何限制条件的索引，该索引可以在任何数据类型中创建。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">唯一索引：</strong>使用UNIQUE参数可以设置唯一索引。创建该索引时，索引列的值必须唯一，但允许有空值。通过唯一索引，用户可以快速地定位某条记录，主键索引是一种特殊的唯一索引。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">全文索引：</strong>仅可用于 MyISAM 表，针对较大的数据，生成全文索引耗时耗空间。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">空间索引：</strong>只能建立在空间数据类型上。这样可以提高系统获取空间数据类型的效率。仅可用于 MyISAM 表，索引的字段不能为空值。使用SPATIAL参数可以设置索引为空间索引。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">单列索引：</strong>只对应一个字段的索引。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">多列索引：</strong>在表的多个字段上创建一个索引。该索引指向创建时对应的多个字段，用户可以通过这几个字段进行查询，想使用该索引，用户必须使用这些字段中的一个字段。</p><p>    <br/></p>]]></content>
      
      
      
        <tags>
            
            <tag> MYSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POI-Excel的导出导入</title>
      <link href="/2020/03/17/excel/"/>
      <url>/2020/03/17/excel/</url>
      
        <content type="html"><![CDATA[<p><a href="https://996.icu" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/link-996.icu-red.svg" alt="996.icu"></a><br><a href="https://github.com/996icu/996.ICU/blob/master/LICENSE" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/license-Anti%20996-blue.svg" alt="LICENSE"></a></p><h1 id="excel-poi"><a href="#excel-poi" class="headerlink" title="excel-poi"></a>excel-poi</h1><h4 id="maven使用方式"><a href="#maven使用方式" class="headerlink" title="maven使用方式"></a>maven使用方式</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- excel导入导出 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.stupdit1t&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-excel&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>本工程并没有使用注解方式实现，完全是编码方式。个人觉得注解方式对代码侵入比较大。不如纯编码方便，请以maven版本为主，此源码可能不是最新版本。环境为，POI4.0.1 ，JDK1.8</p></blockquote><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><ol><li>支持严格的单元格校验</li><li>支持数据行的图片导入</li><li>3支持数据回调处理</li><li>03和07都支持</li></ol><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><ol><li>动态表头+表尾</li><li>支持List<Map>数据</li><li>支持图片导出，</li><li>支持复杂对象的导出</li><li>支持回调处理数据后再导出</li><li>支持单元格的样式设置</li><li>支持模板导出</li><li>导出03和07都支持，默认为03，具体看以下使用方式</li><li>支持多sheet导出</li></ol><h3 id="选择03还是07？"><a href="#选择03还是07？" class="headerlink" title="选择03还是07？"></a>选择03还是07？</h3><ol><li>03速度较快，单sheet最大65535行，体积大</li><li>07速度慢，单sheet最大1048576行，体积小</li></ol><h2 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h2><h3 id="导入-1"><a href="#导入-1" class="headerlink" title="导入"></a>导入</h3><p>1.简单的导入:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.获取源文件</span></span><br><span class="line">Workbook wb = WorkbookFactory.create(<span class="keyword">new</span> FileInputStream(<span class="string">"src\\test\\java\\excel\\imports\\import.xlsx"</span>));</span><br><span class="line"><span class="comment">// 2.获取sheet0导入</span></span><br><span class="line">Sheet sheet = wb.getSheetAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 3.生成VO数据</span></span><br><span class="line"><span class="comment">//参数：1.生成VO的class类型;2.校验规则;3.导入的sheet;3.从第几行导入;4.尾部非数据行数量</span></span><br><span class="line">ImportRspInfo&lt;ProjectEvaluate&gt; list = ExcelUtils.parseSheet(ProjectEvaluate<span class="class">.<span class="keyword">class</span>, <span class="title">EvaluateVerifyBuilder</span>.<span class="title">getInstance</span>(), <span class="title">sheet</span>, 3, 2)</span>;</span><br><span class="line"><span class="keyword">if</span> (list.isSuccess()) &#123;</span><br><span class="line"><span class="comment">// 导入没有错误，打印数据</span></span><br><span class="line">System.out.println(JSON.toJSONString(list.getData()));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 导入有错误，打印输出错误</span></span><br><span class="line">System.out.println(list.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.复杂导入，带图片导入，带回调处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.获取源文件</span></span><br><span class="line">Workbook wb = WorkbookFactory.create(<span class="keyword">new</span> FileInputStream(<span class="string">"src\\test\\java\\excel\\imports\\import.xlsx"</span>));</span><br><span class="line"><span class="comment">// 2.获取sheet0导入</span></span><br><span class="line">Sheet sheet = wb.getSheetAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 3.生成VO数据</span></span><br><span class="line"><span class="comment">//参数：1.生成VO的class类型;2.校验规则;3.导入的sheet;3.从第几行导入;4.尾部非数据行数量;5.导入每条数据的回调</span></span><br><span class="line">ImportRspInfo&lt;ProjectEvaluate&gt; list = ExcelUtils.parseSheet(ProjectEvaluate<span class="class">.<span class="keyword">class</span>, <span class="title">ProjectVerifyBuilder</span>.<span class="title">getInstance</span>(), <span class="title">sheet</span>, 3, 2, (<span class="title">row</span>, <span class="title">rowNum</span>) -&gt; </span>&#123;</span><br><span class="line"><span class="comment">//1.此处可以完成更多的校验</span></span><br><span class="line"><span class="keyword">if</span>(row.getAreaName() == <span class="string">"中青旅"</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> POIException(<span class="string">"第"</span>+rowNum+<span class="string">"行，区域名字不能为中青旅！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.图片导入，再ProjectEvaluate定义类型为byte[]的属性就可以，ProjectVerifyBuilder定义ImgVerfiy校验列.就OK了</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (list.isSuccess()) &#123;</span><br><span class="line"><span class="comment">// 导入没有错误，打印数据</span></span><br><span class="line">System.out.println(JSON.toJSONString(list.getData()));</span><br><span class="line"><span class="comment">//打印图片byte数组长度</span></span><br><span class="line"><span class="keyword">byte</span>[] img = list.getData().get(<span class="number">0</span>).getImg();</span><br><span class="line">System.out.println(img);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 导入有错误，打印输出错误</span></span><br><span class="line">System.out.println(list.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.自定义校验器，导入需要校验字段,必须继承AbstractVerifyBuidler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProjectVerifyBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractVerifyBuidler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ProjectVerifyBuilder builder = <span class="keyword">new</span> ProjectVerifyBuilder();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProjectVerifyBuilder <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义列校验实体：提取的字段、提取列、校验规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ProjectVerifyBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"projectName"</span>, <span class="string">"B"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"项目名称"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"areaName"</span>, <span class="string">"C"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"所属区域"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"province"</span>, <span class="string">"D"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"省份"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"city"</span>, <span class="string">"E"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"市"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"people"</span>, <span class="string">"F"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"项目所属人"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"leader"</span>, <span class="string">"G"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"项目领导人"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"scount"</span>, <span class="string">"H"</span>, <span class="keyword">new</span> IntegerVerify(<span class="string">"总分"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"avg"</span>, <span class="string">"I"</span>, <span class="keyword">new</span> DoubleVerify(<span class="string">"历史平均分"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"createTime"</span>, <span class="string">"J"</span>, <span class="keyword">new</span> DateTimeVerify(<span class="string">"创建时间"</span>, <span class="string">"yyyy-MM-dd HH:mm"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"img"</span>, <span class="string">"K"</span>, <span class="keyword">new</span> ImgVerify(<span class="string">"图片"</span>, <span class="keyword">false</span>)));</span><br><span class="line"><span class="comment">// 必须调用</span></span><br><span class="line"><span class="keyword">super</span>.init();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导入示例图"><a href="#导入示例图" class="headerlink" title="导入示例图"></a>导入示例图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1118/104015_a439ba1a_1215820.png" alt="输入图片说明" title="QQ截图20181118104004.png"></p><h3 id="导出-1"><a href="#导出-1" class="headerlink" title="导出"></a>导出</h3><p>0.基础数据构建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单sheet数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> List&lt;ProjectEvaluate&gt; sheetData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * map型数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; mapData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复杂对象数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> List&lt;Student&gt; complexData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多sheet数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> List&lt;List&lt;?&gt;&gt; moreSheetData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.单sheet数据填充</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        ProjectEvaluate obj = <span class="keyword">new</span> ProjectEvaluate();</span><br><span class="line">        obj.setProjectName(<span class="string">"中青旅"</span> + i);</span><br><span class="line">        obj.setAreaName(<span class="string">"华东长三角"</span>);</span><br><span class="line">        obj.setProvince(<span class="string">"河北省"</span>);</span><br><span class="line">        obj.setCity(<span class="string">"保定市"</span>);</span><br><span class="line">        obj.setPeople(<span class="string">"张三"</span> + i);</span><br><span class="line">        obj.setLeader(<span class="string">"李四"</span> + i);</span><br><span class="line">        obj.setScount(<span class="number">50</span>);</span><br><span class="line">        obj.setAvg(<span class="number">60.0</span>);</span><br><span class="line">        obj.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        obj.setImg(ImageParseBytes(<span class="keyword">new</span> File(<span class="string">"src/test/java/excel/export/1.png"</span>)));</span><br><span class="line">        sheetData.add(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.map型数据填充</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; obj = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        obj.put(<span class="string">"name"</span>, <span class="string">"张三"</span> + i);</span><br><span class="line">        obj.put(<span class="string">"age"</span>, <span class="number">5</span> + i);</span><br><span class="line">        mapData.add(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.复杂对象数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 學生</span></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">// 學生所在的班級，用對象</span></span><br><span class="line">        stu.setClassRoom(<span class="keyword">new</span> ClassRoom(<span class="string">"六班"</span>));</span><br><span class="line">        <span class="comment">// 學生的更多信息，用map</span></span><br><span class="line">        Map&lt;String, Object&gt; moreInfo = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        moreInfo.put(<span class="string">"parent"</span>, <span class="keyword">new</span> Parent(<span class="string">"張無忌"</span>));</span><br><span class="line">        stu.setMoreInfo(moreInfo);</span><br><span class="line">        stu.setName(<span class="string">"张三"</span>);</span><br><span class="line">        complexData.add(stu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.多sheet数据填充</span></span><br><span class="line">    moreSheetData.add(sheetData);</span><br><span class="line">    moreSheetData.add(mapData);</span><br><span class="line">    moreSheetData.add(complexData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.简单导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.获取导出的数据体</span></span><br><span class="line"> <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">String[] hearder = &#123;<span class="string">"序号"</span>, <span class="string">"项目名称"</span>, <span class="string">"所属区域"</span>, <span class="string">"省份"</span>, <span class="string">"市"</span>, <span class="string">"项目所属人"</span>, <span class="string">"项目领导人"</span>, <span class="string">"得分"</span>, <span class="string">"平均分"</span>, <span class="string">"创建时间"</span>, <span class="string">"项目图片"</span>&#125;;</span><br><span class="line"><span class="comment">// 2.导出hearder对应的字段设置</span></span><br><span class="line">Column[] column = &#123;Column.field(<span class="string">"projectName"</span>), Column.field(<span class="string">"areaName"</span>), Column.field(<span class="string">"province"</span>),</span><br><span class="line">        Column.field(<span class="string">"city"</span>), Column.field(<span class="string">"people"</span>), Column.field(<span class="string">"leader"</span>), Column.field(<span class="string">"scount"</span>),</span><br><span class="line">        Column.field(<span class="string">"avg"</span>), Column.field(<span class="string">"createTime"</span>),</span><br><span class="line">        <span class="comment">// 项目图片</span></span><br><span class="line">        Column.field(<span class="string">"img"</span>)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(sheetData, ExportRules.simpleRule(column, hearder).title(<span class="string">"项目资源统计"</span>).sheetName(<span class="string">"mysheet1"</span>).autoNum(<span class="keyword">true</span>), <span class="keyword">true</span>,</span><br><span class="line">        (feildName, value, t, customStyle) -&gt; &#123;</span><br><span class="line">            <span class="comment">//此处指向回调逻辑，可以修改写入excel的值,以及单元格样式，如颜色等</span></span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export1.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="1导出图"><a href="#1导出图" class="headerlink" title="1导出图"></a>1导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1215/161804_3ddf0b6b_1215820.png" alt="输入图片说明" title="1.png"></p><p>2.复杂表格导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.表头设置,可以对应excel设计表头，一看就懂</span></span><br><span class="line">HashMap&lt;String, String&gt; headerRules = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">headerRules.put(<span class="string">"1,1,A,K"</span>, <span class="string">"项目资源统计"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,A,A"</span>, <span class="string">"序号"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,2,B,E"</span>, <span class="string">"基本信息"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,B,B"</span>, <span class="string">"项目名称"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,C,C"</span>, <span class="string">"所属区域"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,D,D"</span>, <span class="string">"省份"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,E,E"</span>, <span class="string">"市"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,F,F"</span>, <span class="string">"项目所属人"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,G,G"</span>, <span class="string">"市项目领导人"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,2,H,I"</span>, <span class="string">"分值"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,H,H"</span>, <span class="string">"得分"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,I,I"</span>, <span class="string">"平均分"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,J,J"</span>, <span class="string">"创建时间"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,K,K"</span>, <span class="string">"项目图片"</span>);</span><br><span class="line"><span class="comment">// 2.尾部设置，一般可以用来设计合计栏</span></span><br><span class="line">HashMap&lt;String, String&gt; footerRules = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">footerRules.put(<span class="string">"1,2,A,C"</span>, <span class="string">"注释:"</span>);</span><br><span class="line">footerRules.put(<span class="string">"1,2,D,K"</span>, <span class="string">"导出参考代码！"</span>);</span><br><span class="line"><span class="comment">// 3.导出hearder对应的字段设置</span></span><br><span class="line">Column[] column = &#123;</span><br><span class="line">        Column.field(<span class="string">"projectName"</span>),</span><br><span class="line">        <span class="comment">// 4.1设置此列宽度为10</span></span><br><span class="line">        Column.field(<span class="string">"areaName"</span>).width(<span class="number">10</span>),</span><br><span class="line">        <span class="comment">// 4.2设置此列下拉框数据</span></span><br><span class="line">        Column.field(<span class="string">"province"</span>).width(<span class="number">5</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"陕西省"</span>, <span class="string">"山西省"</span>, <span class="string">"辽宁省"</span>&#125;),</span><br><span class="line">        <span class="comment">// 4.3设置此列水平居右</span></span><br><span class="line">        Column.field(<span class="string">"city"</span>).align(HorizontalAlignment.RIGHT),</span><br><span class="line">        <span class="comment">// 4.4 设置此列垂直居上</span></span><br><span class="line">        Column.field(<span class="string">"people"</span>).valign(VerticalAlignment.TOP),</span><br><span class="line">        <span class="comment">// 4.5 设置此列单元格 自定义校验 只能输入文本</span></span><br><span class="line">        Column.field(<span class="string">"leader"</span>).width(<span class="number">4</span>).verifyCustom(<span class="string">"VALUE(F3:F500)"</span>, <span class="string">"我是提示"</span>),</span><br><span class="line">        <span class="comment">// 4.6设置此列单元格 整数 数据校验 ，同时设置背景色为棕色</span></span><br><span class="line">        Column.field(<span class="string">"scount"</span>).verifyIntNum(<span class="string">"10~20"</span>).backColor(IndexedColors.BROWN),</span><br><span class="line">        <span class="comment">// 4.7设置此列单元格 浮点数 数据校验， 同时设置字体颜色红色</span></span><br><span class="line">        Column.field(<span class="string">"avg"</span>).verifyFloatNum(<span class="string">"10.0~20.0"</span>).color(IndexedColors.RED),</span><br><span class="line">        <span class="comment">// 4.8设置此列单元格 日期 数据校验 ，同时宽度为20、限制用户表格输入、水平居中、垂直居中、背景色、字体颜色</span></span><br><span class="line">        Column.field(<span class="string">"createTime"</span>).width(<span class="number">20</span>).verifyDate(<span class="string">"2000-01-03 12:35~3000-05-06 23:23"</span>)</span><br><span class="line">                .align(HorizontalAlignment.LEFT).valign(VerticalAlignment.CENTER)</span><br><span class="line">                .backColor(IndexedColors.YELLOW).color(IndexedColors.GOLD),</span><br><span class="line">        <span class="comment">// 4.9项目图片</span></span><br><span class="line">        Column.field(<span class="string">"img"</span>)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 4.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(</span><br><span class="line">        sheetData,</span><br><span class="line">        ExportRules.complexRule(column, headerRules).autoNum(<span class="keyword">true</span>).footerRules(footerRules).sheetName(<span class="string">"mysheet2"</span>),</span><br><span class="line">        <span class="keyword">true</span>,</span><br><span class="line">        (fieldName, value, row, col) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"projectName"</span>.equals(fieldName) &amp;&amp; row.getProjectName().equals(<span class="string">"中青旅23"</span>)) &#123;</span><br><span class="line">                col.align(HorizontalAlignment.LEFT);</span><br><span class="line">                col.valign(VerticalAlignment.CENTER);</span><br><span class="line">                col.height(<span class="number">2</span>);</span><br><span class="line">                col.backColor(IndexedColors.RED);</span><br><span class="line">                col.color(IndexedColors.YELLOW);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">// 5.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export2.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="2导出图"><a href="#2导出图" class="headerlink" title="2导出图"></a>2导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1215/161814_61f83ff1_1215820.png" alt="输入图片说明" title="2.png"></p><p>3.复杂的对象级联导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">String[] hearder = &#123;<span class="string">"學生姓名"</span>, <span class="string">"所在班級"</span>, <span class="string">"所在學校"</span>, <span class="string">"更多父母姓名"</span>&#125;;</span><br><span class="line"><span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">Column[] column = &#123;Column.field(<span class="string">"name"</span>), Column.field(<span class="string">"classRoom.name"</span>), Column.field(<span class="string">"classRoom.school.name"</span>),</span><br><span class="line">        Column.field(<span class="string">"moreInfo.parent.name"</span>),&#125;;</span><br><span class="line"><span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(complexData, ExportRules.simpleRule(column, hearder).title(<span class="string">"學生基本信息"</span>), <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export3.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="3导出图"><a href="#3导出图" class="headerlink" title="3导出图"></a>3导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1209/193615_b483f034_1215820.png" alt="输入图片说明" title="4.png"></p><p>4.map对象的简单导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">String[] hearder = &#123;<span class="string">"姓名"</span>, <span class="string">"年龄"</span>&#125;;</span><br><span class="line"><span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">Column[] column = &#123;Column.field(<span class="string">"name"</span>),</span><br><span class="line">        Column.field(<span class="string">"age"</span>),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(mapData, ExportRules.simpleRule(column, hearder), <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export4.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="4导出图"><a href="#4导出图" class="headerlink" title="4导出图"></a>4导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1209/193608_c75b81ee_1215820.png" alt="输入图片说明" title="4.png"></p><p>5.模板导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">String[] hearder = &#123;<span class="string">"宝宝姓名"</span>, <span class="string">"宝宝昵称"</span>, <span class="string">"家长姓名"</span>, <span class="string">"手机号码"</span>, <span class="string">"宝宝生日"</span>, <span class="string">"月龄"</span>, <span class="string">"宝宝性别"</span>, <span class="string">"来源渠道"</span>, <span class="string">"市场人员"</span>, <span class="string">"咨询顾问"</span>, <span class="string">"客服顾问"</span>,</span><br><span class="line">    <span class="string">"分配校区"</span>, <span class="string">"备注"</span>&#125;;</span><br><span class="line"><span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">Column[] column = &#123;Column.field(<span class="string">"宝宝姓名"</span>), Column.field(<span class="string">"宝宝昵称"</span>), Column.field(<span class="string">"家长姓名"</span>),</span><br><span class="line">    Column.field(<span class="string">"手机号码"</span>).verifyText(<span class="string">"11~11"</span>, <span class="string">"请输入11位的手机号码！"</span>),</span><br><span class="line">    Column.field(<span class="string">"宝宝生日"</span>).verifyDate(<span class="string">"2000-01-01~3000-12-31"</span>),</span><br><span class="line">    Column.field(<span class="string">"月龄"</span>).width(<span class="number">4</span>).verifyCustom(<span class="string">"VALUE(F3:F6000)"</span>, <span class="string">"月齡格式：如1年2个月则输入14"</span>),</span><br><span class="line">    Column.field(<span class="string">"宝宝性别"</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"男"</span>, <span class="string">"女"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"来源渠道"</span>).width(<span class="number">12</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"品推"</span>, <span class="string">"市场"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"市场人员"</span>).width(<span class="number">6</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"张三"</span>, <span class="string">"李四"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"咨询顾问"</span>).width(<span class="number">6</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"张三"</span>, <span class="string">"李四"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"客服顾问"</span>).width(<span class="number">6</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"大唐"</span>, <span class="string">"银泰"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"分配校区"</span>).width(<span class="number">6</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"大唐"</span>, <span class="string">"银泰"</span>&#125;), Column.field(<span class="string">"备注"</span>)&#125;;</span><br><span class="line"><span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(Collections.emptyList(), ExportRules.simpleRule(column, hearder), <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export5.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="5导出图"><a href="#5导出图" class="headerlink" title="5导出图"></a>5导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1215/180646_50cc4004_1215820.png" alt="输入图片说明" title="5.png"></p><p>6.多sheet合并导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">Workbook emptyWorkbook = ExcelUtils.createEmptyWorkbook(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 2.执行导出到工作簿.1.项目数据2.map数据3.复杂对象数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; moreSheetData.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">        List&lt;ProjectEvaluate&gt; data1 = (ArrayList&lt;ProjectEvaluate&gt;) moreSheetData.get(i);</span><br><span class="line">        <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">        String[] hearder = &#123;<span class="string">"序号"</span>, <span class="string">"项目名称"</span>, <span class="string">"所属区域"</span>, <span class="string">"省份"</span>, <span class="string">"市"</span>, <span class="string">"项目所属人"</span>, <span class="string">"项目领导人"</span>, <span class="string">"得分"</span>, <span class="string">"平均分"</span>, <span class="string">"创建时间"</span>, <span class="string">"项目图片"</span>&#125;;</span><br><span class="line">        <span class="comment">// 2.导出hearder对应的字段设置</span></span><br><span class="line">        Column[] column = &#123;Column.field(<span class="string">"projectName"</span>), Column.field(<span class="string">"areaName"</span>), Column.field(<span class="string">"province"</span>),</span><br><span class="line">                Column.field(<span class="string">"city"</span>), Column.field(<span class="string">"people"</span>), Column.field(<span class="string">"leader"</span>), Column.field(<span class="string">"scount"</span>),</span><br><span class="line">                Column.field(<span class="string">"avg"</span>), Column.field(<span class="string">"createTime"</span>),</span><br><span class="line">                <span class="comment">// 项目图片</span></span><br><span class="line">                Column.field(<span class="string">"img"</span>)</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        ExcelUtils.fillBook(emptyWorkbook, data1, ExportRules.simpleRule(column, hearder).title(<span class="string">"项目资源统计"</span>).sheetName(<span class="string">"mysheet1"</span>).autoNum(<span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; data2 = (ArrayList&lt;Map&lt;String, Object&gt;&gt;) moreSheetData.get(i);</span><br><span class="line">        <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">        String[] hearder = &#123;<span class="string">"姓名"</span>, <span class="string">"年龄"</span>&#125;;</span><br><span class="line">        <span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">        Column[] column = &#123;Column.field(<span class="string">"name"</span>),</span><br><span class="line">                Column.field(<span class="string">"age"</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        ExcelUtils.fillBook(emptyWorkbook, data2, ExportRules.simpleRule(column, hearder).sheetName(<span class="string">"mysheet2"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">        List&lt;Student&gt; data3 = (ArrayList&lt;Student&gt;) moreSheetData.get(i);</span><br><span class="line">        <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">        String[] hearder = &#123;<span class="string">"學生姓名"</span>, <span class="string">"所在班級"</span>, <span class="string">"所在學校"</span>, <span class="string">"更多父母姓名"</span>&#125;;</span><br><span class="line">        <span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">        Column[] column = &#123;Column.field(<span class="string">"name"</span>), Column.field(<span class="string">"classRoom.name"</span>), Column.field(<span class="string">"classRoom.school.name"</span>),</span><br><span class="line">                Column.field(<span class="string">"moreInfo.parent.name"</span>),&#125;;</span><br><span class="line">        <span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">        ExcelUtils.fillBook(emptyWorkbook, data3, ExportRules.simpleRule(column, hearder).title(<span class="string">"學生基本信息"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">emptyWorkbook.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export6.xlsx"</span>));</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轮子工具 </tag>
            
            <tag> POI </tag>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RedisKey设计类</title>
      <link href="/2020/03/17/RedisKey%E8%AE%BE%E8%AE%A1%E7%B1%BB/"/>
      <url>/2020/03/17/RedisKey%E8%AE%BE%E8%AE%A1%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.common.utils.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成RedisKey工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年05月07日 15:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisKeyUtil</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主数据系统标识</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX = <span class="string">"ym"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分割字符，默认[:]，使用:可用于rdm分组查看</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_SPLIT_CHAR = <span class="string">":"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> module 模块名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> func   方法名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args   参数..</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(String <span class="keyword">module</span>, String func, String... args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keyBuilder(<span class="keyword">null</span>, <span class="keyword">module</span>, func, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> module 模块名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> func   方法名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> objStr 对象.toString()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(String <span class="keyword">module</span>, String func, String objStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keyBuilder(<span class="keyword">null</span>, <span class="keyword">module</span>, func, <span class="keyword">new</span> String[]&#123;objStr&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix 项目前缀</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> module 模块名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> func   方法名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> objStr 对象.toString()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(String prefix, String <span class="keyword">module</span>, String func, String objStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keyBuilder(prefix, <span class="keyword">module</span>, func, <span class="keyword">new</span> String[]&#123;objStr&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix 项目前缀</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> module 模块名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> func   方法名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args   参数..</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(String prefix, String <span class="keyword">module</span>, String func, String... args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 项目前缀</span></span><br><span class="line"><span class="keyword">if</span> (prefix == <span class="keyword">null</span>) &#123;</span><br><span class="line">prefix = KEY_PREFIX;</span><br><span class="line">&#125;</span><br><span class="line">StringBuilder key = <span class="keyword">new</span> StringBuilder(prefix);</span><br><span class="line"><span class="comment">// KEY_SPLIT_CHAR 为分割字符</span></span><br><span class="line">key.append(KEY_SPLIT_CHAR).append(<span class="keyword">module</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(func)) &#123;</span><br><span class="line">key.append(KEY_SPLIT_CHAR).append(func);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">key.append(KEY_SPLIT_CHAR).append(arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> key.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> redisKeyEnum 枚举对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> objStr       对象.toString()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(RedisKeyEnum redisKeyEnum, String... objStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keyBuilder(redisKeyEnum.getKeyPrefix(), redisKeyEnum.getModule(), redisKeyEnum.getFunc(), objStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>短信发送模板</title>
      <link href="/2020/03/17/%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81%E6%A8%A1%E6%9D%BF/"/>
      <url>/2020/03/17/%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81%E6%A8%A1%E6%9D%BF/</url>
      
        <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.enums.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里云短信模板</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年05月17日 17:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SmsTemplateEnum &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:通用验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">UNIVERSAL_VERIFICATION_CODE(<span class="string">"SMS_173141326"</span>, <span class="string">"您的验证码$&#123;code&#125;，该验证码5分钟内有效，请勿泄漏于他人！"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:身份验证验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">AUTHENTICATION_CODE(<span class="string">"SMS_173191624"</span>, <span class="string">"验证码$&#123;code&#125;，您正在进行身份验证，打死不要告诉别人哦！"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:登录确认验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LOGON_CONFIRMATION_AUTHENTICATION_CODE(<span class="string">"SMS_173191623"</span>, <span class="string">"验证码$&#123;code&#125;，您正在登录，若非本人操作，请勿泄露。"</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:登录异常验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LOGON_EXCEPTION_AUTHENTICATION_CODE(<span class="string">"SMS_173191622"</span>, <span class="string">"验证码$&#123;code&#125;，您正尝试异地登录，若非本人操作，请勿泄露。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:用户注册验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">USER_REGISTRATION_AUTHENTICATION_CODE(<span class="string">"SMS_173191621"</span>, <span class="string">"验证码$&#123;code&#125;，您正在注册成为新用户，感谢您的支持！"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:修改密码验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MODIFY_PASSWORD_AUTHENTICATION_CODE(<span class="string">"SMS_173191620"</span>, <span class="string">"验证码$&#123;code&#125;，您正在尝试修改登录密码，请妥善保管账户信息。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:信息变更验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">INFORMATION_CHANGE_VERIFICATION_CODE(<span class="string">"SMS_173191619"</span>, <span class="string">"验证码$&#123;code&#125;，您正在尝试变更重要信息，请妥善保管账户信息。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:医生资料审核不通过</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：用户资料审核不通过，发送短信告诉用户！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DATA_AUDIT_FAILED(<span class="string">"SMS_174986989"</span>, <span class="string">"抱歉，您暂未通过资质审核，未通过原因：$&#123;p2&#125;。客服电话：$&#123;p3&#125;"</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:医生资料审核通过</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-金额；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：用户资料审核通过，发送短信通知用户！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DATA_AUDIT_SUCCESS(<span class="string">"SMS_174986992"</span>, <span class="string">"恭喜，您已通过资质审核，请登录APP开启您的个人诊所之旅吧，完成首单可获得$&#123;p2&#125;元奖励哦！"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:用户注册通知</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-电话号码；p4-其他号码；p5-金额；p6-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：注册我方亚米健康产品后，发送此短信通知用户注册成功！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">USER_REGISTRATION_NOTICE(<span class="string">"SMS_174986988"</span>, <span class="string">"您已成功注册$&#123;p2&#125;，账号$&#123;p3&#125; ，初始密码 $&#123;p4&#125;。快去亚米健康完成医疗资质认证开启您的线上诊所赢取 $&#123;p5&#125; 元奖励。客服电话：$&#123;p6&#125;。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:电话预约成功</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-其他；p4-时间；p5-时间；p6-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：用户电话预约成功后，发送短信通知用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SUCCESSFUL_TELEPHONE_RESERVATION(<span class="string">"SMS_174991908"</span>, <span class="string">"您预约了$&#123;p2&#125;医生的$&#123;p3&#125;，时间$&#123;p4&#125;，共$&#123;p5&#125;分钟，到时您会接到$&#123;p6&#125;的来电，请保持电话畅通。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:图文问诊支付成功</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-金额；p3-其他；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：图文问诊支付成功后，向用户发送短信通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SUCCESSFUL_PAYMENT_FOR_CONSULTATION(<span class="string">"SMS_174991905"</span>, <span class="string">"您刚支付了$&#123;p2&#125;元向$&#123;p3&#125;医生医生提问。可在我的问诊/当前问诊中找到该问题，查看医生回复。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:图问问诊医生首次回复</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-其他号码；p4-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：图问问诊医生首次回复后，需要发送短信告诉用户，让用户及时查看订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DOCTOR_FIRST_REPLY(<span class="string">"SMS_174986972"</span>, <span class="string">"医生$&#123;p2&#125;回复了您的问题，请您及时查看并进行后续交流。问题将在$&#123;p3&#125;小时后关闭。 有疑问请联系客服 $&#123;p4&#125;。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:问诊电话开始短信提醒</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-其他；p4-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：问诊电话服务快要开始的时候，向患者发送短信提醒。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">INQUIRY_TELEPHONE_START_SHORT_MESSAGE_REMINDER(<span class="string">"SMS_174991891"</span>, <span class="string">"您预约了$&#123;p2&#125;医生的$&#123;p3&#125;服务即将开始，请您合理按排时间，注意接听。到时您会接到$&#123;p4&#125;的来电，请保持电话畅通。"</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:患者预约成功推送</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p0-其他；p1-其他；p2-时间；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：患者预约成功推送短信给医生，让医生及时联系患者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SUCCESSFUL_PUSH_OF_PATIENT_APPOINTMENT(<span class="string">"SMS_175245305"</span>, <span class="string">"$&#123;p0&#125;医生您好，$&#123;p1&#125;患者预约了电话问诊服务，请于$&#123;p2&#125;在亚米医疗APP端拨打电话"</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:医生电话问诊即将开始通知</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p0-其他；p1-其他；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：医生电话问诊即将开始通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DOCTOR_S_TELEPHONE_CONSULTATION_IS_ABOUT_TO_START(<span class="string">"SMS_175240289"</span>, <span class="string">"$&#123;p0&#125;医生您好，$&#123;p1&#125;患者预约的电话问诊服务即将开始，请及时拨打电话。"</span>),</span><br><span class="line">;</span><br><span class="line"><span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SmsTemplateEnum<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SmsTemplateEnum</span><span class="params">(String code, String content)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.code = code;</span><br><span class="line"><span class="keyword">this</span>.content = content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输入对应模板的参数，生成JSON格式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prams</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buildParams</span><span class="params">(Object... prams)</span> </span>&#123;</span><br><span class="line">JSONObject buildParams = <span class="keyword">new</span> JSONObject();</span><br><span class="line">String content = <span class="keyword">this</span>.content;</span><br><span class="line">Pattern pattern = Pattern.compile(<span class="string">"\\$\\&#123;[^&#125;]*\\&#125;"</span>);</span><br><span class="line">Matcher matcher = pattern.matcher(content);</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">List&lt;String&gt; logs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">String group = matcher.group(<span class="number">0</span>);</span><br><span class="line">logs.add(group);</span><br><span class="line">String key = group.replaceAll(<span class="string">"\\$|\\&#123;|\\&#125;"</span>, <span class="string">""</span>);</span><br><span class="line">buildParams.put(key, prams[index]);</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; logs.size(); i++) &#123;</span><br><span class="line">content = content.replace(logs.get(i), String.valueOf(prams[i]));</span><br><span class="line">&#125;</span><br><span class="line">String result = buildParams.toJSONString();</span><br><span class="line">LOGGER.info(<span class="string">"发送SMS内容为：&#123;&#125;"</span>, content);</span><br><span class="line">LOGGER.info(<span class="string">"发送SMS参数为：&#123;&#125;"</span>, result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据code获取验证码发送模板</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SmsTemplateEnum <span class="title">getCodeTemp</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">SmsTemplateEnum codeTemp = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">switch</span> (code) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"01"</span>:</span><br><span class="line"><span class="comment">//身份验证</span></span><br><span class="line">codeTemp = SmsTemplateEnum.AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"02"</span>:</span><br><span class="line"><span class="comment">//正常登录</span></span><br><span class="line">codeTemp = SmsTemplateEnum.LOGON_CONFIRMATION_AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"03"</span>:</span><br><span class="line"><span class="comment">//登录异常</span></span><br><span class="line">codeTemp = SmsTemplateEnum.LOGON_EXCEPTION_AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"04"</span>:</span><br><span class="line"><span class="comment">//用户注册</span></span><br><span class="line">codeTemp = SmsTemplateEnum.USER_REGISTRATION_AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"05"</span>:</span><br><span class="line"><span class="comment">//修改密码</span></span><br><span class="line">codeTemp = SmsTemplateEnum.MODIFY_PASSWORD_AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"06"</span>:</span><br><span class="line"><span class="comment">//信息变更</span></span><br><span class="line">codeTemp = SmsTemplateEnum.INFORMATION_CHANGE_VERIFICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">codeTemp = SmsTemplateEnum.UNIVERSAL_VERIFICATION_CODE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> codeTemp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>rabbitmq实现延时队列任务</title>
      <link href="/2020/03/17/rabbitmq%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1/"/>
      <url>/2020/03/17/rabbitmq%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>此前实现过一个基于redis和jvm的延时队列任务执行，有个弊端就是吞吐量和可靠性上得不到保障，比如系统重启队列任务丢失，需要人工的加载等等。所以此次利用rabbitmq来实现一个延时。</p><a id="more"></a><p>此前实现过一个基于redis和jvm的延时队列任务执行，有个弊端就是吞吐量和可靠性上得不到保障，比如系统重启队列任务丢失，需要人工的加载等等。所以此次利用rabbitmq来实现一个延时…</p><h4 id="要开发肯定先安装MQ-MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。"><a href="#要开发肯定先安装MQ-MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。" class="headerlink" title="要开发肯定先安装MQ,MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。"></a>要开发肯定先安装MQ,MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#### 1.更新yum源</span><br><span class="line">&gt; yum update</span><br><span class="line"></span><br><span class="line">#### 2.安装docker</span><br><span class="line">&gt; yum install -y docker</span><br><span class="line"></span><br><span class="line">#### 3拉取镜像</span><br><span class="line">&gt; docker pull rabbitmq:management</span><br><span class="line"></span><br><span class="line">#### 4启动容器</span><br><span class="line">&gt; docker run -d --name rabbitmq --privileged=true -p 9158:5672 -p 9159:15672  -v /home/rabbit/data:/var/lib/rabbitmq -v /home/rabbit/log:/var/log/rabbitmq </span><br><span class="line">-v /home/rabbit/plugins:/plugins </span><br><span class="line">--hostname ymRabbit -e RABBITMQ_DEFAULT_VHOST=/ -e RABBITMQ_DEFAULT_USER=ym_rabbit -e RABBITMQ_DEFAULT_PASS=ym_rabbit d8f707718f06</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 5进入容器方式</span><br><span class="line">&gt; docker exec -it 容器ID /bin/bash</span><br><span class="line"></span><br><span class="line">#### 6退出容器</span><br><span class="line">&gt; exit 或者 Ctrl+p+q</span><br><span class="line"></span><br><span class="line">#### 7向容器发送命令</span><br><span class="line">&gt; docker exec -d 13dc7c8ce0bd rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><h4 id="两种延时方式"><a href="#两种延时方式" class="headerlink" title="两种延时方式"></a>两种延时方式</h4><ol><li>死信+普通交换器，依靠消息过期自动进入死信队列，然后消费死信队列的数据这个思路，但是由于这种方式不管设置队列过期时间还是消息过期时间，都不能达到单个队列消息灵活过期的目的。<br>比如，先放入队列10s过期消息，再放入2s过期。mq会检测头部10s是否过期，10s不过期的情况下，2s就算过去也不会跑到死信。</li><li>使用插件rabbitmq_delayed_message_exchange。这个可以很好的解决消息不能灵活过期的问题，但是有个弊端就是很难查看消息堆积的情况，因为他把要发送的延时消息存在本地的分布式mnesia 数据库中，其次过期时间为最大int值，超过这个值得代码判定重复过期设置。</li></ol><h4 id="延时插件的使用方式"><a href="#延时插件的使用方式" class="headerlink" title="延时插件的使用方式"></a>延时插件的使用方式</h4><ol><li>去MQ官网下载插件 ++<a href="https://www.rabbitmq.com/community-plugins.html++(rabbitmq_delayed_message_exchange)" target="_blank" rel="noopener">https://www.rabbitmq.com/community-plugins.html++(rabbitmq_delayed_message_exchange)</a></li><li>把插件放到MQ的安装目录的plugins下</li><li>然后执行rabbitmq-plugins enable rabbitmq_delayed_message_exchange 命令启用插件</li><li>然后就也可以在web页面查看新的交换器x-delayed-message（其实并不是真正意义上的，真正的只有4个）</li><li>然后上代码实现延时任务，配置文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">   rabbitmq:</span><br><span class="line">    host: 192.168.0.245</span><br><span class="line">    port: 9158</span><br><span class="line">    username: ym_rabbit</span><br><span class="line">    password: ym_rabbit</span><br><span class="line">    listener:</span><br><span class="line">      simple:</span><br><span class="line">        acknowledge-mode: manual #手动应答</span><br><span class="line">        retry:</span><br><span class="line">          enabled: true</span><br><span class="line"></span><br><span class="line"># 用户自定义配置</span><br><span class="line">config-center:</span><br><span class="line">  rabbitRuleConfig:</span><br><span class="line">    # 系统标志</span><br><span class="line">    systemMark: local</span><br><span class="line">    # 普通消息</span><br><span class="line">    normalExchange: topic.normal</span><br><span class="line">    # 延时消息</span><br><span class="line">    delayExchange: topic.delay</span><br><span class="line">    # 普通和延时消息死信</span><br><span class="line">    deadExchange: topic.dead</span><br></pre></td></tr></table></figure></li><li>spring中MQ的配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQConfig 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年05月07日 14:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------常量定义-----------------------</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String POINT = <span class="string">"."</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NORMAL = <span class="string">"nml"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAY = <span class="string">"dly"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE = <span class="string">"que"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------交换器定义----------------------------</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通交换器名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String NORMAL_EXCHANGE = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死信交换器名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DEAD_EXCHANGE = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时交换器名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DELAY_EXCHANGE = <span class="string">""</span>;</span><br><span class="line"><span class="comment">//-------------------------队列定义--------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String NORMAL_QUEUE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时队列存放任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DELAY_QUEUE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通死信队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DEAD_NORMAL_QUEUE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时死信队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DEAD_DELAY_QUEUE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ConfigCenterProperties configCenterProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">rabbitTemplate</span><span class="params">(CachingConnectionFactory rabbitListenerContainerFactory)</span> </span>&#123;</span><br><span class="line">RabbitTemplate rabbitTemplate = <span class="keyword">new</span> RabbitTemplate(rabbitListenerContainerFactory);</span><br><span class="line">rabbitTemplate.setUsePublisherConnection(<span class="keyword">true</span>);</span><br><span class="line">rabbitTemplate.setChannelTransacted(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RabbitRuleConfig rabbitRuleConfig = configCenterProperties.getRabbitRuleConfig();</span><br><span class="line">NORMAL_EXCHANGE = rabbitRuleConfig.getNormalExchange() + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DEAD_EXCHANGE = rabbitRuleConfig.getDeadExchange() + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DELAY_EXCHANGE = rabbitRuleConfig.getDelayExchange() + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">NORMAL_QUEUE = rabbitRuleConfig.getNormalExchange() + POINT + QUEUE + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DELAY_QUEUE = rabbitRuleConfig.getDelayExchange() + POINT + QUEUE + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DEAD_NORMAL_QUEUE = rabbitRuleConfig.getDeadExchange() + POINT + QUEUE + POINT + NORMAL + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DEAD_DELAY_QUEUE = rabbitRuleConfig.getDeadExchange() + POINT + QUEUE + POINT + DELAY + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory(ConnectionFactory connectionFactory) &#123;</span><br><span class="line">SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">factory.setConnectionFactory(connectionFactory);</span><br><span class="line">factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">factory.setMessageConverter(<span class="keyword">new</span> Jackson2JsonMessageConverter());</span><br><span class="line">factory.setChannelTransacted(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory2(ConnectionFactory connectionFactory) &#123;</span><br><span class="line">SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">factory.setConnectionFactory(connectionFactory);</span><br><span class="line">factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">factory.setMessageConverter(<span class="keyword">new</span> SerializerMessageConverter());</span><br><span class="line">factory.setChannelTransacted(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------交换器声明start---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TopicExchange <span class="title">normalExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(NORMAL_EXCHANGE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TopicExchange <span class="title">deadExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(DEAD_EXCHANGE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CustomExchange <span class="title">delayExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">args.put(<span class="string">"x-delayed-type"</span>, <span class="string">"topic"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> CustomExchange(DELAY_EXCHANGE, <span class="string">"x-delayed-message"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------交换器声明end---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------队列start---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">deadNormalQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(DEAD_NORMAL_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">deadDelayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(DEAD_DELAY_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">normalQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">params.put(<span class="string">"x-dead-letter-exchange"</span>, DEAD_EXCHANGE);</span><br><span class="line">params.put(<span class="string">"x-dead-letter-routing-key"</span>, DEAD_NORMAL_QUEUE);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(NORMAL_QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">delayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">params.put(<span class="string">"x-dead-letter-exchange"</span>, DEAD_EXCHANGE);</span><br><span class="line">params.put(<span class="string">"x-dead-letter-routing-key"</span>, DEAD_DELAY_QUEUE);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(DELAY_QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, params);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------队列end---------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------绑定start---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingNormalExchange</span><span class="params">(Queue normalQueue, TopicExchange normalExchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(normalQueue).to(normalExchange).with(NORMAL_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingNormalDeadExchange</span><span class="params">(Queue deadNormalQueue, TopicExchange deadExchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(deadNormalQueue).to(deadExchange).with(DEAD_NORMAL_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDelayExchange</span><span class="params">(Queue delayQueue, CustomExchange delayExchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(delayQueue).to(delayExchange).with(DELAY_QUEUE).noargs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDelayDeadExchange</span><span class="params">(Queue deadDelayQueue, TopicExchange deadExchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(deadDelayQueue).to(deadExchange).with(DEAD_DELAY_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------绑定end------------------------------------------</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>7.生产者代码开发,我这里将延时任务和普通消息分开了，所以有2个发送方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息给MQ</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年09月19日 11:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IMessageSenderSV</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(IMessageSenderSV<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送云信消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> messageTask 消息内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(NormalMessageTask messageTask)</span> </span>&#123;</span><br><span class="line">LOG.info(<span class="string">"发送[ &#123;&#125; ]消息到MQ"</span>, messageTask.getMessageTypeEnum().getDescribe());</span><br><span class="line">rabbitTemplate.setMessageConverter(<span class="keyword">new</span> Jackson2JsonMessageConverter());</span><br><span class="line">rabbitTemplate.convertAndSend(RabbitMQConfig.NORMAL_EXCHANGE, RabbitMQConfig.NORMAL_QUEUE, messageTask, (message) -&gt; &#123;</span><br><span class="line">MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">messageProperties.setMessageId(messageTask.getUuid());</span><br><span class="line">messageProperties.setType(messageTask.getMessageTypeEnum().getDescribe());</span><br><span class="line">messageProperties.setContentType(MessageProperties.CONTENT_TYPE_JSON);</span><br><span class="line">String sendTime = DateKit.parseDateToStr(DateKit.YYYY_MM_DD_HH_MM_SS, <span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">// 发送时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"send_time"</span>, sendTime);</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送延时任务给队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> task 任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendDelayTask</span><span class="params">(AbstractDelayedTask task)</span> </span>&#123;</span><br><span class="line">LOG.info(<span class="string">"发送延时任务 [ &#123;&#125;:&#123;&#125; ] 到MQ"</span>, task.getDescribe(), task.getDelay());</span><br><span class="line">rabbitTemplate.setMessageConverter(<span class="keyword">new</span> SerializerMessageConverter());</span><br><span class="line">rabbitTemplate.convertAndSend(RabbitMQConfig.DELAY_EXCHANGE, RabbitMQConfig.DELAY_QUEUE, task, (message) -&gt; &#123;</span><br><span class="line">MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line"><span class="keyword">long</span> nextDelay = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (task.getDelay() &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line"><span class="comment">//如果延时时间大于erlang最大数值，多次延时</span></span><br><span class="line">messageProperties.setDelay(Integer.MAX_VALUE);</span><br><span class="line">nextDelay = task.getDelay() - Integer.MAX_VALUE;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">messageProperties.setDelay(task.getDelay().intValue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下次延时的时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"next_delay"</span>, nextDelay);</span><br><span class="line">messageProperties.setMessageId(task.getUuid());</span><br><span class="line">messageProperties.setType(task.getDescribe());</span><br><span class="line">messageProperties.setContentType(MessageProperties.CONTENT_TYPE_SERIALIZED_OBJECT);</span><br><span class="line">String sendTime = DateKit.parseDateToStr(DateKit.YYYY_MM_DD_HH_MM_SS, <span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">// 发送时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"send_time"</span>, sendTime);</span><br><span class="line">String expirationTime = DateKit.parseDateToStr(DateKit.YYYY_MM_DD_HH_MM_SS, <span class="keyword">new</span> Date(System.currentTimeMillis() + task.getDelay()));</span><br><span class="line"><span class="comment">// 过期时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"expiration_time"</span>, expirationTime);</span><br><span class="line"><span class="comment">// 任务的入参</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"params"</span>, task.getParams().toString());</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多次延时，再次发送任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> task 任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nextDelay 下次延时时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAgain</span><span class="params">(Message task, <span class="keyword">final</span> <span class="keyword">long</span> nextDelay)</span> </span>&#123;</span><br><span class="line">rabbitTemplate.setMessageConverter(<span class="keyword">new</span> SerializerMessageConverter());</span><br><span class="line">rabbitTemplate.convertAndSend(RabbitMQConfig.DELAY_EXCHANGE, RabbitMQConfig.DELAY_QUEUE, task, (message) -&gt; &#123;</span><br><span class="line">MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line"><span class="keyword">long</span> nextDelayNew = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (nextDelay &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line"><span class="comment">//如果延时时间大于erlang最大数值，多次延时</span></span><br><span class="line">messageProperties.setDelay(Integer.MAX_VALUE);</span><br><span class="line">nextDelayNew = nextDelay - Integer.MAX_VALUE;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">messageProperties.setDelay((<span class="keyword">int</span>) nextDelay);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下次延时的时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"next_delay"</span>, nextDelayNew);</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.消费者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费MQ消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年09月18日 10:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@EnableRabbit</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IMessageReceiveSV</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(IMessageReceiveSV<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IMessageSenderSV messageSenderSV;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IYunxinUserSV yunxinUserSV;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;config-center.rabbitRuleConfig.deadExchange&#125;.que.nml.$&#123;config-center.rabbitRuleConfig.systemMark&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String normalDeadQueue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;config-center.rabbitRuleConfig.deadExchange&#125;.que.dly.$&#123;config-center.rabbitRuleConfig.systemMark&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String delayDeadQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"$&#123;config-center.rabbitRuleConfig.normalExchange&#125;.que.$&#123;config-center.rabbitRuleConfig.systemMark&#125;"</span>, containerFactory = <span class="string">"rabbitListenerContainerFactory"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">autoNormalMsg</span><span class="params">(@Payload NormalMessageTask messageTask, @Headers Map&lt;String, Object&gt; headers, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">channel.txSelect();</span><br><span class="line"><span class="keyword">boolean</span> success = normalHandle(messageTask);</span><br><span class="line"><span class="keyword">if</span> (success) &#123;</span><br><span class="line">channel.basicAck((<span class="keyword">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="keyword">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">channel.basicReject((<span class="keyword">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">channel.txCommit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动消费普通消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manualConsumptionNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rabbitTemplate.receiveAndReply(normalDeadQueue, (payload) -&gt; &#123;</span><br><span class="line">NormalMessageTask normalMessageTask = (NormalMessageTask) payload;</span><br><span class="line"><span class="keyword">boolean</span> success = normalHandle(normalMessageTask);</span><br><span class="line"><span class="keyword">if</span> (!success) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AmqpException(<span class="string">"普通消息消费异常"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费普通消息方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> messageTask</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">normalHandle</span><span class="params">(NormalMessageTask messageTask)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">MessageTypeEnum messageTypeEnum = messageTask.getMessageTypeEnum();</span><br><span class="line">Object msg = messageTask.getMsg();</span><br><span class="line">LOG.info(<span class="string">"消费消息 [ &#123;&#125; ],消息ID为[ &#123;&#125; ]"</span>, messageTypeEnum.getDescribe(), messageTask.getUuid());</span><br><span class="line"><span class="keyword">switch</span> (messageTypeEnum) &#123;</span><br><span class="line"><span class="keyword">case</span> YUN_XIN: &#123;</span><br><span class="line">yunxinUserSV.syncMessages((String) msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="comment">// do</span></span><br><span class="line">LOG.info(<span class="string">"未知消息:&#123;&#125;"</span>, (String) msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span> (e <span class="keyword">instanceof</span> BusinessException) &#123;</span><br><span class="line">LOG.info(e.getMessage());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">LOG.error(<span class="string">"消费异常:&#123;&#125;"</span>, ExceptionUtil.getExceptionMessage(e));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时消息,执行策略</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 能收到说明已经到时间了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"$&#123;config-center.rabbitRuleConfig.delayExchange&#125;.que.$&#123;config-center.rabbitRuleConfig.systemMark&#125;"</span>, containerFactory = <span class="string">"rabbitListenerContainerFactory2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">autoDelayMsg</span><span class="params">(@Payload Message message, @Headers Map&lt;String, Object&gt; headers, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">channel.txSelect();</span><br><span class="line"><span class="keyword">boolean</span> success = delayHandle(message);</span><br><span class="line"><span class="keyword">if</span> (success) &#123;</span><br><span class="line">channel.basicAck((<span class="keyword">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="keyword">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">channel.basicReject((<span class="keyword">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">channel.txCommit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费延时消息方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">delayHandle</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">Map&lt;String, Object&gt; headers = messageProperties.getHeaders();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 判定是否要多次延时</span></span><br><span class="line"><span class="keyword">long</span> nextDelay = (<span class="keyword">long</span>) headers.get(<span class="string">"next_delay"</span>);</span><br><span class="line"><span class="keyword">if</span> (nextDelay &gt; <span class="number">0</span>) &#123;</span><br><span class="line">messageSenderSV.sendAgain(message, nextDelay);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">byte</span>[] body = message.getBody();</span><br><span class="line"><span class="keyword">if</span> (body != <span class="keyword">null</span> &amp;&amp; body.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//判定为一个有效消息，进行执行</span></span><br><span class="line"><span class="keyword">try</span> (ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(body));) &#123;</span><br><span class="line">AbstractDelayedTask abstractDelayedTask = (AbstractDelayedTask) ois.readObject();</span><br><span class="line">LOG.info(<span class="string">"执行延时任务 [ &#123;&#125; ],消息ID为[ &#123;&#125; ],参数为:&#123;&#125;"</span>, abstractDelayedTask.getDescribe(), abstractDelayedTask.getUuid(), JSONObject.toJSONString(headers));</span><br><span class="line">abstractDelayedTask.excute();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line"><span class="keyword">if</span> (e <span class="keyword">instanceof</span> BusinessException) &#123;</span><br><span class="line">LOG.info(e.getMessage());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">LOG.error(<span class="string">"消费异常:&#123;&#125;"</span>, ExceptionUtil.getExceptionMessage(e));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动消费延时消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manualConsumptionDelay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rabbitTemplate.receiveAndReply(delayDeadQueue, (payload) -&gt; &#123;</span><br><span class="line">AbstractDelayedTask abstractDelayedTask = (AbstractDelayedTask) payload;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">abstractDelayedTask.excute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">LOG.error(ExceptionUtil.getExceptionMessage(e));</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AmqpException(<span class="string">"延时消息异常"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9.延时任务抽象类定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时队列Task</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 创建时间：2018年6月16日 下午3:34:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDelayedTask</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(AbstractDelayedTask<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务唯一性标志</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String uuid = UUID.uuid();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String describe;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多久后执行，单位毫秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Long delay;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法需要执行的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> JSONObject params;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractDelayedTask</span><span class="params">(String describe, <span class="keyword">long</span> delay, JSONObject params)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.describe = describe;</span><br><span class="line"><span class="keyword">this</span>.delay = delay;</span><br><span class="line"><span class="keyword">this</span>.params = params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">LOG.info(<span class="string">"执行延时任务开始===========》&#123;&#125;"</span>, describe);</span><br><span class="line"><span class="keyword">this</span>.run();</span><br><span class="line">LOG.info(<span class="string">"执行延时任务结束===========》&#123;&#125;"</span>, describe);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>使用方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//15分钟未支付取消订单操作</span></span><br><span class="line">JSONObject params = <span class="keyword">new</span> JSONObject();</span><br><span class="line">params.put(<span class="string">"id"</span>,<span class="string">"订单ID"</span>);</span><br><span class="line">UnPayCancelOrderTask unPayCancelOrderTask = <span class="keyword">new</span> UnPayCancelOrderTask(<span class="string">"下单后不支付自动取消订单"</span>, TimeUnit.MINUTES.toMillis(<span class="number">15</span>), params);</span><br><span class="line">messageSenderSV.sendDelayTask(unPayCancelOrderTask);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 轮子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> rabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于注解的Redis分布式锁</title>
      <link href="/2020/03/17/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2020/03/17/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>基于之前用redis的lua脚本来实现安全的分布式锁,发现代码是加锁虽然灵活，但是非常的不便捷。每次需要加锁的时候，都要写出非常多的重复性代码。遂…………</p><a id="more"></a><ul><li>为什么使用基于注解的方式？</li></ul><p>基于之前用redis的lua脚本来实现安全的分布式锁,发现代码是加锁虽然灵活，但是非常的不便捷。每次需要加锁的时候，都要写出非常多的重复性代码。遂考虑利用AOP的方式，完成这一重复性的工作。<br>在没利用注解之前加锁方式如下,基本每次都要这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会话ID</span></span><br><span class="line">String uuid = UUID.uuid();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> getLock = RedisLockUtil.tryGetDistributedLock(key, uuid, <span class="number">5000</span>);</span><br><span class="line"><span class="keyword">if</span> (getLock) &#123;</span><br><span class="line">    <span class="comment">//如果获取锁，执行业务代码</span></span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">RedisLockUtil.releaseDistributedLock(key, uuid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于注解的使用放入如下，比较便捷</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Locker(key &#x3D; RedisKeyEnum.POOL_ORDER_LOCK, paramExp &#x3D; &quot;0&quot;, noGetMsg &#x3D; &quot;老铁来晚了!&quot;)</span><br><span class="line">public GrabAndAnswerVo grabOrderAnswer(String orderId, RedisKeyEnum poolType, User currentUser) &#123;</span><br><span class="line">Long workId &#x3D; orderExist(poolType, orderId);</span><br><span class="line">return doctorGrabOrderAnswer(poolType, orderId, currentUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下面介绍以下代码</li></ul><ol><li>首先AOP的使用方式我定义为利用注解来判断是否需要加锁，类似事务的方式，我们定义一个Locker注解,这个注解的功能可以看代码;</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 锁注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 625</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Locker &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要锁定的Key</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">RedisKeyEnum <span class="title">key</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要锁定的参数</span></span><br><span class="line"><span class="comment"> * 格式:</span></span><br><span class="line"><span class="comment"> * 0    表示一个参数toString</span></span><br><span class="line"><span class="comment"> * 0?payOrder    表示一个参数toString，且额外拼接锁定的Key为payOrder</span></span><br><span class="line"><span class="comment"> * 0#name 表示第一个参数的name字段</span></span><br><span class="line"><span class="comment"> * 0#name?payOrder  表示第一个参数的name字段，且额外拼接锁定的Key为payOrder</span></span><br><span class="line"><span class="comment"> * 0#name+1#name?payOrder表示第一个参数的name字段+第二个参数的name字段，且额外拼接锁定的Key为payOrder</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">paramExp</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务超时自动释放锁的时间,应该大于正常业务执行时间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">expireTime</span><span class="params">()</span> <span class="keyword">default</span> 10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最小持有锁的时间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">limitTime</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否持续竞争锁，是则阻塞方法直至获取锁，或者达到最大竞争次数释放锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">continueGet</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最大竞争次数。默认0不限次</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxGetNum</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拿不到锁，异常返回信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">noGetMsg</span><span class="params">()</span> <span class="keyword">default</span> "未获取锁"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现AOP的拦截规则</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 锁AOP拦截规则</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">public class LockerAspect &#123;</span><br><span class="line"></span><br><span class="line">private static Logger LOGGER &#x3D; LoggerFactory.getLogger(LockerAspect.class);</span><br><span class="line"></span><br><span class="line">@Pointcut(&quot;@annotation(com.ym.common.utils.annotation.Locker)&quot;)</span><br><span class="line">public void pointcut() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Around(&quot;pointcut()&quot;)</span><br><span class="line">public Object around(ProceedingJoinPoint joinPoint) &#123;</span><br><span class="line">Object proceed &#x3D; null;</span><br><span class="line">long startTime &#x3D; System.currentTimeMillis();</span><br><span class="line">Locker locker &#x3D; getAnnotation(joinPoint, Locker.class);</span><br><span class="line">Object[] args &#x3D; joinPoint.getArgs();</span><br><span class="line">&#x2F;&#x2F; 最大尝试次数</span><br><span class="line">int maxGetNum &#x3D; locker.maxGetNum();</span><br><span class="line">&#x2F;&#x2F; 会话标志</span><br><span class="line">String uuid &#x3D; UUID.uuid();</span><br><span class="line">&#x2F;&#x2F; 锁key</span><br><span class="line">String lockFiled &#x3D; getLockFiled(args, locker.paramExp());</span><br><span class="line">String lockKey &#x3D; RedisKeyUtil.keyBuilder(locker.key(), lockFiled);</span><br><span class="line">&#x2F;&#x2F; 过期时间</span><br><span class="line">long expireTime &#x3D; locker.expireTime();</span><br><span class="line">boolean lock &#x3D; RedisLockUtil.tryGetDistributedLock(lockKey, uuid, expireTime);</span><br><span class="line">int getNum &#x3D; 0;</span><br><span class="line">while (!lock &amp;&amp; locker.continueGet() &amp;&amp; (maxGetNum &#x3D;&#x3D; 0 || getNum &lt; maxGetNum)) &#123;</span><br><span class="line">&#x2F;&#x2F; 如果获取失败，且持续获取，且尝试次数小于最大次数</span><br><span class="line">Threads.sleep(100);</span><br><span class="line">lock &#x3D; RedisLockUtil.tryGetDistributedLock(lockKey, uuid, expireTime);</span><br><span class="line">&#125;</span><br><span class="line">if (!lock) &#123;</span><br><span class="line">throw new BusinessException(locker.noGetMsg());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; -------------------------------before-------------------------</span><br><span class="line">try &#123;</span><br><span class="line">proceed &#x3D; joinPoint.proceed();</span><br><span class="line">&#x2F;&#x2F; -------------------------------after-------------------------</span><br><span class="line">&#x2F;&#x2F; 如果业务时间小于最小持有锁时间，休眠一会</span><br><span class="line">long sleepTime &#x3D; locker.limitTime() - (System.currentTimeMillis() - startTime);</span><br><span class="line">if (sleepTime &gt; 0) &#123;</span><br><span class="line">Threads.sleep(sleepTime);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Throwable throwable) &#123;</span><br><span class="line">throwable.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">&#x2F;&#x2F; 释放锁</span><br><span class="line">RedisLockUtil.releaseDistributedLock(lockKey, uuid);</span><br><span class="line">&#125;</span><br><span class="line">return proceed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 根据表达式获取要锁的字段</span><br><span class="line"> *</span><br><span class="line"> * @param args</span><br><span class="line"> * @param expression 表达式</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">private String getLockFiled(Object[] args, String expression) &#123;</span><br><span class="line">if (args &#x3D;&#x3D; null || args.length &#x3D;&#x3D; 0 || StringUtils.isBlank(expression)) &#123;</span><br><span class="line">throw new UnsupportedOperationException(&quot;Locker所在方法参数为空! 请使用代码锁&quot;);</span><br><span class="line">&#125;</span><br><span class="line">String[] extraParams &#x3D; expression.split(&quot;\\?&quot;);</span><br><span class="line">String extraKey &#x3D; null;</span><br><span class="line">if (extraParams.length &gt; 1) &#123;</span><br><span class="line">extraKey &#x3D; extraParams[1];</span><br><span class="line">expression &#x3D; extraParams[0];</span><br><span class="line">&#125;</span><br><span class="line">String[] commboExpression &#x3D; expression.split(&quot;\\+&quot;);</span><br><span class="line">StringBuilder field &#x3D; new StringBuilder();</span><br><span class="line">for (String commbo : commboExpression) &#123;</span><br><span class="line">String[] split &#x3D; commbo.split(&quot;#&quot;);</span><br><span class="line">int argsNum &#x3D; 0;</span><br><span class="line">try &#123;</span><br><span class="line">if (split.length &#x3D;&#x3D; 1) &#123;</span><br><span class="line">argsNum &#x3D; Integer.parseInt(split[0]);</span><br><span class="line">field.append(String.valueOf(args[argsNum]));</span><br><span class="line">&#125; else &#123;</span><br><span class="line">argsNum &#x3D; Integer.parseInt(split[0]);</span><br><span class="line">Object fieldValue &#x3D; ReflectUtils.getFieldValue(args[argsNum], split[1]);</span><br><span class="line">field.append(String.valueOf(fieldValue));</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">throw new UnsupportedOperationException(&quot;Locker表达式paramExp不正确！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (extraKey !&#x3D; null) &#123;</span><br><span class="line">field.append(extraKey);</span><br><span class="line">&#125;</span><br><span class="line">return field.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 是否存在注解，如果存在就获取</span><br><span class="line"> *&#x2F;</span><br><span class="line">private &lt;T&gt; T getAnnotation(JoinPoint joinPoint, Class&lt;? extends Annotation&gt; t) &#123;</span><br><span class="line">Signature signature &#x3D; joinPoint.getSignature();</span><br><span class="line">MethodSignature methodSignature &#x3D; (MethodSignature) signature;</span><br><span class="line">Method method &#x3D; methodSignature.getMethod();</span><br><span class="line">if (method !&#x3D; null) &#123;</span><br><span class="line">return (T) method.getAnnotation(t);</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 分布式锁 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis锁 </tag>
            
            <tag> 分布式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java根据文件流准确判定文件类型</title>
      <link href="/2020/03/17/Java%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E6%B5%81%E5%87%86%E7%A1%AE%E5%88%A4%E5%AE%9A%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/03/17/Java%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E6%B5%81%E5%87%86%E7%A1%AE%E5%88%A4%E5%AE%9A%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>判断文件类型通常可以简单的通过文件的后缀判定，如123.MP3,则判定文件的格式是MP3可播放文件。但是到底能不能播放，其实并不是通过后缀…..</p><a id="more"></a><p>判断文件类型通常可以简单的通过文件的后缀判定，如123.MP3,则判定文件的格式是MP3可播放文件。但是到底能不能播放，其实并不是通过后缀判断的。而是通过文件本身的二进制数据，软件来解析到底一定的目的。话不多说上代码，通过判断文件流的前几个字节，来判断文件的类型。可以自己添加新的类型，类型不一定对，可以自己调试调整一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.common.utils.qiniu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTypeHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;String, String&gt; FILE_TYPE_MAP = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">FileTypeHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">//初始化文件类型信息</span></span><br><span class="line">getAllFileType();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2010-7-1</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Discription:[getAllFileType,常见文件头信息]&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:[shixing_11@sina.com]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFileType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"jpg"</span>, <span class="string">"FFD8FF"</span>); <span class="comment">//JPEG (jpg)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"png"</span>, <span class="string">"89504E47"</span>);  <span class="comment">//PNG (png)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"gif"</span>, <span class="string">"47494638"</span>);  <span class="comment">//GIF (gif)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"tif"</span>, <span class="string">"49492A00"</span>);  <span class="comment">//TIFF (tif)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"bmp"</span>, <span class="string">"424D"</span>); <span class="comment">//Windows Bitmap (bmp)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"dwg"</span>, <span class="string">"41433130"</span>); <span class="comment">//CAD (dwg)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"html"</span>, <span class="string">"68746D6C3E"</span>);  <span class="comment">//HTML (html)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"rtf"</span>, <span class="string">"7B5C727466"</span>);  <span class="comment">//Rich Text Format (rtf)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"xml"</span>, <span class="string">"3C3F786D6C"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"zip"</span>, <span class="string">"504B03041400000008005959104FFE4A759FF1"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"rar"</span>, <span class="string">"52617221"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"psd"</span>, <span class="string">"38425053"</span>);  <span class="comment">//Photoshop (psd)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"eml"</span>, <span class="string">"44656C69766572792D646174653A"</span>);  <span class="comment">//Email [thorough only] (eml)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"dbx"</span>, <span class="string">"CFAD12FEC5FD746F"</span>);  <span class="comment">//Outlook Express (dbx)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"pst"</span>, <span class="string">"2142444E"</span>);  <span class="comment">//Outlook (pst)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"xls"</span>, <span class="string">"D0CF11E0A1B11AE1000000000000000000000000000000003B"</span>);  <span class="comment">//MS Word</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"xlsx"</span>, <span class="string">"504B03041400060008000000210097454E26A"</span>);  <span class="comment">//MS Word</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"docx"</span>, <span class="string">"504B030414000600080000002100DFA4D26C5A"</span>);  <span class="comment">//MS Excel 注意：word 和 excel的文件头一样</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"pptx"</span>, <span class="string">"504B030414000600080000002100DFCC18F5AD"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"doc"</span>, <span class="string">"D0CF11E0A1B11AE1000000000000000000000000000000003E000300FEFF090006000000000000000000000001"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"ppt"</span>, <span class="string">"D0CF11E0A1B11AE1000000000000000000000000000000003E000300FEFF090006000000000000000000000003"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mdb"</span>, <span class="string">"5374616E64617264204A"</span>);  <span class="comment">//MS Access (mdb)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"wpd"</span>, <span class="string">"FF575043"</span>); <span class="comment">//WordPerfect (wpd)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"eps"</span>, <span class="string">"252150532D41646F6265"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"ps"</span>, <span class="string">"252150532D41646F6265"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"pdf"</span>, <span class="string">"255044462D312E"</span>);  <span class="comment">//Adobe Acrobat (pdf)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"qdf"</span>, <span class="string">"AC9EBD8F"</span>);  <span class="comment">//Quicken (qdf)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"pwl"</span>, <span class="string">"E3828596"</span>);  <span class="comment">//Windows Password (pwl)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"wav"</span>, <span class="string">"57415645,52494646"</span>);  <span class="comment">//Wave (wav)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"avi"</span>, <span class="string">"41564920"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"ram"</span>, <span class="string">"2E7261FD"</span>);  <span class="comment">//Real Audio (ram)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"rm"</span>, <span class="string">"2E524D46"</span>);  <span class="comment">//Real Media (rm)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mpg"</span>, <span class="string">"000001BA"</span>);  <span class="comment">//</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mov"</span>, <span class="string">"6D6F6F76"</span>);  <span class="comment">//Quicktime (mov)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"asf"</span>, <span class="string">"3026B2758E66CF11"</span>); <span class="comment">//Windows Media (asf)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mid"</span>, <span class="string">"4D546864"</span>);  <span class="comment">//MIDI (mid)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"aac"</span>, <span class="string">"FFF15C4013"</span>);  <span class="comment">//aac语音</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mp3"</span>, <span class="string">"FFE368"</span>);  <span class="comment">//mp3</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"webm"</span>, <span class="string">"1A45DFA39F42868101"</span>);  <span class="comment">//webm</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"m4a"</span>, <span class="string">"0000001C667479704D344120000000004D3441206D70"</span>);  <span class="comment">//webm</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据文件判定流类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getFileTypeByFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">InputStream is = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> getFileTypeByStream(is);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据流判定文件类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> is</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getFileTypeByStream</span><span class="params">(InputStream is)</span> </span>&#123;</span><br><span class="line">String filetype = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is.read(b);</span><br><span class="line">filetype = getFileTypeByByte(b);</span><br><span class="line">is.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> filetype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2010-7-1</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Discription:[getFileTypeByStream]&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> fileType</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:[shixing_11@sina.com]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getFileTypeByByte</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">String filetypeHex = String.valueOf(getFileHexString(b));</span><br><span class="line">Iterator&lt;Entry&lt;String, String&gt;&gt; entryiterator = FILE_TYPE_MAP.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (entryiterator.hasNext()) &#123;</span><br><span class="line">Entry&lt;String, String&gt; entry = entryiterator.next();</span><br><span class="line">String fileTypeHexValue = entry.getValue();</span><br><span class="line">String[] split = fileTypeHexValue.split(<span class="string">","</span>);</span><br><span class="line"><span class="keyword">for</span> (String sufix : split) &#123;</span><br><span class="line"><span class="keyword">if</span> (filetypeHex.toUpperCase().startsWith(sufix)) &#123;</span><br><span class="line"><span class="keyword">return</span> entry.getKey();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"txt"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2010-7-1</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Discription:[getFileHexString]&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> fileTypeHex</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:[shixing_11@sina.com]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getFileHexString</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">int</span> byteLength = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="keyword">null</span> || b.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b.length &lt; byteLength) &#123;</span><br><span class="line">byteLength = b.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteLength; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> v = b[i] &amp; <span class="number">0xFF</span>;</span><br><span class="line">String hv = Integer.toHexString(v);</span><br><span class="line"><span class="keyword">if</span> (hv.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">stringBuilder.append(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">stringBuilder.append(hv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 轮子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 文件类型判断 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一些常用的linux基础命令</title>
      <link href="/2020/03/17/Linux%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
      <url>/2020/03/17/Linux%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>记录一些日常用到的基础命令,防止重复去百度搜索,主要是Centos中,个人记不住的一些命令,ls什么的肯定没有记录</p><a id="more"></a><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><ul><li><p>端口占用情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; lsof -i tcp:8000 </span><br><span class="line">&gt; netstat -tunlp |grep 8000</span><br></pre></td></tr></table></figure></li><li><p>列出所有端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; netstat -ntlp</span><br></pre></td></tr></table></figure></li><li><p>根据程序名找进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ps axu |grep 程序名&#x2F;端口号&#x2F;IP等等</span><br></pre></td></tr></table></figure></li><li><p>查询指定端口是否已开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; firewall-cmd --query-port&#x3D;666&#x2F;tcp</span><br></pre></td></tr></table></figure></li><li><p>查看所有开放的端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; iptables -t filter -L INPUT</span><br></pre></td></tr></table></figure></li></ul><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><ul><li><p>查看防火墙状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; systemctl status firewalld</span><br></pre></td></tr></table></figure></li><li><p>开启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; systemctl start firewalld</span><br><span class="line">&gt; service firewalld start </span><br><span class="line">&gt; ##若遇到无法开启,先用：</span><br><span class="line">&gt; systemctl unmask firewalld.service </span><br><span class="line">&gt; 然后：</span><br><span class="line">&gt; systemctl start firewalld.service</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; systemctl stop firewalld</span><br></pre></td></tr></table></figure></li><li><p>对外开放端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; firewall-cmd --zone&#x3D;public --add-port&#x3D;8080&#x2F;tcp --permanent</span><br><span class="line">&gt;  iptables -I INPUT -p tcp --dport 9150 -j ACCEPT</span><br><span class="line">&gt; ##或者</span><br><span class="line">&gt; sudo vi sysconfig&#x2F;iptables</span><br><span class="line">&gt; ##然后</span><br><span class="line">&gt; -A INPUT -m state --state NEW -m tcp -p tcp --dport 9150 -j ACCEPT</span><br></pre></td></tr></table></figure></li><li><p>查看对外开放的端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; iptables -t filter -L INPUT</span><br></pre></td></tr></table></figure></li><li><p>重启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; firewall-cmd --reload systemctl </span><br><span class="line">&gt; restart firewalld.service；</span><br></pre></td></tr></table></figure></li><li><p>关闭指定端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; firewall-cmd --permanent --remove-port&#x3D;123&#x2F;tcp</span><br></pre></td></tr></table></figure></li></ul><h4 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h4><ul><li><p>关键词查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ##执行的是返回的内容 </span><br><span class="line">&gt; grep 正则 文件目录</span><br></pre></td></tr></table></figure></li><li><p>关键词查找及随后的目录中搜索字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; grep -R 正则 文件目录</span><br></pre></td></tr></table></figure></li></ul><h4 id="jvm相关"><a href="#jvm相关" class="headerlink" title="jvm相关"></a>jvm相关</h4><ul><li>查看JAVA进程并输出JVM参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jps -v</span><br></pre></td></tr></table></figure><ul><li><p>dump堆到文件,format指定输出格式，live指明是活着的对象,file指定文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jmap -dump:live,format&#x3D;b,file&#x3D;dump.hprof 28920</span><br></pre></td></tr></table></figure></li><li><p>查看堆的使用情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jmap -heap 28920</span><br></pre></td></tr></table></figure></li><li><p>查看堆中的对象信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jmap -histo:live 28920 | more</span><br></pre></td></tr></table></figure></li><li><p>查看当前程序的线程快照</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;  jstack -l 11494|more</span><br></pre></td></tr></table></figure></li><li><p>实时查看调整Jvm参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jinfo -flag 11494</span><br></pre></td></tr></table></figure></li></ul><h4 id="系统信息查看"><a href="#系统信息查看" class="headerlink" title="系统信息查看"></a>系统信息查看</h4><ul><li>显示电脑以及操作系统的相关信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; uname -a</span><br></pre></td></tr></table></figure></li><li>正在运行的内核版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat &#x2F;proc&#x2F;version</span><br></pre></td></tr></table></figure></li><li>发行版本信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat &#x2F;etc&#x2F;issue</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 基础命令 </tag>
            
            <tag> Jvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Delayed实现一个定时延时任务</title>
      <link href="/2020/03/17/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2020/03/17/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>在spring中加入一个守护线程+延时队列来处理一些延时任务.比如用户注册后5分钟后发送短信.等等</p><a id="more"></a><h3 id="延时任务Bean的实现"><a href="#延时任务Bean的实现" class="headerlink" title="延时任务Bean的实现"></a>延时任务Bean的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Delayed;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时队列Task</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 创建时间：2018年6月16日 下午3:34:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayedTask</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Runnable</span>&gt; <span class="keyword">implements</span> <span class="title">Delayed</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 到期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 问题对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T task;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong atomic = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DelayedTask</span><span class="params">(<span class="keyword">long</span> timeout, T t, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = System.nanoTime() + timeout;</span><br><span class="line">        <span class="keyword">this</span>.task = t;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.n = atomic.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回与此对象相关的剩余延迟时间，以给定的时间单位表示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unit.convert(<span class="keyword">this</span>.time - System.nanoTime(), TimeUnit.NANOSECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed other)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">if</span> (other == <span class="keyword">this</span>) <span class="comment">// compare zero ONLY if same object</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (other <span class="keyword">instanceof</span> DelayedTask) &#123;</span><br><span class="line">            DelayedTask&lt;Runnable&gt; x = (DelayedTask) other;</span><br><span class="line">            <span class="keyword">long</span> diff = time - x.time;</span><br><span class="line">            <span class="keyword">if</span> (diff &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (diff &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (getN() &lt; x.getN())</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> d = (getDelay(TimeUnit.NANOSECONDS) - other.getDelay(TimeUnit.NANOSECONDS));</span><br><span class="line">        <span class="keyword">return</span> (d == <span class="number">0</span>) ? <span class="number">0</span> : ((d &lt; <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.task;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> task.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (object <span class="keyword">instanceof</span> DelayedTask) &#123;</span><br><span class="line">            <span class="keyword">return</span> object.hashCode() == hashCode() ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring容器Bean的定义"><a href="#Spring容器Bean的定义" class="headerlink" title="Spring容器Bean的定义"></a>Spring容器Bean的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.web.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ym.common.utils.DelayedTask;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.DelayQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时队列任务管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 创建时间：2018年6月16日 下午3:35:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskQueueBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(TaskQueueBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TaskQueueBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> TaskQueueBean taskQueueDaemonThread = <span class="keyword">new</span> TaskQueueBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TaskQueueBean <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LazyHolder.taskQueueDaemonThread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行任务的线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ExecutorService executor = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个最初为空的新 DelayQueue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DelayQueue&lt;DelayedTask&lt;Runnable&gt;&gt; queue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 守护线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Thread daemonThread;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化守护线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.初始化线程池</span></span><br><span class="line">        <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">            started = <span class="keyword">true</span>;</span><br><span class="line">            executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line">            queue = <span class="keyword">new</span> DelayQueue&lt;&gt;();</span><br><span class="line">            <span class="comment">// 2.判断是否启动</span></span><br><span class="line">            <span class="keyword">if</span> (daemonThread != <span class="keyword">null</span> &amp;&amp; daemonThread.isInterrupted()) &#123;</span><br><span class="line">                daemonThread.start();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        daemonThread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    execute();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    daemonThread.interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        daemonThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        daemonThread.setName(<span class="string">"DelayedTask"</span>);</span><br><span class="line">        daemonThread.start();</span><br><span class="line">        LOG.info(<span class="string">"~~~~~~~~~~~~~~~~~~~~延时任务开启~~~~~~~~~~~~~~~~~~~~~~~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"[ task start &#123;&#125; ]:"</span>, System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">while</span> (started) &#123;</span><br><span class="line">            <span class="comment">// 从延迟队列中取值,如果没有对象过期则队列一直等待，</span></span><br><span class="line">            DelayedTask&lt;Runnable&gt; t1 = queue.take();</span><br><span class="line">            <span class="keyword">if</span> (t1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 修改问题的状态</span></span><br><span class="line">                Runnable task = t1.getTask();</span><br><span class="line">                <span class="keyword">if</span> (task == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                executor.execute(task);</span><br><span class="line">                LOG.info(<span class="string">"[ &#123;&#125;  task &#123;&#125; execute  ] "</span>, t1.getN(), t1.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加任务， time 延迟时间 task 任务 用户为问题设置延迟时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">long</span> time, Runnable task, String taskName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"请先启动taskQueneBean！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 转换成ns</span></span><br><span class="line">        <span class="keyword">long</span> nanoTime = TimeUnit.NANOSECONDS.convert(time, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="comment">// 创建一个任务</span></span><br><span class="line">        DelayedTask&lt;Runnable&gt; k = <span class="keyword">new</span> DelayedTask&lt;Runnable&gt;(nanoTime, task, taskName);</span><br><span class="line">        <span class="comment">// 将任务放在延迟的队列中</span></span><br><span class="line">        queue.put(k);</span><br><span class="line">        LOG.info(<span class="string">"新任务：&#123;&#125;加入队列，当前队列任务数量：&#123;&#125;"</span>, taskName, queue.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">endTask</span><span class="params">(DelayedTask&lt;Runnable&gt; task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"请先启动taskQueneBean！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.remove(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手动关闭任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (started) &#123;</span><br><span class="line">            LOG.info(<span class="string">"shutdown TaskQueueBean"</span>);</span><br><span class="line">            started = <span class="keyword">false</span>;</span><br><span class="line">            daemonThread.interrupt();</span><br><span class="line">            executor.shutdown();</span><br><span class="line">            daemonThread = <span class="keyword">null</span>;</span><br><span class="line">            queue = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 轮子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轮子 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>实现基于Redis的lua的分布式锁</title>
      <link href="/2020/03/17/%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8ERedis%E7%9A%84lua%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
      <url>/2020/03/17/%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8ERedis%E7%9A%84lua%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
      
        <content type="html"><![CDATA[<p>基于目前有需求需要实现一个分布式锁,用zk的话由于项目本身暂时没有用到zk,所以暂不考虑zk锁.用redis的lua脚本来实现安全的分布式锁,保证指令的原子性.</p><a id="more"></a><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.common.utils.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ym.common.utils.Sha1Util;</span><br><span class="line"><span class="keyword">import</span> com.ym.common.utils.spring.SpringUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.script.RedisScript;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于redis lua分布式锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年05月08日 16:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(RedisLockUtil<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long SUCCESS = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁lua脚本,不可重入,reqId只是为了解锁使用,代表当前线程在使用资源,给UUID比较好</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SCRIPT_LOCK = <span class="string">"if redis.call('setnx', KEYS[1], ARGV[1]) == 1 then redis.call('pexpire', KEYS[1], ARGV[2]) return 1 else return 0 end"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁lua脚本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SCRIPT_UNLOCK = <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁脚本sha1值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SCRIPT_LOCK_SHA1 = Sha1Util.encrypt(SCRIPT_LOCK);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁脚本sha1值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SCRIPT_UNLOCK_SHA1 = Sha1Util.encrypt(SCRIPT_UNLOCK);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部持有模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RedisTemplate redisTemplate = (RedisTemplate) SpringUtil.getObject(<span class="string">"redisTemplate"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取分布式锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey                锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId              请求标识,唯一ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTimeMilliseconds 超期时间，多少毫秒后这把锁自动释放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回true表示拿到锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryGetDistributedLock</span><span class="params">(String lockKey, String requestId, <span class="keyword">int</span> expireTimeMilliseconds)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"[&#123;&#125;]尝试获取[&#123;&#125;]锁,超时时间为:&#123;&#125;毫秒"</span>, requestId, lockKey, expireTimeMilliseconds);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 脚本设置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> RedisScript&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getSha1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> SCRIPT_LOCK_SHA1;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Class&lt;Long&gt; <span class="title">getResultType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Long<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getScriptAsString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> SCRIPT_LOCK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        Object result = redisTemplate.execute(</span><br><span class="line">                redisScript,<span class="comment">// lua脚本</span></span><br><span class="line">                Collections.singletonList(lockKey),<span class="comment">// KEYS[1]</span></span><br><span class="line">                requestId, <span class="comment">// ARGV[1]</span></span><br><span class="line">                expireTimeMilliseconds <span class="comment">// ARGV[2]</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">boolean</span> b = SUCCESS.equals(result);</span><br><span class="line">        LOGGER.info(<span class="string">"释放结果:"</span>, b);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放分布式锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey   锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId 请求标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回true表示释放锁成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">releaseDistributedLock</span><span class="params">(String lockKey, String requestId)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"[&#123;&#125;]释放锁[&#123;&#125;]锁"</span>, requestId, lockKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * lua脚本</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> RedisScript&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getSha1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> SCRIPT_UNLOCK_SHA1;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Class&lt;Long&gt; <span class="title">getResultType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Long<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getScriptAsString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> SCRIPT_UNLOCK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        Object result = redisTemplate.execute(</span><br><span class="line">                redisScript,</span><br><span class="line">                Collections.singletonList(lockKey),</span><br><span class="line">                requestId</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">boolean</span> b = SUCCESS.equals(result);</span><br><span class="line">        LOGGER.info(<span class="string">"释放结果:"</span>, b);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分布式 </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>上传自己的git项目到maven</title>
      <link href="/2020/03/17/%E4%B8%8A%E4%BC%A0%E8%87%AA%E5%B7%B1%E7%9A%84git%E9%A1%B9%E7%9B%AE%E5%88%B0maven/"/>
      <url>/2020/03/17/%E4%B8%8A%E4%BC%A0%E8%87%AA%E5%B7%B1%E7%9A%84git%E9%A1%B9%E7%9B%AE%E5%88%B0maven/</url>
      
        <content type="html"><![CDATA[<p>上传自己的git项目到maven，结合两位博客成功上传。</p><a id="more"></a><h3 id="感谢两位博主，地址分别为"><a href="#感谢两位博主，地址分别为" class="headerlink" title="感谢两位博主，地址分别为"></a>感谢两位博主，地址分别为</h3><ol><li><a href="https://www.jianshu.com/p/8c3d7fb09bce" target="_blank" rel="noopener">https://www.jianshu.com/p/8c3d7fb09bce</a></li><li><a href="https://blog.csdn.net/sinat_23290725/article/details/85018092" target="_blank" rel="noopener">https://blog.csdn.net/sinat_23290725/article/details/85018092</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongo搭建副本集</title>
      <link href="/2020/03/17/mongo%E6%90%AD%E5%BB%BA%E5%89%AF%E6%9C%AC%E9%9B%86/"/>
      <url>/2020/03/17/mongo%E6%90%AD%E5%BB%BA%E5%89%AF%E6%9C%AC%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<p>搭建副本集的作用和其他数据库思路大致一样，主从配置，仲裁节点，也就是说最起码要保证3个节点….</p><a id="more"></a><h3 id="Replica-Set介绍"><a href="#Replica-Set介绍" class="headerlink" title="Replica Set介绍"></a>Replica Set介绍</h3><blockquote><p>中文翻译叫做副本集,其实简单来说就是集群当中包含了多份数据，保证主节点挂掉了，备节点能继续提供数据服务，提供的前提就是数据需要和主节点一致。</p></blockquote><p><img src="https://images.gitee.com/uploads/images/2019/0112/092857_9bb8ae47_1215820.png" alt="输入图片说明" title="1358056331_2790.png"></p><ol><li><p>Mongodb(M)表示主节点，Mongodb(S)表示备节点，Mongodb(A)表示仲裁节点。主备节点存储数据，仲裁节点不存储数据。客户端同时连接主节点与备节点，不连接仲裁节点。</p></li><li><p>默认设置下，主节点提供所有增删查改服务，备节点不提供任何服务。但是可以通过设置使备节点提供查询服务，这样就可以减少主节点的压力，当客户端进行数据查询时，请求自动转到备节点上。这个设置叫做Read Preference Modes，同时Java客户端提供了简单的配置方式，可以不必直接对数据库进行操作。</p></li><li><p>仲裁节点是一种特殊的节点，它本身并不存储数据，主要的作用是决定哪一个备节点在主节点挂掉之后提升为主节点，所以客户端不需要连接此节点。这里虽然只有一个备节点，但是仍然需要一个仲裁节点来提升备节点级别。我开始也不相信必须要有仲裁节点，但是自己也试过没仲裁节点的话，主节点挂了备节点还是备节点，所以咱们还是需要它的。</p></li></ol><h3 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h3><ol><li><p>般情况下不会把数据目录建立在mongodb的解压目录下，不过这里方便起见，就建在mongodb解压目录下吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;mongodb&#x2F;data&#x2F;master </span><br><span class="line">mkdir -p &#x2F;mongodb&#x2F;data&#x2F;slaver </span><br><span class="line">mkdir -p &#x2F;mongodb&#x2F;data&#x2F;arbiter  </span><br><span class="line">#三个目录分别对应主，备，仲裁节点</span><br></pre></td></tr></table></figure></li><li><p>建立配置文件,由于配置比较多，所以我们将配置写到文件里，以文件的方式启动，以下配置文件仔细看可以说是只有端口不同，搭建的伪集群。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#master.conf  主节点配置</span><br><span class="line"></span><br><span class="line">#数据存放目录</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;data&#x2F;master  </span><br><span class="line">#日志存放路径</span><br><span class="line">logpath&#x3D;&#x2F;mongodb&#x2F;log&#x2F;master.log</span><br><span class="line">#进程文件</span><br><span class="line">pidfilepath&#x3D;&#x2F;mongodb&#x2F;master.pid</span><br><span class="line">#为每一个数据库按照数据库名建立文件夹存放</span><br><span class="line">directoryperdb&#x3D;true</span><br><span class="line">#以追加的方式记录日志</span><br><span class="line">logappend&#x3D;true</span><br><span class="line">#replica set的名字</span><br><span class="line">replSet&#x3D;testrs</span><br><span class="line">#绑定暴露的ID地址</span><br><span class="line">bind_ip&#x3D;127.0.0.1</span><br><span class="line">#端口</span><br><span class="line">port&#x3D;27017</span><br><span class="line">#mongodb操作日志文件的最大大小。单位为Mb，默认为硬盘剩余空间的5%</span><br><span class="line">oplogSize&#x3D;10000</span><br><span class="line">#以后台方式运行进程</span><br><span class="line">fork&#x3D;true</span><br><span class="line">#不预先分配存储</span><br><span class="line">noprealloc&#x3D;true</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#master.conf  副本节点配置</span><br><span class="line">#slaver.conf</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;data&#x2F;slaver</span><br><span class="line">logpath&#x3D;&#x2F;mongodb&#x2F;log&#x2F;slaver.log</span><br><span class="line">pidfilepath&#x3D;&#x2F;mongodb&#x2F;slaver.pid</span><br><span class="line">directoryperdb&#x3D;true</span><br><span class="line">logappend&#x3D;true</span><br><span class="line">replSet&#x3D;testrs</span><br><span class="line">bind_ip&#x3D;127.0.0.1</span><br><span class="line">port&#x3D;27018</span><br><span class="line">oplogSize&#x3D;10000</span><br><span class="line">fork&#x3D;true</span><br><span class="line">noprealloc&#x3D;true</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#arbiter.conf  仲裁节点配置</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;data&#x2F;arbiter</span><br><span class="line">logpath&#x3D;&#x2F;mongodb&#x2F;log&#x2F;arbiter.log</span><br><span class="line">pidfilepath&#x3D;&#x2F;mongodb&#x2F;arbiter.pid</span><br><span class="line">directoryperdb&#x3D;true</span><br><span class="line">logappend&#x3D;true</span><br><span class="line">replSet&#x3D;testrs</span><br><span class="line">bind_ip&#x3D;127.0.0.1</span><br><span class="line">port&#x3D;27019</span><br><span class="line">oplogSize&#x3D;10000</span><br><span class="line">fork&#x3D;true</span><br><span class="line">noprealloc&#x3D;true</span><br></pre></td></tr></table></figure><ol start="3"><li>启动mongo</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;monood -f master.conf</span><br><span class="line">.&#x2F;mongod -f slaver.conf</span><br><span class="line">.&#x2F;mongod -f arbiter.conf</span><br></pre></td></tr></table></figure><ol start="4"><li>开始配置主从、仲裁节点，可以通过客户端连接mongodb，也可以直接在三个节点中选择一个连接mongodb。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;.&#x2F;mongo 127.0.0.1:27017   #ip和port是某个节点的地址</span><br><span class="line">&gt;use admin</span><br><span class="line">&gt;cfg&#x3D;&#123; _id:&quot;testrs&quot;, members:[ &#123;_id:0,host:&#39;127.0.0.1:27017&#39;,priority:2&#125;, &#123;_id:1,host:&#39;127.0.0.1:27017&#39;,priority:1&#125;, </span><br><span class="line">&#123;_id:2,host:&#39;127.0.0.1:27017&#39;,arbiterOnly:true&#125;] &#125;;</span><br><span class="line">&gt;rs.initiate(cfg)             #使配置生效</span><br></pre></td></tr></table></figure><blockquote><p>cfg是可以任意的名字，当然最好不要是mongodb的关键字，conf，config都可以。最外层的_id表示replica set的名字，members里包含的是所有节点的地址以及优先级。优先级最高的即成为主节点，即这里的127.0.0.1:27017。特别注意的是，对于仲裁节点，需要有个特别的配置——arbiterOnly:true。这个千万不能少了，不然主备模式就不能生效。配置的生效时间根据不同的机器配置会有长有短，配置不错的话基本上十几秒内就能生效，有的配置需要一两分钟。如果生效了，执行rs.status()命令会看到如下信息：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">        &quot;set&quot; : &quot;testrs&quot;,</span><br><span class="line">        &quot;date&quot; : ISODate(&quot;2013-01-05T02:44:43Z&quot;),</span><br><span class="line">        &quot;myState&quot; : 1,</span><br><span class="line">        &quot;members&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;_id&quot; : 0,</span><br><span class="line">                        &quot;name&quot; : &quot;127.0.0.1:27017&quot;,</span><br><span class="line">                        &quot;health&quot; : 1,</span><br><span class="line">                        &quot;state&quot; : 1,</span><br><span class="line">                        &quot;stateStr&quot; : &quot;PRIMARY&quot;,</span><br><span class="line">                        &quot;uptime&quot; : 200,</span><br><span class="line">                        &quot;optime&quot; : Timestamp(1357285565000, 1),</span><br><span class="line">                        &quot;optimeDate&quot; : ISODate(&quot;2013-01-04T07:46:05Z&quot;),</span><br><span class="line">                        &quot;self&quot; : true</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;_id&quot; : 1,</span><br><span class="line">                        &quot;name&quot; : &quot;127.0.0.1:27018&quot;,</span><br><span class="line">                        &quot;health&quot; : 1,</span><br><span class="line">                        &quot;state&quot; : 2,</span><br><span class="line">                        &quot;stateStr&quot; : &quot;SECONDARY&quot;,</span><br><span class="line">                        &quot;uptime&quot; : 200,</span><br><span class="line">                        &quot;optime&quot; : Timestamp(1357285565000, 1),</span><br><span class="line">                        &quot;optimeDate&quot; : ISODate(&quot;2013-01-04T07:46:05Z&quot;),</span><br><span class="line">                        &quot;lastHeartbeat&quot; : ISODate(&quot;2013-01-05T02:44:42Z&quot;),</span><br><span class="line">                        &quot;pingMs&quot; : 0</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;_id&quot; : 2,</span><br><span class="line">                        &quot;name&quot; : &quot;127.0.0.1:27019&quot;,</span><br><span class="line">                        &quot;health&quot; : 1,</span><br><span class="line">                        &quot;state&quot; : 7,</span><br><span class="line">                        &quot;stateStr&quot; : &quot;ARBITER&quot;,</span><br><span class="line">                        &quot;uptime&quot; : 200,</span><br><span class="line">                        &quot;lastHeartbeat&quot; : ISODate(&quot;2013-01-05T02:44:42Z&quot;),</span><br><span class="line">                        &quot;pingMs&quot; : 0</span><br><span class="line">                &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果配置正在生效，其中会包含如下信息,同时可以查看对应节点的日志，发现正在等待别的节点生效或者正在分配数据文件：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;stateStr&quot; : &quot;RECOVERING&quot;</span><br></pre></td></tr></table></figure></p></blockquote><p> 现在基本上已经完成了集群的所有搭建工作。至于测试工作，可以留给大家自己试试。一个是往主节点插入数据，能从备节点查到之前插入的数据（查询备节点可能会遇到某个问题，可以自己去网上查查看）。二是停掉主节点，备节点能变成主节点提供服务。三是恢复主节点，备节点也能恢复其备的角色，而不是继续充当主的角色。二和三都可以通过rs.status()命令实时查看集群的变化。</p><p> <a href="https://blog.csdn.net/luonanqin/article/details/8497860/" target="_blank" rel="noopener">转载来源</a></p>]]></content>
      
      
      <categories>
          
          <category> Mongo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mongo集群 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IDEA快捷键</title>
      <link href="/2020/03/17/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <url>/2020/03/17/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</url>
      
        <content type="html"><![CDATA[<p>IDEA快捷键比较全面的</p><a id="more"></a><h3 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h3><ol><li>Ctrl+Shift + Enter，语句完成</li><li>“！”，否定完成，输入表达式时按 “！”键</li><li>Ctrl+E，最近的文件</li><li>Ctrl+Shift+E，最近更改的文件</li><li>Shift+Click，可以关闭文件</li><li>Ctrl+[ OR ]，可以跑到大括号的开头与结尾</li><li>Ctrl+F12，可以显示当前文件的结构</li><li>Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择</li><li>Ctrl+N，可以快速打开类</li><li>Ctrl+Shift+N，可以快速打开文件</li><li>Alt+Q，可以看到当前方法的声明</li><li>Ctrl+P，可以显示参数信息</li><li>Ctrl+Shift+Insert，可以选择剪贴板内容并插入</li><li>Alt+Insert，可以生成构造器/Getter/Setter等</li><li>Ctrl+Alt+V，可以引入变量。例如：new String();  自动导入变量定义</li><li>Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch</li><li>Ctrl+Enter，导入包，自动修正</li><li>Ctrl+Alt+L，格式化代码</li><li>Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作</li><li>Ctrl+Alt+O，优化导入的类和包</li><li>Ctrl+R，替换文本</li><li>Ctrl+F，查找文本</li><li>Ctrl+Shift+Space，自动补全代码</li><li>Ctrl+空格，代码提示（与系统输入法快捷键冲突）</li><li>Ctrl+Shift+Alt+N，查找类中的方法或变量</li><li>Alt+Shift+C，最近的更改</li><li>Alt+Shift+Up/Down，上/下移一行</li><li>Shift+F6，重构 - 重命名</li><li>Ctrl+X，删除行</li><li>Ctrl+D，复制行</li><li>Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）</li><li>Ctrl+J，自动代码（例如：serr）</li><li>Ctrl+Alt+J，用动态模板环绕</li><li>Ctrl+H，显示类结构图（类的继承层次）</li><li>Ctrl+Q，显示注释文档</li><li>Alt+F1，查找代码所在位置</li><li>Alt+1，快速打开或隐藏工程面板</li><li>Ctrl+Alt+left/right，返回至上次浏览的位置</li><li>Alt+left/right，切换代码视图</li><li>Alt+Up/Down，在方法间快速移动定位</li><li>Ctrl+Shift+Up/Down，向上/下移动语句</li><li>F2 或 Shift+F2，高亮错误或警告快速定位</li><li>Tab，代码标签输入完成后，按 Tab，生成代码</li><li>Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失</li><li>Alt+F3，逐个往下查找相同文本，并高亮显示</li><li>Ctrl+Up/Down，光标中转到第一行或最后一行下</li><li>Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）</li><li>Ctrl+Alt+B，跳转到方法实现处</li><li>Ctrl+Shift+Backspace，跳转到上次编辑的地方</li><li>Ctrl+O，重写方法</li><li>Ctrl+Alt+Space，类名自动完成</li><li>Ctrl+Alt+Up/Down，快速跳转搜索结果</li><li>Ctrl+Shift+J，整合两行</li><li>Alt+F8，计算变量值</li><li>Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本</li><li>Ctrl+Alt+Shift+V，简单粘贴</li><li>Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口</li><li>F12，把焦点从编辑器移到最近使用的工具窗口</li><li>Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</li><li>Ctrl+W，可以选择单词继而语句继而行继而函数</li><li>Ctrl+Shift+W，取消选择光标所在词</li><li>Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置</li><li>Ctrl+I，实现方法</li><li>Ctrl+Shift+U，大小写转化</li><li>Ctrl+Y，删除当前行</li><li>Shift+Enter，向下插入新行</li><li>psvm/sout，main/System.out.println(); Ctrl+J，查看更多</li><li>Ctrl+Shift+F，全局查找</li><li>Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找</li><li>Ctrl+Shift+S，高级搜索</li><li>Ctrl+U，转到父类</li><li>Ctrl+Alt+S，打开设置对话框</li><li>Alt+Shift+Inert，开启/关闭列选择模式</li><li>Ctrl+Alt+Shift+S，打开当前项目/模块属性</li><li>Ctrl+G，定位行</li><li>Alt+Home，跳转到导航栏</li><li>Ctrl+Enter，上插一行</li><li>Ctrl+Backspace，按单词删除</li><li>Ctrl+”+/-“，当前方法展开、折叠</li><li>Ctrl+Shift+”+/-“，全部展开、折叠</li></ol><h3 id="调试部分、编译"><a href="#调试部分、编译" class="headerlink" title="调试部分、编译"></a>调试部分、编译</h3><ol><li>Ctrl+F2，停止</li><li>Alt+Shift+F9，选择 Debug</li><li>Alt+Shift+F10，选择 Run</li><li>Ctrl+Shift+F9，编译</li><li>Ctrl+Shift+F10，运行</li><li>Ctrl+Shift+F8，查看断点</li><li>F8，步过</li><li>F7，步入</li><li>Shift+F7，智能步入</li><li>Shift+F8，步出</li><li>Alt+Shift+F8，强制步过</li><li>Alt+Shift+F7，强制步入</li><li>Alt+F9，运行至光标处</li><li>Ctrl+Alt+F9，强制运行至光标处</li><li>F9，恢复程序</li><li>Alt+F10，定位到断点</li><li>Ctrl+F8，切换行断点</li><li>Ctrl+F9，生成项目</li><li>Alt+1，项目</li><li>Alt+2，收藏</li><li>Alt+6，TODO</li><li>Alt+7，结构</li><li>Ctrl+Shift+C，复制路径</li><li>Ctrl+Alt+Shift+C，复制引用，必须选择类名</li><li>Ctrl+Alt+Y，同步</li><li>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）</li><li>Shift+F12，还原默认布局</li><li>Ctrl+Shift+F12，隐藏/恢复所有窗口</li><li>Ctrl+F4，关闭</li><li>Ctrl+Shift+F4，关闭活动选项卡</li><li>Ctrl+Tab，转到下一个拆分器</li><li>Ctrl+Shift+Tab，转到上一个拆分器</li></ol><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><ol><li>Ctrl+Alt+Shift+T，弹出重构菜单</li><li>Shift+F6，重命名</li><li>F6，移动</li><li>F5，复制</li><li>Alt+Delete，安全删除</li><li>Ctrl+Alt+N，内联</li></ol><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ol><li>Ctrl+F，查找</li><li>Ctrl+R，替换</li><li>F3，查找下一个</li><li>Shift+F3，查找上一个</li><li>Ctrl+Shift+F，在路径中查找</li><li>Ctrl+Shift+R，在路径中替换</li><li>Ctrl+Shift+S，搜索结构</li><li>Ctrl+Shift+M，替换结构</li><li>Alt+F7，查找用法</li><li>Ctrl+Alt+F7，显示用法</li><li>Ctrl+F7，在文件中查找用法</li><li>Ctrl+Shift+F7，在文件中高亮显示用法</li></ol><h3 id="VCS"><a href="#VCS" class="headerlink" title="VCS"></a>VCS</h3><ol><li>Alt+~，VCS 操作菜单</li><li>Ctrl+K，提交更改</li><li>Ctrl+T，更新项目</li><li>Ctrl+Alt+Shift+D，显示变化</li></ol>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> IDEA快捷键 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java实现天平秤秤球？</title>
      <link href="/2020/03/17/Java%E5%AE%9E%E7%8E%B0%E5%A4%A9%E5%B9%B3%E7%A7%A4%E7%90%83/"/>
      <url>/2020/03/17/Java%E5%AE%9E%E7%8E%B0%E5%A4%A9%E5%B9%B3%E7%A7%A4%E7%90%83/</url>
      
        <content type="html"><![CDATA[<p>一朋友发来一道面试题，百度半天没有很合适的，自己实现这个。<br>题目：有N个铁球，其中一个是塑料球。仅使用一个天平，如何快速找到球？</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Boolean[] balls = <span class="keyword">new</span> Boolean[] &#123; <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span></span><br><span class="line">System.out.println(<span class="string">"已知的空球为:"</span> + balls[<span class="number">4</span>].hashCode());</span><br><span class="line">searchBall(balls, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 天平称重找出不同的球，此处通过打印hashCode来判断球的唯一标志</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> balls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> findValue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">searchBall</span><span class="params">(Boolean[] balls, <span class="keyword">boolean</span> findValue)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"称重....."</span>);</span><br><span class="line"><span class="keyword">if</span> (balls == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> indexSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (balls.length % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">size = balls.length - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">size = balls.length;</span><br><span class="line">&#125;</span><br><span class="line">indexSize = size / <span class="number">2</span>;</span><br><span class="line">Boolean[] preBalls = Arrays.copyOfRange(balls, <span class="number">0</span>, indexSize);</span><br><span class="line">Boolean[] lastBalls = Arrays.copyOfRange(balls, indexSize, size);</span><br><span class="line"><span class="keyword">int</span> weight1 = getWeight(preBalls);</span><br><span class="line"><span class="keyword">int</span> weight2 = getWeight(lastBalls);</span><br><span class="line"><span class="keyword">if</span> (weight1 == weight2) &#123;</span><br><span class="line">System.out.println(<span class="string">"已找到不同的球："</span> + balls[balls.length - <span class="number">1</span>].hashCode());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (weight1 &gt; weight2) &#123;</span><br><span class="line"><span class="keyword">if</span> (lastBalls.length == <span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"已找到不同的球：："</span> + lastBalls[<span class="number">0</span>].hashCode());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">searchBall(lastBalls, findValue);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (preBalls.length == <span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"已找到不同的球：："</span> + lastBalls[<span class="number">0</span>].hashCode());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">searchBall(preBalls, findValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 称重方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> balls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getWeight</span><span class="params">(Boolean[] balls)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">boolean</span> b : balls) &#123;</span><br><span class="line"><span class="keyword">if</span> (!b) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果为"><a href="#运行结果为" class="headerlink" title="运行结果为:"></a>运行结果为:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">已知的空球为:1231</span><br><span class="line">称重.....</span><br><span class="line">称重.....</span><br><span class="line">已找到不同的球：：1231</span><br></pre></td></tr></table></figure><p>可以看出来2次称重，找到不规则的球。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法基础题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一致性hash是什么意思？</title>
      <link href="/2020/03/17/%E4%B8%80%E8%87%B4%E6%80%A7hash%E8%A7%A3%E9%87%8A/"/>
      <url>/2020/03/17/%E4%B8%80%E8%87%B4%E6%80%A7hash%E8%A7%A3%E9%87%8A/</url>
      
        <content type="html"><![CDATA[<p>在了解一致性哈希算法之前，最好先了解一下缓存中的一个应用场景，了解了这个应用场景之后，再来理解一致性哈希算法，就容易多了，也更能体现出一致性哈希算法的优点，那么…</p><a id="more"></a><p>&nbsp;</p><p>在了解一致性哈希算法之前，最好先了解一下缓存中的一个应用场景，了解了这个应用场景之后，再来理解一致性哈希算法，就容易多了，也更能体现出一致性哈希算法的优点，那么，我们先来描述一下这个经典的分布式缓存的应用场景。</p><h2 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h2><p>假设，我们有三台缓存服务器，用于缓存图片，我们为这三台缓存服务器编号为0号、1号、2号，现在，有3万张图片需要缓存，我们希望这些图片被均匀的缓存到这3台服务器上，以便它们能够分摊缓存的压力。也就是说，我们希望每台服务器能够缓存1万张左右的图片，那么，我们应该怎样做呢？如果我们没有任何规律的将3万张图片平均的缓存在3台服务器上，可以满足我们的要求吗？可以！但是如果这样做，当我们需要访问某个缓存项时，则需要遍历3台缓存服务器，从3万个缓存项中找到我们需要访问的缓存，遍历的过程效率太低，时间太长，当我们找到需要访问的缓存项时，时长可能是不能被接受的，也就失去了缓存的意义，缓存的目的就是提高速度，改善用户体验，减轻后端服务器压力，如果每次访问一个缓存项都需要遍历所有缓存服务器的所有缓存项，想想就觉得很累，那么，我们该怎么办呢？原始的做法是对缓存项的键进行哈希，将hash后的结果对缓存服务器的数量进行取模操作，通过取模后的结果，决定缓存项将会缓存在哪一台服务器上，这样说可能不太容易理解，我们举例说明，仍然以刚才描述的场景为例，假设我们使用图片名称作为访问图片的key，假设图片名称是不重复的，那么，我们可以使用如下公式，计算出图片应该存放在哪台服务器上。</p><p><strong>hash（图片名称）% N</strong></p><p>因为图片的名称是不重复的，所以，当我们对同一个图片名称做相同的哈希计算时，得出的结果应该是不变的，如果我们有3台服务器，使用哈希后的结果对3求余，那么余数一定是0、1或者2，没错，正好与我们之前的服务器编号相同，如果求余的结果为0， 我们就把当前图片名称对应的图片缓存在0号服务器上，如果余数为1，就把当前图片名对应的图片缓存在1号服务器上，如果余数为2，同理，那么，当我们访问任意一个图片的时候，只要再次对图片名称进行上述运算，即可得出对应的图片应该存放在哪一台缓存服务器上，我们只要在这一台服务器上查找图片即可，如果图片在对应的服务器上不存在，则证明对应的图片没有被缓存，也不用再去遍历其他缓存服务器了，通过这样的方法，即可将3万张图片随机的分布到3台缓存服务器上了，而且下次访问某张图片时，直接能够判断出该图片应该存在于哪台缓存服务器上，这样就能满足我们的需求了，我们暂时称上述算法为HASH算法或者取模算法，取模算法的过程可以用下图表示。</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/hash.png" alt="白话解析：一致性哈希算法 consistent hashing" title="1486487517553357.png"></p><p>但是，使用上述HASH算法进行缓存时，会出现一些缺陷，试想一下，如果3台缓存服务器已经不能满足我们的缓存需求，那么我们应该怎么做呢？没错，很简单，多增加两台缓存服务器不就行了，假设，我们增加了一台缓存服务器，那么缓存服务器的数量就由3台变成了4台，此时，如果仍然使用上述方法对同一张图片进行缓存，那么这张图片所在的服务器编号必定与原来3台服务器时所在的服务器编号不同，因为除数由3变为了4，被除数不变的情况下，余数肯定不同，这种情况带来的结果就是当服务器数量变动时，所有缓存的位置都要发生改变，换句话说，当服务器数量发生改变时，所有缓存在一定时间内是失效的，当应用无法从缓存中获取数据时，则会向后端服务器请求数据，同理，假设3台缓存中突然有一台缓存服务器出现了故障，无法进行缓存，那么我们则需要将故障机器移除，但是如果移除了一台缓存服务器，那么缓存服务器数量从3台变为2台，如果想要访问一张图片，这张图片的缓存位置必定会发生改变，以前缓存的图片也会失去缓存的作用与意义，由于大量缓存在同一时间失效，造成了缓存的雪崩，此时前端缓存已经无法起到承担部分压力的作用，后端服务器将会承受巨大的压力，整个系统很有可能被压垮，所以，我们应该想办法不让这种情况发生，但是由于上述HASH算法本身的缘故，使用取模法进行缓存时，这种情况是无法避免的，为了解决这些问题，一致性哈希算法诞生了。</p><p>&nbsp;</p><p>我们来回顾一下使用上述算法会出现的问题。</p><p>问题1：当缓存服务器数量发生变化时，会引起缓存的雪崩，可能会引起整体系统压力过大而崩溃（大量缓存同一时间失效）。</p><p>问题2：当缓存服务器数量发生变化时，几乎所有缓存的位置都会发生改变，怎样才能尽量减少受影响的缓存呢？</p><p>&nbsp;</p><p>其实，上面两个问题是一个问题，那么，一致性哈希算法能够解决上述问题吗？</p><p>我们现在就来了解一下一致性哈希算法。</p><p>&nbsp; &nbsp;</p><h2 id="一致性哈希算法的基本概念"><a href="#一致性哈希算法的基本概念" class="headerlink" title="一致性哈希算法的基本概念"></a>一致性哈希算法的基本概念</h2><p>其实，一致性哈希算法也是使用取模的方法，只是，刚才描述的取模法是对服务器的数量进行取模，而一致性哈希算法是对2^32取模，什么意思呢？我们慢慢聊。</p><p>&nbsp;</p><p>首先，我们把二的三十二次方想象成一个圆，就像钟表一样，钟表的圆可以理解成由60个点组成的圆，而此处我们把这个圆想象成由2^32个点组成的圆，示意图如下：</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_2.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>圆环的正上方的点代表0，0点右侧的第一个点代表1，以此类推，2、3、4、5、6……直到2^32-1,也就是说0点左侧的第一个点代表2^32-1&nbsp;</p><p>我们把这个由2的32次方个点组成的圆环称为hash环。</p><p>&nbsp;</p><p>那么，一致性哈希算法与上图中的圆环有什么关系呢？我们继续聊，仍然以之前描述的场景为例，假设我们有3台缓存服务器，服务器A、服务器B、服务器C，那么，在生产环境中，这三台服务器肯定有自己的IP地址，我们使用它们各自的IP地址进行哈希计算，使用哈希后的结果对2^32取模，可以使用如下公式示意。</p><p><strong>hash（服务器A的IP地址） % &nbsp;2^32</strong></p><p>通过上述公式算出的结果一定是一个0到2^32-1之间的一个整数，我们就用算出的这个整数，代表服务器A，既然这个整数肯定处于0到2^32-1之间，那么，上图中的hash环上必定有一个点与这个整数对应，而我们刚才已经说明，使用这个整数代表服务器A，那么，服务器A就可以映射到这个环上，用下图示意</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_3.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>同理，服务器B与服务器C也可以通过相同的方法映射到上图中的hash环中</p><p><strong>hash（服务器B的IP地址） % &nbsp;2^32</strong></p><p><strong>hash（服务器C的IP地址） % &nbsp;2^32</strong></p><p>通过上述方法，可以将服务器B与服务器C映射到上图中的hash环上，示意图如下</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_4.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>假设3台服务器映射到hash环上以后如上图所示（当然，这是理想的情况，我们慢慢聊）。</p><p>&nbsp;</p><p>好了，到目前为止，我们已经把缓存服务器与hash环联系在了一起，我们通过上述方法，把缓存服务器映射到了hash环上，那么使用同样的方法，我们也可以将需要缓存的对象映射到hash环上。</p><p>&nbsp;</p><p>假设，我们需要使用缓存服务器缓存图片，而且我们仍然使用图片的名称作为找到图片的key，那么我们使用如下公式可以将图片映射到上图中的hash环上。</p><p><strong>hash（图片名称） % &nbsp;2^32</strong></p><p>映射后的示意图如下，下图中的橘黄色圆形表示图片</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_5.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>好了，现在服务器与图片都被映射到了hash环上，那么上图中的这个图片到底应该被缓存到哪一台服务器上呢？上图中的图片将会被缓存到服务器A上，为什么呢？因为从图片的位置开始，沿顺时针方向遇到的第一个服务器就是A服务器，所以，上图中的图片将会被缓存到服务器A上，如下图所示。</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_6.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>没错，一致性哈希算法就是通过这种方法，判断一个对象应该被缓存到哪台服务器上的，将缓存服务器与被缓存对象都映射到hash环上以后，从被缓存对象的位置出发，沿顺时针方向遇到的第一个服务器，就是当前对象将要缓存于的服务器，由于被缓存对象与服务器hash后的值是固定的，所以，在服务器不变的情况下，一张图片必定会被缓存到固定的服务器上，那么，当下次想要访问这张图片时，只要再次使用相同的算法进行计算，即可算出这个图片被缓存在哪个服务器上，直接去对应的服务器查找对应的图片即可。</p><p>&nbsp;</p><p>刚才的示例只使用了一张图片进行演示，假设有四张图片需要缓存，示意图如下</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_7.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>1号、2号图片将会被缓存到服务器A上，3号图片将会被缓存到服务器B上，4号图片将会被缓存到服务器C上。</p><p>&nbsp; &nbsp;</p><h2 id="一致性哈希算法的优点"><a href="#一致性哈希算法的优点" class="headerlink" title="一致性哈希算法的优点"></a>一致性哈希算法的优点</h2><p>经过上述描述，我想兄弟你应该已经明白了一致性哈希算法的原理了，但是话说回来，一致性哈希算法能够解决之前出现的问题吗，我们说过，如果简单的对服务器数量进行取模，那么当服务器数量发生变化时，会产生缓存的雪崩，从而很有可能导致系统崩溃，那么使用一致性哈希算法，能够避免这个问题吗？我们来模拟一遍，即可得到答案。</p><p>&nbsp;</p><p>假设，服务器B出现了故障，我们现在需要将服务器B移除，那么，我们将上图中的服务器B从hash环上移除即可，移除服务器B以后示意图如下。</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_8.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>在服务器B未移除时，图片3应该被缓存到服务器B中，可是当服务器B移除以后，按照之前描述的一致性哈希算法的规则，图片3应该被缓存到服务器C中，因为从图片3的位置出发，沿顺时针方向遇到的第一个缓存服务器节点就是服务器C，也就是说，如果服务器B出现故障被移除时，图片3的缓存位置会发生改变</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_9.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>&nbsp;</p><p>&nbsp;</p><p>但是，图片4仍然会被缓存到服务器C中，图片1与图片2仍然会被缓存到服务器A中，这与服务器B移除之前并没有任何区别，这就是一致性哈希算法的优点，如果使用之前的hash算法，服务器数量发生改变时，所有服务器的所有缓存在同一时间失效了，而使用一致性哈希算法时，服务器的数量如果发生改变，并不是所有缓存都会失效，而是只有部分缓存会失效，前端的缓存仍然能分担整个系统的压力，而不至于所有压力都在同一时间集中到后端服务器上。</p><p>&nbsp;</p><p>这就是一致性哈希算法所体现出的优点。</p><p>&nbsp; &nbsp;</p><h2 id="hash环的偏斜"><a href="#hash环的偏斜" class="headerlink" title="hash环的偏斜"></a>hash环的偏斜</h2><p>在介绍一致性哈希的概念时，我们理想化的将3台服务器均匀的映射到了hash环上，如下图所示</p><p><img src="http://www.zsythink.net/wp-content/themes/begin/img/blank.gif" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>但是，理想很丰满，现实很骨感，我们想象的与实际情况往往不一样。</p><p><img src="http://www.zsythink.net/wp-content/themes/begin/img/blank.gif" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>在实际的映射中，服务器可能会被映射成如下模样。</p><p><img src="http://www.zsythink.net/wp-content/themes/begin/img/blank.gif" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>聪明如你一定想到了，如果服务器被映射成上图中的模样，那么被缓存的对象很有可能大部分集中缓存在某一台服务器上，如下图所示。</p><p><img src="http://www.zsythink.net/wp-content/themes/begin/img/blank.gif" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>上图中，1号、2号、3号、4号、6号图片均被缓存在了服务器A上，只有5号图片被缓存在了服务器B上，服务器C上甚至没有缓存任何图片，如果出现上图中的情况，A、B、C三台服务器并没有被合理的平均的充分利用，缓存分布的极度不均匀，而且，如果此时服务器A出现故障，那么失效缓存的数量也将达到最大值，在极端情况下，仍然有可能引起系统的崩溃，上图中的情况则被称之为hash环的偏斜，那么，我们应该怎样防止hash环的偏斜呢？一致性hash算法中使用”虚拟节点”解决了这个问题，我们继续聊。</p><p>&nbsp; &nbsp;</p><h2 id="虚拟节点"><a href="#虚拟节点" class="headerlink" title="虚拟节点"></a>虚拟节点</h2><p>话接上文，由于我们只有3台服务器，当我们把服务器映射到hash环上的时候，很有可能出现hash环偏斜的情况，当hash环偏斜以后，缓存往往会极度不均衡的分布在各服务器上，聪明如你一定已经想到了，如果想要均衡的将缓存分布到3台服务器上，最好能让这3台服务器尽量多的、均匀的出现在hash环上，但是，真实的服务器资源只有3台，我们怎样凭空的让它们多起来呢，没错，就是凭空的让服务器节点多起来，既然没有多余的真正的物理服务器节点，我们就只能将现有的物理节点通过虚拟的方法复制出来，这些由实际节点虚拟复制而来的节点被称为”虚拟节点”。加入虚拟节点以后的hash环如下。</p><p><img src="http://www.zsythink.net/wp-content/themes/begin/img/blank.gif" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>“虚拟节点”是”实际节点”（实际的物理服务器）在hash环上的复制品,一个实际节点可以对应多个虚拟节点。</p><p>从上图可以看出，A、B、C三台服务器分别虚拟出了一个虚拟节点，当然，如果你需要，也可以虚拟出更多的虚拟节点。引入虚拟节点的概念后，缓存的分布就均衡多了，上图中，1号、3号图片被缓存在服务器A中，5号、4号图片被缓存在服务器B中，6号、2号图片被缓存在服务器C中，如果你还不放心，可以虚拟出更多的虚拟节点，以便减小hash环偏斜所带来的影响，虚拟节点越多，hash环上的节点就越多，缓存被均匀分布的概率就越大。</p><p>&nbsp; &nbsp;</p><p>好了，一致性哈希算法的原理就总结到这里，如有错误，欢迎赐教，如需转载，请联系作者。</p><p>原文链接：<a href="http://www.zsythink.net/archives/1182" target="_blank" rel="noopener">白话解析：一致性哈希算法 consistent hashing</a></p><p>&nbsp;</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis基本介绍</title>
      <link href="/2020/03/17/Redis%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
      <url>/2020/03/17/Redis%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<ul><li><strong>Redis是什么？</strong><blockquote><p>Redis安装在磁盘；Redis数据存储在内存，redis是一种基于键值对（key-value）数据库，其中value可以为string、hash、list、set、zset等多种数据结构，可以满足很多应用场景。还提供了键过期，发布订阅，事务，流水线，等附加功能。Redis 的流水线功能允许客户端一次将多个命令请求发送给服务器， 并将被执行的多个命令请求的结果在一个命令回复中全部返回给客户端， 使用这个功能可以有效地减少客户端在执行多个命令时需要与服务器进行通信的次数。</p></blockquote></li></ul><a id="more"></a><ul><li><p><strong>Redis是什么？</strong></p><blockquote><p>Redis安装在磁盘；Redis数据存储在内存，redis是一种基于键值对（key-value）数据库，其中value可以为string、hash、list、set、zset等多种数据结构，可以满足很多应用场景。还提供了键过期，发布订阅，事务，流水线，等附加功能。Redis 的流水线功能允许客户端一次将多个命令请求发送给服务器， 并将被执行的多个命令请求的结果在一个命令回复中全部返回给客户端， 使用这个功能可以有效地减少客户端在执行多个命令时需要与服务器进行通信的次数。</p></blockquote></li><li><p><strong>特性</strong></p><blockquote><ol><li>速度快，数据放在内存中，官方给出的读写性能10万/S，与机器性能也有关<blockquote><ul><li>数据放内存中是速度快的主要原因</li><li>C语言实现，与操作系统距离近</li><li>使用了单线程架构，预防多线程可能产生的竞争问题</li></ul></blockquote></li><li>键值对的数据结构服务器</li><li>丰富的功能：见上功能</li><li>简单稳定：单线程</li><li>持久化：发生断电或机器故障，数据可能会丢失，持久化到硬盘</li><li>主从复制：实现多个相同数据的redis副本</li><li>高可用和分布式：哨兵机制实现高可用，保证redis节点故障发现和自动转移</li><li>客户端语言多：java php python c c++ nodejs等</li></ol></blockquote></li><li><p><strong>使用场景</strong></p><blockquote><ol><li>缓存：合理使用缓存加快数据访问速度，降低后端数据源压力</li><li>排行榜：按照热度排名，按照发布时间排行，主要用到列表和有序集合</li><li>计数器应用：视频网站播放数，网站浏览数，使用redis计数</li><li>社交网络：赞、踩、粉丝、下拉刷新</li><li>消息队列：发布和订阅</li></ol></blockquote></li><li><p><strong>常用客户端命令</strong></p></li></ul><table><thead><tr><th>可执行文件</th><th>作用</th></tr></thead><tbody><tr><td>redis-server</td><td>启动redis</td></tr><tr><td>redis-cli</td><td>redis命令行客户端</td></tr><tr><td>redis-benchmark</td><td>基准测试工具</td></tr><tr><td>redis-check-aof</td><td>AOF持久化文件检测和修复工具</td></tr><tr><td>redis-check-dump</td><td>RDB持久化文件检测和修复工具</td></tr><tr><td>redis-sentinel</td><td>启动哨兵</td></tr><tr><td>&gt;1. <strong>redis-server启动：</strong></td><td></td></tr><tr><td>&gt;&gt;1. 默认配置：redis-server, 日志输出版本信息，端口6379</td><td></td></tr><tr><td>&gt;&gt;2. 运行启动：redis-server –port 6380  不建议</td><td></td></tr><tr><td>&gt;&gt;3. 配置文件启动： redis-server /opt/redis/redis.conf，灵活，生产环境使用这种</td><td></td></tr><tr><td>&gt;2. <strong>redis-cli 启动</strong></td><td></td></tr><tr><td>&gt;&gt;1. 交互式：redis-cli -h {host} -p {prot}连接到redis服务，没有h默认连127.0</td><td></td></tr><tr><td>redis-cli -h 127.0.0.1 -p 6379                //没有p 默认连6379</td><td></td></tr><tr><td>&gt;&gt;2. 命令式：redis-cli -h 127.0.0.1 -p 6379 get hello  //取key=hello的value</td><td></td></tr><tr><td>&gt;3. <strong>停止redis服务： redis-cli shutdown</strong></td><td></td></tr><tr><td>&gt;&gt;* a.关闭时：断开连接，持久化文件生成，相对安</td><td></td></tr><tr><td>&gt;&gt;* b.还可以用kill关闭，此方式不会做持久化，还会造成缓冲区非法关闭，可能会造成AOF和丢失数据</td><td></td></tr><tr><td>&gt;4. <strong>版本</strong>：</td><td></td></tr><tr><td>&gt;&gt;* 版本号第二位为奇数，为非稳定版本（2.7、2.9、3.1）</td><td></td></tr><tr><td>&gt;&gt;* 第二为偶数，为稳定版本（2.6、2.8、3.0）</td><td></td></tr><tr><td>&gt;&gt;* 当前奇数版本是下一个稳定版本的开发版本，如2.9是3.0的开发版本</td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis基本介绍 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>POI-Excel的导出导入</title>
      <link href="/2020/03/17/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
      <url>/2020/03/17/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h3 id="计算机中线程的基本概念"><a href="#计算机中线程的基本概念" class="headerlink" title="计算机中线程的基本概念"></a>计算机中线程的基本概念</h3><a id="more"></a><h3 id="计算机中线程的基本概念-1"><a href="#计算机中线程的基本概念-1" class="headerlink" title="计算机中线程的基本概念"></a>计算机中线程的基本概念</h3><ol><li><p>CPU核心数，线程数之间有什么关系？</p><blockquote><p>CPU核心数量和线程数量一般情况下为1:1的关系，但是使用了超线程技术后，比例为1:2，这个技术是指CPU的工业技术。window可以在任务管理器查看，就是我们常说的4核八线程，4核4线程。</p></blockquote></li><li><p>什么是指CPU时间片轮转机制？</p><blockquote><p>时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法。每个进程被分配一时间段，称作它的时间片，即该进程允许运行的时间。又叫RR调度，在JAVA中过多的线程会导致上下文切换。<br>比如你4核4线程，你new了8个线程，那么其实4个物理线程公平的分配给8个JAVA线程使用。</p></blockquote></li><li><p>什么是进程和线程?</p><blockquote><ul><li><strong>进程</strong>:程序运行资源分配的最小单位，进程内部有多个线程，会共享这个进程的资源</li><li><strong>线程</strong>:CPU调度的最小单位，必须依赖进程而存在。</li></ul></blockquote></li><li><p>什么是并发和并行?</p><blockquote><ul><li><strong>并行</strong>:同一时刻，可以同时处理事情的能力</li><li><strong>并发</strong>:与单位时间相关，在单位时间内可以处理事情的能力</li></ul></blockquote></li><li><p>高并发编程的意义、好处和注意事项</p><blockquote><ul><li><strong>好处</strong>:充分利用cpu的资源、加快用户响应的时间，程序模块化，异步化</li><li><strong>问题</strong>:线程共享资源，存在冲突；容易导致死锁；启用太多的线程，就有搞垮机器的可能</li></ul></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 并发编程 </tag>
            
            <tag> 计算机线程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot配置</title>
      <link href="/2020/03/17/springboot%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/03/17/springboot%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br></pre></td><td class="code"><pre><span class="line"># ----------------------------------------</span><br><span class="line"># 核心属性</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"># 文件编码</span><br><span class="line">banner.charset&#x3D; UTF-8</span><br><span class="line"># 文件位置</span><br><span class="line">banner.location&#x3D; classpath:banner.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 日志配置</span><br><span class="line"># 日志配置文件的位置。 例如对于Logback的&#96;classpath：logback.xml&#96;</span><br><span class="line">logging.config&#x3D; </span><br><span class="line"># ％wEx#记录异常时使用的转换字。</span><br><span class="line">logging.exception-conversion-word&#x3D; </span><br><span class="line"># 日志文件名。 例如&#96;myapp.log&#96;</span><br><span class="line">logging.file&#x3D; </span><br><span class="line"># 日志级别严重性映射。 例如&#96;logging.level.org.springframework &#x3D;  DEBUG&#96;</span><br><span class="line">logging.level.*&#x3D; </span><br><span class="line"># 日志文件的位置。 例如&#96;&#x2F; var &#x2F; log&#96;</span><br><span class="line">logging.path&#x3D; </span><br><span class="line"># 用于输出到控制台的Appender模式。 只支持默认的logback设置。</span><br><span class="line">logging.pattern.console&#x3D; </span><br><span class="line"># 用于输出到文件的Appender模式。 只支持默认的logback设置。</span><br><span class="line">logging.pattern.file&#x3D; </span><br><span class="line"># 日志级别的Appender模式（默认％5p）。 只支持默认的logback设置。</span><br><span class="line">logging.pattern.level&#x3D; </span><br><span class="line">#注册日志记录系统的初始化挂钩。</span><br><span class="line">logging.register-shutdown-hook&#x3D; false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># AOP 切面</span><br><span class="line"># 添加@EnableAspectJAutoProxy。</span><br><span class="line">spring.aop.auto&#x3D; true</span><br><span class="line"># 是否要创建基于子类（CGLIB）的代理（true），而不是基于标准的基于Java接口的代理（false）。</span><br><span class="line">spring.aop.proxy-target-class&#x3D; false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 应用程序上下文初始化器</span><br><span class="line"># 应用指标。</span><br><span class="line">spring.application.index&#x3D; </span><br><span class="line"># 应用程序名称。</span><br><span class="line">spring.application.name&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 国际化（消息源自动配置）</span><br><span class="line">#</span><br><span class="line">spring.messages.basename&#x3D; messages</span><br><span class="line"># 以逗号分隔的基础名称列表，每个都在ResourceBundle约定之后。</span><br><span class="line"># 加载的资源束文件缓存到期，以秒为单位。 设置为-1时，软件包将永久缓存。</span><br><span class="line">spring.messages.cache-seconds&#x3D; -1</span><br><span class="line"># 消息编码。</span><br><span class="line">spring.messages.encoding&#x3D; UTF-8</span><br><span class="line"># 设置是否返回到系统区域设置，如果没有找到特定语言环境的文件。</span><br><span class="line">spring.messages.fallback-to-system-locale&#x3D; true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># REDIS (Redis 配置)</span><br><span class="line"># 连接工厂使用的数据库索引。</span><br><span class="line">spring.redis.database&#x3D; 0</span><br><span class="line"># Redis服务器主机。</span><br><span class="line">spring.redis.host&#x3D; localhost</span><br><span class="line"># 登录redis服务器的密码。</span><br><span class="line">spring.redis.password&#x3D; </span><br><span class="line"># 给定时间池可以分配的最大连接数。 使用负值为无限制。</span><br><span class="line">spring.redis.pool.max-active&#x3D; 8</span><br><span class="line"># 池中“空闲”连接的最大数量。 使用负值来表示无限数量的空闲连接。</span><br><span class="line">spring.redis.pool.max-idle&#x3D; 8</span><br><span class="line"># 连接分配在池耗尽之前在抛出异常之前应阻止的最大时间量（以毫秒为单位）。 使用负值无限期地阻止。</span><br><span class="line">spring.redis.pool.max-wait&#x3D; -1</span><br><span class="line"># 定义池中维护的最小空闲连接数。 此设置只有在正值时才有效果。</span><br><span class="line">spring.redis.pool.min-idle&#x3D; 0</span><br><span class="line"># redis服务器端口</span><br><span class="line">spring.redis.port&#x3D; 6379</span><br><span class="line"># redis服务器名称</span><br><span class="line">spring.redis.sentinel.master&#x3D;</span><br><span class="line"># </span><br><span class="line">spring.redis.sentinel.nodes&#x3D; </span><br><span class="line"># 连接超时（毫秒）。</span><br><span class="line">spring.redis.timeout&#x3D; 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 管理员 （Spring应用程序管理员JMX自动配置）</span><br><span class="line"># 开启应用管理功能。</span><br><span class="line">spring.application.admin.enabled&#x3D; false</span><br><span class="line"># JMX应用程序名称MBean。</span><br><span class="line">spring.application.admin.jmx-name&#x3D; org.springframework.boot:type&#x3D; Admin,name&#x3D; SpringApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 自动配置</span><br><span class="line"># 自动配置类排除。</span><br><span class="line">spring.autoconfigure.exclude&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># spring 核心配置</span><br><span class="line"># 跳过搜索BeanInfo类。</span><br><span class="line">spring.beaninfo.ignore&#x3D; true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># spring 缓存配置</span><br><span class="line"># 由底层缓存管理器支持的要创建的缓存名称的逗号分隔列表。</span><br><span class="line">spring.cache.cache-names&#x3D; </span><br><span class="line"># 用于初始化EhCache的配置文件的位置。</span><br><span class="line">spring.cache.ehcache.config&#x3D; </span><br><span class="line"># 用于创建缓存的规范。 检查CacheBuilderSpec有关规格格式的更多细节。</span><br><span class="line">spring.cache.guava.spec&#x3D; </span><br><span class="line"># 用于初始化Hazelcast的配置文件的位置。</span><br><span class="line">spring.cache.hazelcast.config&#x3D; </span><br><span class="line"># 用于初始化Infinispan的配置文件的位置。</span><br><span class="line">spring.cache.infinispan.config&#x3D; </span><br><span class="line"># 用于初始化缓存管理器的配置文件的位置。</span><br><span class="line">spring.cache.jcache.config&#x3D; </span><br><span class="line"># 用于检索符合JSR-107的缓存管理器的CachingProvider实现的完全限定名称。 只有在类路径上有多个JSR-107实现可用时才需要。</span><br><span class="line">spring.cache.jcache.provider&#x3D; </span><br><span class="line"># 缓存类型，默认情况下根据环境自动检测。</span><br><span class="line">spring.cache.type&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># spring配置 （配置文件应用侦听器）</span><br><span class="line"># 配置文件位置。</span><br><span class="line">spring.config.location&#x3D; </span><br><span class="line"># 配置文件名。</span><br><span class="line">spring.config.name&#x3D; application</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># hazelcast配置(Hazelcast是一个高度可扩展的数据分发和集群平台，提供了高效的、可扩展的分布式数据存储、数据缓存.)</span><br><span class="line"># 用于初始化Hazelcast的配置文件的位置。</span><br><span class="line">spring.hazelcast.config&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JMX</span><br><span class="line"># JMX域名。</span><br><span class="line">spring.jmx.default-domain&#x3D; </span><br><span class="line"># 将管理bean暴露给JMX域。</span><br><span class="line">spring.jmx.enabled&#x3D; true</span><br><span class="line"># MBean服务器bean名称。</span><br><span class="line">spring.jmx.server&#x3D; mbeanServer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Email (MailProperties)  邮件属性</span><br><span class="line"># 默认MimeMessage编码。</span><br><span class="line">spring.mail.default-encoding&#x3D; UTF-8</span><br><span class="line"># SMTP服务器主机。 例如&#96;smtp.example.com&#96;</span><br><span class="line">spring.mail.host&#x3D; </span><br><span class="line"># 会话JNDI名称。 设置时，优先于其他邮件设置。</span><br><span class="line">spring.mail.jndi-name&#x3D; </span><br><span class="line"># 登录SMTP服务器的密码。</span><br><span class="line">spring.mail.password&#x3D; </span><br><span class="line"># SMTP服务器端口。</span><br><span class="line">spring.mail.port&#x3D; </span><br><span class="line"># 其他JavaMail会话属性。</span><br><span class="line">spring.mail.properties.*&#x3D; </span><br><span class="line"># SMTP服务器使用的协议。</span><br><span class="line">spring.mail.protocol&#x3D; smtp</span><br><span class="line"># 测试邮件服务器在启动时可用。</span><br><span class="line">spring.mail.test-connection&#x3D; false</span><br><span class="line"># 登录SMTP服务器的用户。</span><br><span class="line">spring.mail.username&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 应用设置（spring应用）</span><br><span class="line"># 用于在应用程序运行时显示横幅的模式。</span><br><span class="line">spring.main.banner-mode&#x3D; console</span><br><span class="line"># 源（类名，包名或XML资源位置）包含在ApplicationContext中。</span><br><span class="line">spring.main.sources&#x3D; </span><br><span class="line"># 在Web环境中运行应用程序（默认情况下自动检测）。</span><br><span class="line">spring.main.web-environment&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 文件编码（文件编码应用程序侦听器）</span><br><span class="line"># 应用程序使用的预期字符编码。</span><br><span class="line">spring.mandatory-file-encoding&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line"># 配置ANSI输出（可以是“detect”，“always”，“never”）--&gt;“检测”，“永远”，“从不”</span><br><span class="line">spring.output.ansi.enabled&#x3D; detect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># PID文件（应用程序文件写入器）</span><br><span class="line"># 如果使用ApplicationPidFileWriter但是无法写入PID文件，则失败。</span><br><span class="line">spring.pid.fail-on-write-error&#x3D; </span><br><span class="line"># 要写入的PID文件的位置（如果使用ApplicationPidFileWriter）。</span><br><span class="line">spring.pid.file&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#   简介（profiles 这个单词翻译过来就是这样... 没用过这个属性，有哪位大神用过请留言我改正，感谢。）</span><br><span class="line"># 活动配置文件的逗号分隔列表。</span><br><span class="line">spring.profiles.active&#x3D; </span><br><span class="line"># 无条件地激活指定的逗号分隔的配置文件。</span><br><span class="line">spring.profiles.include&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># SendGrid（SendGrid自动配置）</span><br><span class="line"># SendGrid帐号用户名</span><br><span class="line">spring.sendgrid.username&#x3D; </span><br><span class="line"># SendGrid帐号密码</span><br><span class="line">spring.sendgrid.password&#x3D; </span><br><span class="line"># SendGrid代理主机</span><br><span class="line">spring.sendgrid.proxy.host&#x3D; </span><br><span class="line"># SendGrid代理端口</span><br><span class="line">spring.sendgrid.proxy.port&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line">#   WEB属性</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 文件上传属性</span><br><span class="line"># 启用对文件上传的支持。</span><br><span class="line">multipart.enabled&#x3D; true</span><br><span class="line"># 将文件写入磁盘后的阈值。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span><br><span class="line">multipart.file-size-threshold&#x3D; 0</span><br><span class="line"># 上传文件的位置。</span><br><span class="line">multipart.location&#x3D; </span><br><span class="line"># 最大文件大小。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span><br><span class="line">multipart.max-file-size&#x3D; 1Mb</span><br><span class="line"># 最大请求大小。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span><br><span class="line">multipart.max-request-size&#x3D; 10Mb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 嵌入式服务器配置（服务器属性）</span><br><span class="line"># 服务器应绑定到的网络地址。</span><br><span class="line">server.address&#x3D; </span><br><span class="line"># 如果启用响应压缩。</span><br><span class="line">server.compression.enabled&#x3D; false</span><br><span class="line"># 从压缩中排除的用户代理列表。</span><br><span class="line">server.compression.excluded-user-agents&#x3D; </span><br><span class="line"># 应该压缩的MIME类型的逗号分隔列表。 例如&#96;text &#x2F; html，text &#x2F; css，application &#x2F; json&#96;</span><br><span class="line">server.compression.mime-types&#x3D; </span><br><span class="line"># 执行压缩所需的最小响应大小。 例如2048</span><br><span class="line">server.compression.min-response-size&#x3D; </span><br><span class="line"># Servlet上下文初始化参数。 例如&#96;server.context-parameters.a &#x3D;  alpha&#96;</span><br><span class="line">server.context-parameters.*&#x3D; </span><br><span class="line"># 应用程序的上下文路径。</span><br><span class="line">server.context-path&#x3D; </span><br><span class="line"># 显示应用程序的名称。</span><br><span class="line">server.display-name&#x3D; application</span><br><span class="line"># 何时包含“stacktrace”属性。</span><br><span class="line">server.error.include-stacktrace&#x3D; never</span><br><span class="line"># 错误控制器的路径。</span><br><span class="line">server.error.path&#x3D; &#x2F;error</span><br><span class="line"># 启动浏览器中出现服务器错误时显示的默认错误页面。</span><br><span class="line">server.error.whitelabel.enabled&#x3D; true</span><br><span class="line"># JSP servlet的类名。</span><br><span class="line">server.jsp-servlet.class-name&#x3D; org.apache.jasper.servlet.JspServlet</span><br><span class="line"># Init参数用于配置JSP servlet</span><br><span class="line">server.jsp-servlet.init-parameters.*&#x3D; </span><br><span class="line"># JSP servlet是否被注册</span><br><span class="line">server.jsp-servlet.registered&#x3D; true</span><br><span class="line"># 服务器HTTP端口。</span><br><span class="line">server.port&#x3D; 8080</span><br><span class="line"># 主调度程序servlet的路径。</span><br><span class="line">server.servlet-path&#x3D; &#x2F;</span><br><span class="line"># 会话cookie的注释。</span><br><span class="line">server.session.cookie.comment&#x3D; </span><br><span class="line"># 会话cookie的域。</span><br><span class="line">server.session.cookie.domain&#x3D; </span><br><span class="line"># “HttpOnly”标志为会话cookie。</span><br><span class="line">server.session.cookie.http-only&#x3D; </span><br><span class="line"># 会话cookie的最大时长（以秒为单位）。</span><br><span class="line">server.session.cookie.max-age&#x3D; </span><br><span class="line"># 会话cookie名称。</span><br><span class="line">server.session.cookie.name&#x3D; </span><br><span class="line"># 会话cookie的路径。</span><br><span class="line">server.session.cookie.path&#x3D; </span><br><span class="line"># 会话cookie的“安全”标志。</span><br><span class="line">server.session.cookie.secure&#x3D; </span><br><span class="line"># 重启之间持续会话数据。</span><br><span class="line">server.session.persistent&#x3D; false</span><br><span class="line"># 用于存储会话数据的目录。</span><br><span class="line">server.session.store-dir&#x3D; </span><br><span class="line"># 会话超时（秒）。</span><br><span class="line">server.session.timeout&#x3D; </span><br><span class="line"># 会话跟踪模式（以下一个或多个：“cookie”，“url”，“ssl”）。</span><br><span class="line">server.session.tracking-modes&#x3D; </span><br><span class="line"># 支持SSL密码。</span><br><span class="line">server.ssl.ciphers&#x3D; </span><br><span class="line"># 客户端认证是否需要（“want”）或需要（“need”）。 需要信任存储。</span><br><span class="line">server.ssl.client-auth&#x3D; </span><br><span class="line"># ssl配置</span><br><span class="line">server.ssl.enabled&#x3D; </span><br><span class="line">server.ssl.key-alias&#x3D; </span><br><span class="line">server.ssl.key-password&#x3D; </span><br><span class="line">server.ssl.key-store&#x3D; </span><br><span class="line">server.ssl.key-store-password&#x3D; </span><br><span class="line">server.ssl.key-store-provider&#x3D; </span><br><span class="line">server.ssl.key-store-type&#x3D; </span><br><span class="line">server.ssl.protocol&#x3D; </span><br><span class="line">server.ssl.trust-store&#x3D; </span><br><span class="line">server.ssl.trust-store-password&#x3D; </span><br><span class="line">server.ssl.trust-store-provider&#x3D; </span><br><span class="line">server.ssl.trust-store-type&#x3D; </span><br><span class="line"># 创建日志文件的目录。 可以相对于tomcat base dir或absolute。</span><br><span class="line">server.tomcat.accesslog.directory&#x3D; </span><br><span class="line"># 启用访问日志。</span><br><span class="line">server.tomcat.accesslog.enabled&#x3D; false</span><br><span class="line"># 访问日志的格式化模式。</span><br><span class="line">server.tomcat.accesslog.pattern&#x3D; common</span><br><span class="line"># 日志文件名前缀。</span><br><span class="line">server.tomcat.accesslog.prefix&#x3D; access_log</span><br><span class="line"># 日志文件名后缀。</span><br><span class="line">server.tomcat.accesslog.suffix&#x3D; .log</span><br><span class="line"># 在调用backgroundProcess方法之间延迟秒。</span><br><span class="line">server.tomcat.background-processor-delay&#x3D; 30</span><br><span class="line"># Tomcat基本目录。 如果未指定，将使用临时目录。</span><br><span class="line">server.tomcat.basedir&#x3D; </span><br><span class="line"># 正则表达式匹配可信IP地址。</span><br><span class="line">server.tomcat.internal-proxies&#x3D; 10\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\192\\.168\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\169\\.254\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\127\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\172\\.1[6-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\172\\.2[0-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\172\\.3[0-1]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;</span><br><span class="line"># HTTP消息头的最大大小（以字节为单位）。</span><br><span class="line">server.tomcat.max-http-header-size&#x3D; 0</span><br><span class="line"># 最大工作线程数。</span><br><span class="line">server.tomcat.max-threads&#x3D; 0</span><br><span class="line"># 用于覆盖原始端口值的HTTP头的名称。</span><br><span class="line">server.tomcat.port-header&#x3D; X-Forwarded-Port</span><br><span class="line"># 头文件，保存传入协议，通常命名为“X-Forwarded-Proto”。</span><br><span class="line">server.tomcat.protocol-header&#x3D; </span><br><span class="line"># 表示传入请求使用SSL的协议头的值。</span><br><span class="line">server.tomcat.protocol-header-https-value&#x3D; https</span><br><span class="line"># 提取远程ip的HTTP头的名称。 例如&#96;X-FORWARDED-FOR&#96;</span><br><span class="line">server.tomcat.remote-ip-header&#x3D; </span><br><span class="line"># 用于解码URI的字符编码。</span><br><span class="line">server.tomcat.uri-encoding&#x3D; UTF-8</span><br><span class="line"># 访问日志目录。</span><br><span class="line">server.undertow.accesslog.dir&#x3D; </span><br><span class="line"># 启用访问日志。</span><br><span class="line">server.undertow.accesslog.enabled&#x3D; false</span><br><span class="line"># 访问日志的格式化模式。</span><br><span class="line">server.undertow.accesslog.pattern&#x3D; common</span><br><span class="line"># 每个缓冲区的大小字节数。</span><br><span class="line">server.undertow.buffer-size&#x3D; </span><br><span class="line"># 每个区域的缓冲区数。</span><br><span class="line">server.undertow.buffers-per-region&#x3D; </span><br><span class="line"># 在Java堆之外分配缓冲区。</span><br><span class="line">server.undertow.direct-buffers&#x3D; </span><br><span class="line"># 为工作者创建的I &#x2F; O线程数。</span><br><span class="line">server.undertow.io-threads&#x3D; </span><br><span class="line"># 工作线程数。</span><br><span class="line">server.undertow.worker-threads&#x3D; </span><br><span class="line"># 如果X-Forwarded- *头应该应用于HttpRequest。</span><br><span class="line">server.use-forward-headers&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 自由标记（自由标记自动配置）</span><br><span class="line"># 设置是否允许HttpServletRequest属性重写（隐藏）控制器生成的同名模型属性。</span><br><span class="line">spring.freemarker.allow-request-override&#x3D; false</span><br><span class="line"># 设置是否允许HttpSession属性重写（隐藏）控制器生成的相同名称的模型属性。</span><br><span class="line">spring.freemarker.allow-session-override&#x3D; false</span><br><span class="line"># 启用模板缓存。</span><br><span class="line">spring.freemarker.cache&#x3D; false</span><br><span class="line"># 模板编码。</span><br><span class="line">spring.freemarker.charset&#x3D; UTF-8</span><br><span class="line"># 检查模板位置是否存在。</span><br><span class="line">spring.freemarker.check-template-location&#x3D; true</span><br><span class="line"># Content-Type值。</span><br><span class="line">spring.freemarker.content-type&#x3D; text&#x2F;html</span><br><span class="line"># 启用此技术的MVC视图分辨率。</span><br><span class="line">spring.freemarker.enabled&#x3D; true</span><br><span class="line"># 设置在与模板合并之前是否应将所有请求属性添加到模型中。</span><br><span class="line">spring.freemarker.expose-request-attributes&#x3D; false</span><br><span class="line"># 设置在与模板合并之前是否应将所有HttpSession属性添加到模型中。</span><br><span class="line">spring.freemarker.expose-session-attributes&#x3D; false</span><br><span class="line"># 设置是否公开一个RequestContext供Spring 的宏库使用，名称为“springMacroRequestContext”。</span><br><span class="line">spring.freemarker.expose-spring-macro-helpers&#x3D; true</span><br><span class="line"># 首选文件系统访问模板加载。 文件系统访问可以对模板更改进行热检测。</span><br><span class="line">spring.freemarker.prefer-file-system-access&#x3D; true</span><br><span class="line"># 前缀，在构建URL时先查看名称。</span><br><span class="line">spring.freemarker.prefix&#x3D; </span><br><span class="line"># 所有视图的RequestContext属性的名称。</span><br><span class="line">spring.freemarker.request-context-attribute&#x3D; </span><br><span class="line"># 公开的FreeMarker密钥将被传递给FreeMarker的配置。</span><br><span class="line">spring.freemarker.settings.*&#x3D; </span><br><span class="line"># 后缀，在构建URL时附加到查看名称。</span><br><span class="line">spring.freemarker.suffix&#x3D; </span><br><span class="line"># 逗号分隔的模板路径列表。</span><br><span class="line">spring.freemarker.template-loader-path&#x3D; classpath:&#x2F;templates&#x2F;</span><br><span class="line"># 可以解决的视图名称的白名单。</span><br><span class="line">spring.freemarker.view-names&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># groovr模板（Groovy模板自动配置）</span><br><span class="line"># 设置是否允许HttpServletRequest属性重写（隐藏）控制器生成的同名模型属性。</span><br><span class="line">spring.groovy.template.allow-request-override&#x3D; false</span><br><span class="line"># 设置是否允许HttpSession属性重写（隐藏）控制器生成的相同名称的模型属性。</span><br><span class="line">spring.groovy.template.allow-session-override&#x3D; false</span><br><span class="line"># 启用模板缓存。</span><br><span class="line">spring.groovy.template.cache&#x3D; </span><br><span class="line"># 模板编码。</span><br><span class="line">spring.groovy.template.charset&#x3D; UTF-8</span><br><span class="line"># 检查模板位置是否存在。</span><br><span class="line">spring.groovy.template.check-template-location&#x3D; true</span><br><span class="line"># 请参阅GroovyMarkupConfigurer</span><br><span class="line">spring.groovy.template.configuration.*&#x3D; </span><br><span class="line"># Content-Type值。</span><br><span class="line">spring.groovy.template.content-type&#x3D; test&#x2F;html</span><br><span class="line"># 启用此技术的MVC视图分辨率。</span><br><span class="line">spring.groovy.template.enabled&#x3D; true</span><br><span class="line"># 设置在与模板合并之前是否应将所有请求属性添加到模型中。</span><br><span class="line">spring.groovy.template.expose-request-attributes&#x3D; false</span><br><span class="line"># 设置在与模板合并之前是否应将所有HttpSession属性添加到模型中。</span><br><span class="line">spring.groovy.template.expose-session-attributes&#x3D; false</span><br><span class="line"># 设置是否公开一个RequestContext供Spring Spring的宏库使用，名称为“springMacroRequestContext”。</span><br><span class="line">spring.groovy.template.expose-spring-macro-helpers&#x3D; true</span><br><span class="line"># 前缀，在构建URL时先查看名称。</span><br><span class="line">spring.groovy.template.prefix&#x3D; </span><br><span class="line"># 所有视图的RequestContext属性的名称。</span><br><span class="line">spring.groovy.template.request-context-attribute&#x3D; </span><br><span class="line"># 模板路径。</span><br><span class="line">spring.groovy.template.resource-loader-path&#x3D; classpath:&#x2F;templates&#x2F;</span><br><span class="line"># 后缀，在构建URL时附加到查看名称。</span><br><span class="line">spring.groovy.template.suffix&#x3D; .tpl</span><br><span class="line"># 可以解决的视图名称的白名单。</span><br><span class="line">spring.groovy.template.view-names&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># spring Hateoas 配置</span><br><span class="line"># 指定应用程序&#x2F; hal + json响应是否应发送到接受application &#x2F; json的请求。</span><br><span class="line">spring.hateoas.use-hal-as-default-json-media-type&#x3D; true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># HTTP 消息转换</span><br><span class="line"># 首选JSON映射程序用于HTTP消息转换。 设置为“gson”强制使用Gson，当它和Jackson都在类路径上时。</span><br><span class="line">spring.http.converters.preferred-json-mapper&#x3D; jackson</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># HTTP 编码（Http编码属性）</span><br><span class="line"># HTTP请求和响应的字符集。 如果未明确设置，则添加到“Content-Type”头。</span><br><span class="line">spring.http.encoding.charset&#x3D; UTF-8</span><br><span class="line"># 启用http编码支持。</span><br><span class="line">spring.http.encoding.enabled&#x3D; true</span><br><span class="line"># 将编码强制到HTTP请求和响应上配置的字符集。</span><br><span class="line">spring.http.encoding.force&#x3D; true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Jackson(解析json和序列化json) 配置</span><br><span class="line"># 日期格式字符串或全限定日期格式类名。 例如&#96;yyyy-MM-dd HH：mm：ss&#96;。</span><br><span class="line">spring.jackson.date-format&#x3D; </span><br><span class="line"># Jones开&#x2F;关功能，影响Java对象反序列化的方式。</span><br><span class="line">spring.jackson.deserialization.*&#x3D; </span><br><span class="line"># 关闭或者打开Jackson 功能</span><br><span class="line">spring.jackson.generator.*&#x3D; </span><br><span class="line"># Joda日期时间格式字符串。 如果未配置，如果配置了格式字符串，则“日期格式”将用作后备。</span><br><span class="line">spring.jackson.joda-date-time-format&#x3D; </span><br><span class="line"># 用于格式化的区域设置。</span><br><span class="line">spring.jackson.locale&#x3D; </span><br><span class="line"># jackson通用开&#x2F;关功能。</span><br><span class="line">spring.jackson.mapper.*&#x3D; </span><br><span class="line"># Jackson 解析器的开&#x2F;关功能。</span><br><span class="line">spring.jackson.parser.*&#x3D; </span><br><span class="line"># Jackson的PropertyNamingStrategy的一个常量。 也可以是PropertyNamingStrategy子类的完全限定类名。</span><br><span class="line">spring.jackson.property-naming-strategy&#x3D; </span><br><span class="line"># Jones开&#x2F;关功能，影响Java对象序列化的方式。</span><br><span class="line">spring.jackson.serialization.*&#x3D; </span><br><span class="line"># 控制在序列化期间包含属性。 配置了Jackson的JsonInclude.Include枚举中的一个值。</span><br><span class="line">spring.jackson.serialization-inclusion&#x3D; </span><br><span class="line"># 格式化日期时使用的时区。 例如&#96;America &#x2F; Los_Angeles&#96;</span><br><span class="line">spring.jackson.time-zone&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Jersey 配置</span><br><span class="line"># 作为应用程序的基本URI的路径。 如果指定，则覆盖“@ApplicationPath”的值。</span><br><span class="line">spring.jersey.application-path&#x3D; </span><br><span class="line"># jersey过滤器链顺序。</span><br><span class="line">spring.jersey.filter.order&#x3D; 0</span><br><span class="line">#  init参数传递到Jersey通过servlet或过滤器。</span><br><span class="line">spring.jersey.init.*&#x3D; </span><br><span class="line"># jersey整合型。可以是“servlet”也可以是“filter”。</span><br><span class="line">spring.jersey.type&#x3D; servlet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># spring 视图分解器 配置</span><br><span class="line"># 启用后退解析支持。</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.enable-fallback&#x3D; false</span><br><span class="line"># 启用设备视图解析器。</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.enabled&#x3D; false</span><br><span class="line"># 前缀，用于查看移动设备的名称。</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.mobile-prefix&#x3D; mobile&#x2F;</span><br><span class="line"># 后缀，附加到查看移动设备的名称。</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.mobile-suffix&#x3D; </span><br><span class="line"># 前缀，用于查看普通设备的名称。</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.normal-prefix&#x3D; </span><br><span class="line"># 后缀，附加到查看普通设备的名称。</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.normal-suffix&#x3D; </span><br><span class="line"># 前缀，用于查看平板设备的名称。</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.tablet-prefix&#x3D; tablet&#x2F;</span><br><span class="line"># 后缀，附加到查看平板电脑设备的名称。</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.tablet-suffix&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 移动网站首选项 （站点首选项自动配置）</span><br><span class="line"># 启用SitePreferenceHandler。</span><br><span class="line">spring.mobile.sitepreference.enabled&#x3D; true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># MUSTACHE模板（Mustache AutoConfiguration）</span><br><span class="line"># 启用模板缓存。</span><br><span class="line">spring.mustache.cache&#x3D; false</span><br><span class="line"># 模板编码。</span><br><span class="line">spring.mustache.charset&#x3D; UTF-8</span><br><span class="line"># 检查模板位置是否存在。</span><br><span class="line">spring.mustache.check-template-location&#x3D; true</span><br><span class="line"># Content-Type值</span><br><span class="line">spring.mustache.content-type&#x3D; text&#x2F;html</span><br><span class="line"># 启用此技术的MVC视图分辨率。</span><br><span class="line">spring.mustache.enabled&#x3D; true</span><br><span class="line"># 前缀应用于模板名称。</span><br><span class="line">spring.mustache.prefix&#x3D; classpath:&#x2F;templates&#x2F;</span><br><span class="line"># 后缀应用于模板名称。</span><br><span class="line">spring.mustache.suffix&#x3D; .html</span><br><span class="line"># 可以解决的视图名称的白名单。</span><br><span class="line">spring.mustache.view-names&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># SPRING MVC (Web Mvc 配置)</span><br><span class="line"># 异步请求处理超时之前的时间量（以毫秒为单位）。</span><br><span class="line">spring.mvc.async.request-timeout&#x3D; </span><br><span class="line"># 要使用的日期格式。 例如&#96;dd &#x2F; MM &#x2F; yyyy&#96;。</span><br><span class="line">spring.mvc.date-format&#x3D; </span><br><span class="line"># 发送TRACE请求到FrameworkServlet doService方法。</span><br><span class="line">spring.mvc.dispatch-trace-request&#x3D; false</span><br><span class="line"># 发送OPTIONS请求到FrameworkServlet doService方法。</span><br><span class="line">spring.mvc.dispatch-options-request&#x3D; false</span><br><span class="line"># 启用favicon.ico的解析。</span><br><span class="line">spring.mvc.favicon.enabled&#x3D; true</span><br><span class="line"># 如果在重定向方案期间应该忽略“默认”模型的内容。</span><br><span class="line">spring.mvc.ignore-default-model-on-redirect&#x3D; true</span><br><span class="line"># 要使用的区域设置。</span><br><span class="line">spring.mvc.locale&#x3D; </span><br><span class="line"># 将文件扩展名映射到内容协商的媒体类型。</span><br><span class="line">spring.mvc.media-types.*&#x3D; </span><br><span class="line"># 消息代码格式策略。 例如&#96;PREFIX_ERROR_CODE&#96;。</span><br><span class="line">spring.mvc.message-codes-resolver-format&#x3D; </span><br><span class="line"># 用于静态资源的路径模式。</span><br><span class="line">spring.mvc.static-path-pattern&#x3D; &#x2F;**</span><br><span class="line"># 如果没有发现处理程序来处理请求，则应抛出“NoHandlerFoundException”。</span><br><span class="line">spring.mvc.throw-exception-if-no-handler-found&#x3D; false</span><br><span class="line"># Spring MVC视图前缀。</span><br><span class="line">spring.mvc.view.prefix&#x3D; </span><br><span class="line"># Spring MVC视图后缀。</span><br><span class="line">spring.mvc.view.suffix&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #SPRING RESOURCES HANDLING（ResourceProperties）资源处理</span><br><span class="line">spring.resources.add-mappings &#x3D; true #启用默认资源处理。</span><br><span class="line">spring.resources.cache-period &#x3D; #由资源处理程序提供的资源的缓存期，以秒为单位。</span><br><span class="line">spring.resources.chain.cache &#x3D; true #在资源链中启用缓存。</span><br><span class="line">spring.resources.chain.enabled &#x3D; #启用Spring资源处理链。默认情况下禁用，除非启用了至少一个策略。</span><br><span class="line">spring.resources.chain.html-application-cache &#x3D; false #启用HTML5应用程序缓存清单重写。</span><br><span class="line">spring.resources.chain.strategy.content.enabled &#x3D; false #启用内容版本策略。</span><br><span class="line">spring.resources.chain.strategy.content.paths &#x3D; &#x2F; ** #应用于版本策略的模式的逗号分隔列表。</span><br><span class="line">spring.resources.chain.strategy.fixed.enabled &#x3D; false #启用固定版本策略。</span><br><span class="line">spring.resources.chain.strategy.fixed.paths &#x3D; #应用于版本策略的逗号分隔的模式列表。</span><br><span class="line">spring.resources.chain.strategy.fixed.version &#x3D; #用于版本策略的版本字符串。</span><br><span class="line">spring.resources.static-locations &#x3D; classpath：&#x2F; META-INF &#x2F; resources &#x2F;，classpath：&#x2F; resources &#x2F;，classpath：&#x2F; static &#x2F;，classpath：&#x2F; public &#x2F; #静态资源的位置。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #SPRING SOCIAL（SocialWebAutoConfiguration）集群</span><br><span class="line">spring.social.auto-connection-views &#x3D; false #启用支持的提供程序的连接状态视图。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #SPRING SOCIAL FACEBOOK（FacebookAutoConfiguration）</span><br><span class="line">spring.social.facebook.app-id &#x3D; #您的应用程序的Facebook应用程序ID</span><br><span class="line">spring.social.facebook.app-secret &#x3D; #你的应用程序的Facebook应用程序密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #SPRING SOCIAL LINKEDIN（LinkedInAutoConfiguration）</span><br><span class="line">spring.social.linkedin.app-id &#x3D; #您的应用程序的LinkedIn应用程序ID</span><br><span class="line">spring.social.linkedin.app-secret &#x3D; #您的应用程序的LinkedIn App Secret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #SPRING SOCIAL TWITTER（TwitterAutoConfiguration）</span><br><span class="line">spring.social.twitter.app-id &#x3D; #你的应用程序的Twitter应用程序ID</span><br><span class="line">spring.social.twitter.app-secret &#x3D; #你的应用程序的Twitter App Secret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #THYMELEAF Thymeleaf模板引擎配置</span><br><span class="line">spring.thymeleaf.cache &#x3D; true #启用模板缓存。</span><br><span class="line">spring.thymeleaf.check-template-location &#x3D; true #检查模板位置是否存在。</span><br><span class="line">spring.thymeleaf.content-type &#x3D; text &#x2F; html #Content-Type值。</span><br><span class="line">spring.thymeleaf.enabled &#x3D; true #启用MVC Thymeleaf视图分辨率。</span><br><span class="line">spring.thymeleaf.encoding &#x3D; UTF-8 #模板编码。</span><br><span class="line">spring.thymeleaf.excluded-view-names &#x3D; #应该从解决方案中排除的视图名称的逗号分隔列表。</span><br><span class="line">spring.thymeleaf.mode &#x3D; HTML5 #应用于模板的模板模式。另请参见StandardTemplateModeHandlers。</span><br><span class="line">spring.thymeleaf.prefix &#x3D; classpath：&#x2F; templates &#x2F; #在构建URL时预先查看名称的前缀。</span><br><span class="line">spring.thymeleaf.suffix &#x3D; .html #构建URL时附加查看名称的后缀。</span><br><span class="line">spring.thymeleaf.template-resolver-order &#x3D; #链中模板解析器的顺序。</span><br><span class="line">spring.thymeleaf.view-names &#x3D; #可以解析的视图名称的逗号分隔列表。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #VELOCITY TEMPLATES（VelocityAutoConfiguration）</span><br><span class="line">spring.velocity.allow-request-override &#x3D; false #设置是否允许HttpServletRequest属性覆盖（隐藏）控制器生成的同名的模型属性。</span><br><span class="line">spring.velocity.allow-session-override &#x3D; false #设置是否允许HttpSession属性重写（隐藏）控制器生成的同名的模型属性。</span><br><span class="line">spring.velocity.cache &#x3D; #启用模板缓存。</span><br><span class="line">spring.velocity.charset &#x3D; UTF-8 #模板编码。</span><br><span class="line">spring.velocity.check-template-location &#x3D; true #检查模板位置是否存在。</span><br><span class="line">spring.velocity.content-type &#x3D; text &#x2F; html #Content-Type值。</span><br><span class="line">spring.velocity.date-tool-attribute &#x3D; #在视图的Velocity上下文中公开的DateTool辅助对象的名称。</span><br><span class="line">spring.velocity.enabled &#x3D; true #启用此技术的MVC视图分辨率。</span><br><span class="line">spring.velocity.expose-request-attributes &#x3D; false #设置在与模板合并之前是否应将所有请求属性添加到模型中。</span><br><span class="line">spring.velocity.expose-session-attributes &#x3D; false #设置在与模板合并之前是否应将所有HttpSession属性添加到模型中。</span><br><span class="line">spring.velocity.expose-spring-macro-helpers &#x3D; true #设置是否公开一个RequestContext供Spring Spring的宏库使用，名称为“springMacroRequestContext”。</span><br><span class="line">spring.velocity.number-tool-attribute &#x3D; #在视图的Velocity上下文中公开的NumberTool帮助对象的名称。</span><br><span class="line">spring.velocity.prefer-file-system-access &#x3D; true #首选文件系统访问模板加载。文件系统访问可以对模板更改进行热检测。</span><br><span class="line">spring.velocity.prefix &#x3D; #前缀，用于在构建URL时查看名称。</span><br><span class="line">spring.velocity.properties。* &#x3D; #附加速度属性。</span><br><span class="line">spring.velocity.request-context-attribute &#x3D; #所有视图的RequestContext属性的名称。</span><br><span class="line">spring.velocity.resource-loader-path &#x3D; classpath：&#x2F; templates &#x2F; #模板路径。</span><br><span class="line">spring.velocity.suffix &#x3D; .vm #构建URL时附加到查看名称的后缀。</span><br><span class="line">spring.velocity.toolbox-config-location &#x3D; #Velocity Toolbox配置位置。例如&#96;&#x2F; WEB-INF &#x2F; toolbox.xml&#39;</span><br><span class="line">spring.velocity.view-names &#x3D; #可以解决的视图名称的白名单。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #----------------------------------------</span><br><span class="line"> #安全属性</span><br><span class="line"> #----------------------------------------</span><br><span class="line"> #SECURITY（SecurityProperties）</span><br><span class="line">security.basic.authorize-mode &#x3D; role #应用安全授权模式。</span><br><span class="line">security.basic.enabled &#x3D; true #启用基本身份验证。</span><br><span class="line">security.basic.path &#x3D; &#x2F; ** #安全路径的逗号分隔列表。</span><br><span class="line">security.basic.realm &#x3D; Spring #HTTP基本的领域名称。</span><br><span class="line">security.enable-csrf &#x3D; false #启用跨站点请求伪造支持。</span><br><span class="line">security.filter-order &#x3D; 0 #安全过滤器连锁订单。</span><br><span class="line">security.headers.cache &#x3D; true #启用缓存控制HTTP头。</span><br><span class="line">security.headers.content-type &#x3D; true# 启用“X-Content-Type-Options”头。</span><br><span class="line">security.headers.frame &#x3D; true #启用“X-Frame-Options”标题。</span><br><span class="line">security.headers.hsts &#x3D; # HTTP严格传输安全（HSTS）模式（无，域，全部）。</span><br><span class="line">security.headers.xss &#x3D; true #启用跨站点脚本（XSS）保护。</span><br><span class="line">security.ignored &#x3D; #从默认安全路径中排除的路径的逗号分隔列表。</span><br><span class="line">security.require-ssl &#x3D; false #为所有请求启用安全通道。</span><br><span class="line">security.sessions &#x3D; stateless #会话创建策略（永远不会，if_required，无状态）。</span><br><span class="line">security.user.name &#x3D; user #默认用户名。</span><br><span class="line">security.user.password &#x3D; #默认用户名的密码。默认情况下，启动时会记录随机密码。</span><br><span class="line">security.user.role &#x3D; USER #为默认用户名授予角色。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #SECURITY OAUTH2 CLIENT（OAuth2ClientProperties</span><br><span class="line">security.oauth2.client.client-id &#x3D; #OAuth2客户端ID。</span><br><span class="line">security.oauth2.client.client-secret &#x3D; #OAuth2客户机密码。默认生成随机密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #SECURITY OAUTH2 RESOURCES（ResourceServerProperties</span><br><span class="line">security.oauth2.resource.id &#x3D; #资源的标识符。</span><br><span class="line">security.oauth2.resource.jwt.key-uri &#x3D; #JWT令牌的URI。如果值不可用并且密钥是公共的，可以设置。</span><br><span class="line">security.oauth2.resource.jwt.key-value &#x3D; #JWT令牌的验证密钥。可以是对称秘密或PEM编码的RSA公钥。</span><br><span class="line">security.oauth2.resource.prefer-token-info &#x3D; true #使用令牌信息，可以设置为false以使用用户信息。</span><br><span class="line">security.oauth2.resource.service-id &#x3D; resource #</span><br><span class="line">security.oauth2.resource.token-info-uri &#x3D; #令牌解码端点的URI。</span><br><span class="line">security.oauth2.resource.token-type &#x3D; #使用userInfoUri时发送的令牌类型。</span><br><span class="line">security.oauth2.resource.user-info-uri &#x3D; #用户端点的URI。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #SECURITY OAUTH2 SSO（OAuth2SsoProperties</span><br><span class="line">security.oauth2.sso.filter-order &#x3D; #如果不提供显式的WebSecurityConfigurerAdapter，则应用过滤器顺序</span><br><span class="line">security.oauth2.sso.login-path &#x3D; &#x2F; login #登录页面的路径，即触发重定向到OAuth2授权服务器的路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># DATA PROPERTIES 数据性能</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># FLYWAY (FlywayProperties)</span><br><span class="line">flyway.baseline-description &#x3D; #</span><br><span class="line">flyway.baseline-version &#x3D; 1 #版本开始迁移</span><br><span class="line">flyway.baseline-on-migrate &#x3D; #</span><br><span class="line">flyway.check-location &#x3D; false #检查迁移脚本位置是否存在。</span><br><span class="line">flyway.clean-on-validation-error &#x3D; #</span><br><span class="line">flyway.enabled &#x3D; true #启用飞行路线。</span><br><span class="line">flyway.encoding &#x3D; #</span><br><span class="line">flyway.ignore-failed-future-migration &#x3D; #</span><br><span class="line">flyway.init-sqls &#x3D; #执行SQL语句，以便在获取连接后立即初始化连接。</span><br><span class="line">flyway.locations &#x3D; classpath：db &#x2F; migration #迁移脚本的位置</span><br><span class="line">flyway.out-of-order &#x3D; #如果您希望Flyway创建自己的DataSource，则需要使用#path密码</span><br><span class="line">flyway.placeholder-prefix &#x3D; #</span><br><span class="line">flyway.placeholder-replacement &#x3D; #</span><br><span class="line">flyway.placeholder-suffix &#x3D; #</span><br><span class="line">flyway.placeholders。* &#x3D; #</span><br><span class="line">flyway.schemas &#x3D; #schemas来更新</span><br><span class="line">flyway.sql-migration-prefix &#x3D; V #</span><br><span class="line">flyway.sql-migration-separator &#x3D; #</span><br><span class="line">flyway.sql-migration-suffix &#x3D; .sql #</span><br><span class="line">flyway.table &#x3D; #</span><br><span class="line">flyway.url &#x3D; #要迁移的数据库的JDBC url。如果未设置，则使用主配置的数据源。</span><br><span class="line">flyway.user &#x3D; #登录要迁移的数据库的用户。</span><br><span class="line">flyway.validate-on-migrate &#x3D; #</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># LIQUIBASE (LiquibaseProperties)</span><br><span class="line">liquibase.change-log &#x3D; classpath：&#x2F;db&#x2F;changelog&#x2F;db.changelog-master.yaml #更改日志配置路径。</span><br><span class="line">liquibase.check-change-log-location &#x3D; true #检查更改日志位置是否存在。</span><br><span class="line">liquibase.contexts &#x3D; #使用逗号分隔的运行时上下文列表。</span><br><span class="line">liquibase.default-schema &#x3D; #默认数据库模式。</span><br><span class="line">liquibase.drop-first &#x3D; false #首先删除数据库模式。</span><br><span class="line">liquibase.enabled &#x3D; true #启用liquidibase支持。</span><br><span class="line">liquibase.labels &#x3D; #使用逗号分隔的运行时标签列表。</span><br><span class="line">liquibase.parameters。* &#x3D; #更改日志参数。</span><br><span class="line">liquibase.password &#x3D; #登录要迁移的数据库的密码。</span><br><span class="line">liquibase.url &#x3D; #要迁移的数据库的JDBC url。 如果未设置，则使用主配置的数据源。</span><br><span class="line">liquibase.user &#x3D; #登录要迁移的数据库的用户。</span><br><span class="line"></span><br><span class="line"># DAO (PersistenceExceptionTranslationAutoConfiguration)</span><br><span class="line">spring.dao.exceptiontranslation.enabled&#x3D; true # 启用持久异常翻译后处理器。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># CASSANDRA (CassandraProperties)</span><br><span class="line">spring.data.cassandra.cluster-name &#x3D; #Cassandra群集的名称。</span><br><span class="line">spring.data.cassandra.compression &#x3D; #由Cassandra二进制协议支持的压缩。</span><br><span class="line">spring.data.cassandra.connect-timeout-millis &#x3D; #套接字选项：连接超时。</span><br><span class="line">spring.data.cassandra.consistency-level &#x3D; #查询一致性级别。</span><br><span class="line">spring.data.cassandra.contact-points &#x3D; localhost #集群节点地址的逗号分隔列表。</span><br><span class="line">spring.data.cassandra.fetch-size &#x3D; #查询默认的抓取大小。</span><br><span class="line">spring.data.cassandra.keyspace-name &#x3D; #要使用的密钥空间名称。</span><br><span class="line">spring.data.cassandra.load-balancing-policy &#x3D; #负载均衡策略的类名。</span><br><span class="line">spring.data.cassandra.port &#x3D; #Cassandra服务器端口。</span><br><span class="line">spring.data.cassandra.password &#x3D; #登录服务器的密码。</span><br><span class="line">spring.data.cassandra.read-timeout-millis &#x3D; #套接字选项：读取超时。</span><br><span class="line">spring.data.cassandra.reconnection-policy &#x3D; #重新连接策略类。</span><br><span class="line">spring.data.cassandra.retry-policy &#x3D; #重试策略的类名。</span><br><span class="line">spring.data.cassandra.serial-consistency-level &#x3D; #查询串行一致性级别。</span><br><span class="line">spring.data.cassandra.ssl &#x3D; false #启用SSL支持。</span><br><span class="line">spring.data.cassandra.username &#x3D; #登录用户的服务器。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ELASTICSEARCH (ElasticsearchProperties)</span><br><span class="line">spring.data.elasticsearch.cluster-name &#x3D; elasticsearch #弹性搜索集群名称。</span><br><span class="line">spring.data.elasticsearch.cluster-nodes &#x3D; #集群节点地址的逗号分隔列表。 如果未指定，则启动客户端节点。</span><br><span class="line">spring.data.elasticsearch.properties。* &#x3D; #用于配置客户端的其他属性。</span><br><span class="line">spring.data.elasticsearch.repositories.enabled &#x3D; true #启用Elasticsearch存储库。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># MONGODB (MongoProperties)</span><br><span class="line">spring.data.mongodb.authentication-database &#x3D; #验证数据库名称。</span><br><span class="line">spring.data.mongodb.database &#x3D; test #数据库名称。</span><br><span class="line">spring.data.mongodb.field-naming-strategy &#x3D; #要使用的FieldNamingStrategy的完全限定名称。</span><br><span class="line">spring.data.mongodb.grid-fs-database &#x3D; #GridFS数据库名称。</span><br><span class="line">spring.data.mongodb.host &#x3D; localhost #Mongo服务器主机。</span><br><span class="line">spring.data.mongodb.password &#x3D; #登录mongo服务器的密码。</span><br><span class="line">spring.data.mongodb.port &#x3D; 27017 #Mongo服务器端口。</span><br><span class="line">spring.data.mongodb.repositories.enabled &#x3D; true #启用Mongo存储库。</span><br><span class="line">spring.data.mongodb.uri &#x3D; mongodb：&#x2F;&#x2F; localhost &#x2F; test #Mongo数据库URI。 设置时，主机和端口将被忽略。</span><br><span class="line">spring.data.mongodb.username &#x3D; #登录mongo服务器的用户。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># DATA REST (RepositoryRestProperties)</span><br><span class="line">spring.data.rest.base-path &#x3D; #由Spring Data REST用于公开存储库资源的基本路径。</span><br><span class="line">spring.data.rest.default-page-size &#x3D; #页面的默认大小。</span><br><span class="line">spring.data.rest.enable-enum-translation &#x3D; #通过Spring Data REST默认资源包启用枚举值转换。</span><br><span class="line">spring.data.rest.limit-param-name &#x3D; #指示一次返回多少结果的URL查询字符串参数的名称。</span><br><span class="line">spring.data.rest.max-page-size &#x3D; #最大页面大小。</span><br><span class="line">spring.data.rest.page-param-name &#x3D; #指示要返回的页面的URL查询字符串参数的名称。</span><br><span class="line">spring.data.rest.return-body-on-create &#x3D; #创建一个实体后返回响应体。</span><br><span class="line">spring.data.rest.return-body-on-update &#x3D; #更新实体后返回响应体。</span><br><span class="line">spring.data.rest.sort-param-name &#x3D; #指示排序结果的方向的URL查询字符串参数的名称。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># SOLR (SolrProperties)</span><br><span class="line">spring.data.solr.host &#x3D; http:&#x2F;&#x2F;127.0.0.1:8983&#x2F;solr #Solr主机。 如果设置了“zk-host”，则被忽略。</span><br><span class="line">spring.data.solr.repositories.enabled &#x3D; true #启用Solr存储库。</span><br><span class="line">spring.data.solr.zk-host &#x3D; #ZooKeeper主机地址，格式为HOST：PORT。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 数据源 配置 (DataSourceAutoConfiguration &amp; DataSourceProperties)</span><br><span class="line">spring.datasource.continue-on-error &#x3D; false #初始化数据库时发生错误时不要停止。</span><br><span class="line">spring.datasource.data &#x3D; #Data（DML）脚本资源引用。</span><br><span class="line">spring.datasource.driver-class-name &#x3D; #JDBC驱动程序的完全限定名称。默认情况下，根据URL自动检测。</span><br><span class="line">spring.datasource.initialize &#x3D; true #使用&#39;data.sql&#39;填充数据库。</span><br><span class="line">spring.datasource.jmx-enabled &#x3D; false #启用JMX支持（如果由底层池提供）。</span><br><span class="line">spring.datasource.jndi-name &#x3D; #数据源的JNDI位置。设置时，类，网址，用户名和密码将被忽略。</span><br><span class="line">spring.datasource.max-active &#x3D; #例如100</span><br><span class="line">spring.datasource.max-idle &#x3D; #例如8</span><br><span class="line">spring.datasource.max等待&#x3D;</span><br><span class="line">spring.datasource.min-evictable空闲时间-米利斯&#x3D;</span><br><span class="line">spring.datasource.min-idle &#x3D; 8</span><br><span class="line">spring.datasource.name &#x3D; testdb #数据源的名称。</span><br><span class="line">spring.datasource.password &#x3D; #登录数据库的密码。</span><br><span class="line">spring.datasource.platform &#x3D; all #在资源模式（schema - $ &#123;platform&#125; .sql）中使用的平台。</span><br><span class="line">spring.datasource.schema &#x3D; #Schema（DDL）脚本资源引用。</span><br><span class="line">spring.datasource.separator &#x3D;;  #语句分隔符在SQL初始化脚本中。</span><br><span class="line">spring.datasource.sql-script-encoding &#x3D; #SQL脚本编码。</span><br><span class="line">spring.datasource.test-on-borrow &#x3D; #例如&#96;false&#96;</span><br><span class="line">spring.datasource.test-on-return &#x3D; #例如&#96;false&#96;</span><br><span class="line">spring.datasource.test-while-idle &#x3D; #</span><br><span class="line">spring.datasource.time-between-eviction-runs-millis &#x3D; 1</span><br><span class="line">spring.datasource.type &#x3D; #要使用的连接池实现的完全限定名称。默认情况下，它是从类路径自动检测的。</span><br><span class="line">spring.datasource.url &#x3D; #数据库的JDBC url。</span><br><span class="line">spring.datasource.username&#x3D; </span><br><span class="line">spring.datasource.validation-query&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># H2 Web Console (H2ConsoleProperties)  </span><br><span class="line">spring.h2.console.enabled &#x3D; false #启用控制台。</span><br><span class="line">spring.h2.console.path &#x3D; &#x2F; h2-console #控制台可用的路径。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JOOQ (JooqAutoConfiguration)</span><br><span class="line">spring.jooq.sql-dialect&#x3D;  # 与配置的数据源通信时使用的SQLDialect JOOQ。 例如&#96;POSTGRES&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)</span><br><span class="line">spring.data.jpa.repositories.enabled &#x3D; true #启用JPA存储库。</span><br><span class="line">spring.jpa.database &#x3D; #目标数据库进行操作，默认情况下自动检测。可以使用“databasePlatform”属性设置。</span><br><span class="line">spring.jpa.database-platform &#x3D; #要运行的目标数据库的名称，默认情况下自动检测。可以使用“数据库”枚举来设置。</span><br><span class="line">spring.jpa.generate-ddl &#x3D; false #启动时初始化模式。</span><br><span class="line">spring.jpa.hibernate.ddl-auto &#x3D; #DDL模式。这实际上是“hibernate.hbm2ddl.auto”属性的快捷方式。使用嵌入式数据库时默认为“创建删除”，否则为“否”。</span><br><span class="line">spring.jpa.hibernate.naming-strategy &#x3D; #命名策略完全限定名。</span><br><span class="line">spring.jpa.open-in-view &#x3D; true #注册OpenEntityManagerInViewInterceptor。将JPA EntityManager绑定到线程以进行请求的整个处理。</span><br><span class="line">spring.jpa.properties。* &#x3D; #在JPA提供程序上设置的其他本机属性。</span><br><span class="line">spring.jpa.show-sql &#x3D; false #启用SQL语句的日志记录。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JTA (JtaAutoConfiguration)</span><br><span class="line">spring.jta。* &#x3D; #技术特定配置</span><br><span class="line">spring.jta.log-dir &#x3D; #Transaction logs目录。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ATOMIKOS</span><br><span class="line">spring.jta.atomikos.connectionfactory.borrow-connection-timeout &#x3D; 30 #从池中借用连接的超时（以秒为单位）。</span><br><span class="line">spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag &#x3D; true #创建会话时是否忽略事务标志。</span><br><span class="line">spring.jta.atomikos.connectionfactory.local-transaction-mode &#x3D; false #是否需要本地事务。</span><br><span class="line">spring.jta.atomikos.connectionfactory.maintenance-interval &#x3D; 60 #池的维护线程运行之间的时间（以秒为单位）。</span><br><span class="line">spring.jta.atomikos.connectionfactory.max-idle-time &#x3D; 60 #从池中清除连接之后的时间（以秒为单位）。</span><br><span class="line">spring.jta.atomikos.connectionfactory.max-lifetime &#x3D; 0 #在被破坏之前可以将连接合并的时间（以秒为单位）。 0表示无限制。</span><br><span class="line">spring.jta.atomikos.connectionfactory.max-pool-size &#x3D; 1 #池的最大大小。</span><br><span class="line">spring.jta.atomikos.connectionfactory.min-pool-size &#x3D; 1 #池的最小大小。</span><br><span class="line">spring.jta.atomikos.connectionfactory.reap-timeout &#x3D; 0 #借用连接的收获超时（以秒为单位）。 0表示无限制。</span><br><span class="line">spring.jta.atomikos.connectionfactory.unique-resource-name &#x3D; jmsConnectionFactory #用于在恢复期间标识资源的唯一名称。</span><br><span class="line">spring.jta.atomikos.datasource.borrow-connection-timeout &#x3D; 30 #从池中借出连接的超时（秒）。</span><br><span class="line">spring.jta.atomikos.datasource.default-isolation-level &#x3D; #池提供的连接的默认隔离级别。</span><br><span class="line">spring.jta.atomikos.datasource.login-timeout &#x3D; #用于建立数据库连接的超时（以秒为单位）。</span><br><span class="line">spring.jta.atomikos.datasource.maintenance-interval &#x3D; 60 #池的维护线程运行之间的时间（以秒为单位）。</span><br><span class="line">spring.jta.atomikos.datasource.max-idle-time &#x3D; 60 #从池中清除连接之后的时间（以秒为单位）。</span><br><span class="line">spring.jta.atomikos.datasource.max-lifetime &#x3D; 0 #在被破坏之前可以将连接合并的时间（以秒为单位）。 0表示无限制。</span><br><span class="line">spring.jta.atomikos.datasource.max-pool-size &#x3D; 1 #池的最大大小。</span><br><span class="line">spring.jta.atomikos.datasource.min-pool-size &#x3D; 1 #池的最小大小。</span><br><span class="line">spring.jta.atomikos.datasource.reap-timeout &#x3D; 0 #借用连接的收获超时（以秒为单位）。 0表示无限制。</span><br><span class="line">spring.jta.atomikos.datasource.test-query &#x3D; #用于在返回连接之前验证连接的SQL查询或语句。</span><br><span class="line">spring.jta.atomikos.datasource.unique-resource-name &#x3D; dataSource #用于在恢复期间识别资源的唯一名称。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># BITRONIX</span><br><span class="line">spring.jta.bitronix.connectionfactory.acquire-increment &#x3D; 1 #生成池时要创建的连接数。</span><br><span class="line">spring.jta.bitronix.connectionfactory.acquisition-interval &#x3D; 1 #在获取无效连接后再次尝试获取连接之前等待的时间（以秒为单位）。</span><br><span class="line">spring.jta.bitronix.connectionfactory.acquisition-timeout &#x3D; 30 #从池中获取连接的超时（以秒为单位）。</span><br><span class="line">spring.jta.bitronix.connectionfactory.allow-local-transactions &#x3D; true #事务管理器是否允许混合XA和非XA事务。</span><br><span class="line">spring.jta.bitronix.connectionfactory.apply-transaction-timeout &#x3D; false #当XAResource被登记时，是否应该设置事务超时。</span><br><span class="line">spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled &#x3D; true #资源是否应该被自动登记和删除。</span><br><span class="line">spring.jta.bitronix.connectionfactory.cache-producer-consumer &#x3D; true #是否生产和消费者应该被缓存。</span><br><span class="line">spring.jta.bitronix.connectionfactory.defer-connection-release &#x3D; true #提供程序是否可以在同一连接上运行许多事务，并支持事务交织。</span><br><span class="line">spring.jta.bitronix.connectionfactory.ignore-recovery-failures &#x3D; false #是否应忽略恢复失败。</span><br><span class="line">spring.jta.bitronix.connectionfactory.max-idle-time &#x3D; 60 #从池中清除连接之后的时间（以秒为单位）。</span><br><span class="line">spring.jta.bitronix.connectionfactory.max-pool-size &#x3D; 10 #池的最大大小。 0表示无限制。</span><br><span class="line">spring.jta.bitronix.connectionfactory.min-pool-size &#x3D; 0 #池的最小大小。</span><br><span class="line">spring.jta.bitronix.connectionfactory.password &#x3D; #用于连接到JMS提供程序的密码。</span><br><span class="line">spring.jta.bitronix.connectionfactory.share-transaction-connections &#x3D; false #ACCESSIBLE状态中的连接是否可以在事务的上下文中共享。</span><br><span class="line">spring.jta.bitronix.connectionfactory.test-connections &#x3D; true #从池中获取连接是否应该进行测试。</span><br><span class="line">spring.jta.bitronix.connectionfactory.two-pc-ordering-position &#x3D; 1 #在两阶段提交期间该资源应该采取的位置（始终为Integer.MIN_VALUE，始终为Integer.MAX_VALUE）。</span><br><span class="line">spring.jta.bitronix.connectionfactory.unique-name &#x3D; jmsConnectionFactory #用于在恢复期间标识资源的唯一名称。</span><br><span class="line">spring.jta.bitronix.connectionfactory.use-tm-join &#x3D; true启动XAResource时是否应使用TMJOIN。</span><br><span class="line">spring.jta.bitronix.connectionfactory.user &#x3D; #用于连接到JMS提供者的用户。</span><br><span class="line">spring.jta.bitronix.datasource.acquire-increment &#x3D; 1 #生成池时要创建的连接数。</span><br><span class="line">spring.jta.bitronix.datasource.acquisition-interval &#x3D; 1 #在获取无效连接后再尝试获取连接之前等待的时间（以秒为单位）。</span><br><span class="line">spring.jta.bitronix.datasource.acquisition-timeout &#x3D; 30 #从池中获取连接的超时（以秒为单位）。</span><br><span class="line">spring.jta.bitronix.datasource.allow-local-transactions &#x3D; true #事务管理器是否允许混合XA和非XA事务。</span><br><span class="line">spring.jta.bitronix.datasource.apply-transaction-timeout &#x3D; false #当XAResource被登记时，是否应该设置事务超时。</span><br><span class="line">spring.jta.bitronix.datasource.automatic-enlisting-enabled &#x3D; true #资源是否应该被登记和自动删除。</span><br><span class="line">spring.jta.bitronix.datasource.cursor-holdability &#x3D; #连接的默认游标保持性。</span><br><span class="line">spring.jta.bitronix.datasource.defer-connection-release &#x3D; true #数据库是否可以在同一连接上运行许多事务，并支持事务交织。</span><br><span class="line">spring.jta.bitronix.datasource.enable-jdbc4-connection-test &#x3D; #从池中获取连接时是否调用Connection.isValid（）。</span><br><span class="line">spring.jta.bitronix.datasource.ignore-recovery-failures &#x3D; false #是否应忽略恢复失败。</span><br><span class="line">spring.jta.bitronix.datasource.isolation-level &#x3D; #连接的默认隔离级别。</span><br><span class="line">spring.jta.bitronix.datasource.local-auto-commit &#x3D; #本地事务的默认自动提交模式。</span><br><span class="line">spring.jta.bitronix.datasource.login-timeout &#x3D; #用于建立数据库连接的超时（以秒为单位）。</span><br><span class="line">spring.jta.bitronix.datasource.max-idle-time &#x3D; 60 #从池中清除连接之后的时间（以秒为单位）。</span><br><span class="line">spring.jta.bitronix.datasource.max-pool-size &#x3D; 10 #池的最大大小。 0表示无限制。</span><br><span class="line">spring.jta.bitronix.datasource.min-pool-size &#x3D; 0 #池的最小大小。</span><br><span class="line">spring.jta.bitronix.datasource.prepared-statement-cache-size &#x3D; 0 #准备好的语句高速缓存的目标大小。 0禁用缓存。</span><br><span class="line">spring.jta.bitronix.datasource.share-transaction-connections &#x3D; false #ACCESSIBLE状态下的连接是否可以在事务的上下文中共享。</span><br><span class="line">spring.jta.bitronix.datasource.test-query &#x3D; #用于在返回连接之前验证连接的SQL查询或语句。</span><br><span class="line">spring.jta.bitronix.datasource.two-pc-ordering-position &#x3D; 1 #在两阶段提交期间该资源应该采取的位置（始终为Integer.MIN_VALUE，始终为Integer.MAX_VALUE）。</span><br><span class="line">spring.jta.bitronix.datasource.unique-name &#x3D; dataSource #用于在恢复期间标识资源的唯一名称。</span><br><span class="line">spring.jta.bitronix.datasource.use-tm-join &#x3D; true启动XAResource时是否应使用TMJOIN。</span><br><span class="line"></span><br><span class="line"># EMBEDDED MONGODB (EmbeddedMongoProperties)</span><br><span class="line">spring.mongodb.embedded.features &#x3D; SYNC_DELAY #启用功能的逗号分隔列表。</span><br><span class="line">spring.mongodb.embedded.version &#x3D; 2.6.10 #Mongo使用版本。</span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># 整合属性</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"> #ACTIVEMQ（ActiveMQProperties）</span><br><span class="line">spring.activemq.broker-url &#x3D; #ActiveMQ代理的URL。 默认自动生成。 例如&#96;tcp：&#x2F;&#x2F; localhost：61616&#96;</span><br><span class="line">spring.activemq.in-memory &#x3D; true #指定默认代理URL是否应在内存中。 如果指定了一个显式代理，则被忽略。</span><br><span class="line">spring.activemq.password &#x3D; #登录密码的代理。</span><br><span class="line">spring.activemq.pooled &#x3D; false #指定是否创建PooledConnectionFactory而不是常规的ConnectionFactory。</span><br><span class="line">spring.activemq.user &#x3D; #代理登录用户。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ARTEMIS (ArtemisProperties)</span><br><span class="line">spring.artemis.embedded.cluster-password &#x3D; #群集密码。 默认情况下随机生成。</span><br><span class="line">spring.artemis.embedded.data-directory &#x3D; #日志文件目录。 如果持久性被关闭，则不需要。</span><br><span class="line">spring.artemis.embedded.enabled &#x3D; true #如果Artemis服务器API可用，启用嵌入式模式。</span><br><span class="line">spring.artemis.embedded.persistent &#x3D; false #启用持久存储。</span><br><span class="line">spring.artemis.embedded.queues &#x3D; #启动时要创建的队列的逗号分隔列表。</span><br><span class="line">spring.artemis.embedded.server-id &#x3D; #服务器ID。 默认情况下，使用自动递增的计数器。</span><br><span class="line">spring.artemis.embedded.topics &#x3D; #启动时要创建的主题的逗号分隔列表。</span><br><span class="line">spring.artemis.host &#x3D; localhost #Artemis代理主机。</span><br><span class="line">spring.artemis.mode &#x3D; #Artemis部署模式，默认情况下自动检测。 可以显式设置为“native”或“embedded”。</span><br><span class="line">spring.artemis.port &#x3D; 61616 #Artemis 中间件端口。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># SPRING BATCH(Batch 配置)</span><br><span class="line">spring.batch.initializer.enabled &#x3D; true #如果需要，在启动时创建所需的批处理表。</span><br><span class="line">spring.batch.job.enabled &#x3D; true #在启动时执行上下文中的所有Spring批处理作业。</span><br><span class="line">spring.batch.job.names &#x3D; #在启动时执行的作业名称的逗号分隔列表（例如&#96;job1，job2&#96;）。 默认情况下，执行在上下文中找到的所有作业。</span><br><span class="line">spring.batch.schema &#x3D; classpath：org &#x2F; springframework &#x2F; batch &#x2F; core &#x2F; schema - @@ platform @@。sql #用于初始化数据库模式的SQL文件的路径。</span><br><span class="line">spring.batch.table-prefix &#x3D; #所有批次元数据表的表前缀。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># HORNETQ (HornetQ 配置)</span><br><span class="line">spring.hornetq.embedded.cluster-password &#x3D; #集群密码。 默认情况下随机生成。</span><br><span class="line">spring.hornetq.embedded.data-directory &#x3D; #日志文件目录。 如果持久性被关闭，则不需要。</span><br><span class="line">spring.hornetq.embedded.enabled &#x3D; true #如果HornetQ服务器API可用，启用嵌入式模式。</span><br><span class="line">spring.hornetq.embedded.persistent &#x3D; false #启用持久存储。</span><br><span class="line">spring.hornetq.embedded.queues &#x3D; #启动时要创建的队列的逗号分隔列表。</span><br><span class="line">spring.hornetq.embedded.server-id &#x3D; #服务器ID。 默认情况下，使用自动递增的计数器。</span><br><span class="line">spring.hornetq.embedded.topics &#x3D; #在启动时创建的主题的逗号分隔列表。</span><br><span class="line">spring.hornetq.host &#x3D; localhost #HornetQ代理主机。</span><br><span class="line">spring.hornetq.mode &#x3D; #HornetQ部署模式，默认情况下自动检测。 可以显式设置为“native”或“embedded”。</span><br><span class="line">spring.hornetq.port &#x3D; 5445 #HornetQ代理端口。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JMS (Jms 配置)</span><br><span class="line"># 连接工厂JNDI名称。 设置时，优先于其他连接工厂自动配置。</span><br><span class="line">spring.jms.jndi-name&#x3D; </span><br><span class="line"># 容器的确认模式。 默认情况下，监听器被自动确认处理。</span><br><span class="line">spring.jms.listener.acknowledge-mode&#x3D; </span><br><span class="line"># 启动时自动启动容器。</span><br><span class="line">spring.jms.listener.auto-startup&#x3D; true</span><br><span class="line"># 最小并发消费者数。</span><br><span class="line">spring.jms.listener.concurrency&#x3D; </span><br><span class="line"># 最大并发消费者数。</span><br><span class="line">spring.jms.listener.max-concurrency&#x3D; </span><br><span class="line"># 指定默认的目的地类型是否为主题。</span><br><span class="line">spring.jms.pub-sub-domain&#x3D; false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># RABBIT (Rabbit 配置)</span><br><span class="line"># 客户端应连接到的逗号分隔的地址列表。</span><br><span class="line">spring.rabbitmq.addresses &#x3D; </span><br><span class="line">spring.rabbitmq.dynamic &#x3D;  true # 创建一个AmqpAdmin bean。</span><br><span class="line">spring.rabbitmq.host &#x3D;  localhost# RabbitMQ主机。</span><br><span class="line">spring.rabbitmq.listener.acknowledge-mode &#x3D; # 容器的确认模式。</span><br><span class="line">spring.rabbitmq.listener.auto-startup &#x3D;  true# 启动时自动启动容器。</span><br><span class="line">spring.rabbitmq.listener.concurrency &#x3D; # 最少消费者数。</span><br><span class="line">spring.rabbitmq.listener.max-concurrency &#x3D; # 最大消费者数。</span><br><span class="line">spring.rabbitmq.listener.prefetch &#x3D; # 在单个请求中要处理的消息数。它应该大于或等于事务大小（如果使用）。</span><br><span class="line">spring.rabbitmq.listener.transaction-size &#x3D; # 在事务中要处理的消息数。为了获得最佳结果，它应该小于或等于预取计数。</span><br><span class="line">spring.rabbitmq.password &#x3D; # 登录以对代理进行身份验证。</span><br><span class="line">spring.rabbitmq.port &#x3D;  5672# RabbitMQ端口。</span><br><span class="line">spring.rabbitmq.requested-heartbeat &#x3D; # 请求的心跳超时，以秒为单位;零为无。</span><br><span class="line">spring.rabbitmq.ssl.enabled &#x3D;  false# 启用SSL支持。</span><br><span class="line">spring.rabbitmq.ssl.key-store &#x3D;  # 保存SSL证书的密钥存储区的路径。</span><br><span class="line">spring.rabbitmq.ssl.key-store-password &#x3D; # 用于访问密钥库的密码。</span><br><span class="line">spring.rabbitmq.ssl.trust-store &#x3D; # 保存SSL证书的Trust存储。</span><br><span class="line">spring.rabbitmq.ssl.trust-store-password &#x3D; # 用于访问信任存储的密码。</span><br><span class="line">spring.rabbitmq.username &#x3D; # 登录用户对代理进行身份验证。</span><br><span class="line">spring.rabbitmq.virtual-host &#x3D; # 连接到代理时使用的虚拟主机。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 端点配置（EndpointCorsProperties）</span><br><span class="line"># 设置是否支持凭据。 未设置时，不支持凭据。</span><br><span class="line">endpoints.cors.allow-credentials&#x3D; </span><br><span class="line"># 在请求中允许的头文件逗号分隔列表。 &#39;*&#39;允许所有标题。</span><br><span class="line">endpoints.cors.allowed-headers&#x3D; </span><br><span class="line"># 逗号分隔的允许的方法列表。 &#39;*&#39;允许所有方法。</span><br><span class="line">endpoints.cors.allowed-methods&#x3D; GET</span><br><span class="line"># 逗号分隔的起始列表允许。 &#39;*&#39;允许所有来源。 未设置时，禁用CORS支持。</span><br><span class="line">endpoints.cors.allowed-origins&#x3D; </span><br><span class="line"># 包含在响应中的标题的逗号分隔列表。</span><br><span class="line">endpoints.cors.exposed-headers&#x3D; </span><br><span class="line"># 客户端可以缓存飞行前请求的响应时间（秒）。</span><br><span class="line">endpoints.cors.max-age&#x3D; 1800</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JMX ENDPOINT (EndpointMBeanExportProperties) （端点MBean导出属性）</span><br><span class="line"># JMX域名。 如果设置为&#39;spring.jmx.default-domain&#39;的值初始化。</span><br><span class="line">endpoints.jmx.domain&#x3D; </span><br><span class="line"># 启用所有端点的JMX导出。</span><br><span class="line">endpoints.jmx.enabled&#x3D; true</span><br><span class="line"># 附加静态属性以附加到表示端点的MBean的所有对象名称。</span><br><span class="line">endpoints.jmx.static-names&#x3D; </span><br><span class="line"># 确保在发生冲突时修改ObjectNames。</span><br><span class="line">endpoints.jmx.unique-names&#x3D; false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JOLOKIA  JOLOKIA 配置</span><br><span class="line"># 见Jolokia手册</span><br><span class="line">jolokia.config.*&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 管理HTTP服务器（管理服务器属性）</span><br><span class="line"># 在每个响应中添加“X-Application-Context”HTTP头。</span><br><span class="line">management.add-application-context-header&#x3D; true</span><br><span class="line"># 管理端点应绑定到的网络地址。</span><br><span class="line">management.address&#x3D; </span><br><span class="line"># 管理端点上下文路径。 例如&#96;&#x2F; actuator&#96;</span><br><span class="line">management.context-path&#x3D; </span><br><span class="line"># 管理端点HTTP端口。 默认使用与应用程序相同的端口。</span><br><span class="line">management.port&#x3D; </span><br><span class="line"># 启用安全性</span><br><span class="line">management.security.enabled&#x3D; true</span><br><span class="line"># 访问管理端点所需的角色。</span><br><span class="line">management.security.role&#x3D; ADMIN</span><br><span class="line"># 会话创建策略使用（always，never，if_required，stateless）（总是，永远，if_required，无状态）。</span><br><span class="line">management.security.sessions&#x3D; stateless</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># HEALTH INDICATORS (previously health.*)</span><br><span class="line"># 启用数据库运行状况检查</span><br><span class="line">management.health.db.enabled&#x3D; true</span><br><span class="line"># 启用默认的健康指标。</span><br><span class="line">management.health.defaults.enabled&#x3D; true</span><br><span class="line"># 启用磁盘空间运行状况检查。</span><br><span class="line">management.health.diskspace.enabled&#x3D; true</span><br><span class="line"># 用于计算可用磁盘空间的路径。</span><br><span class="line">management.health.diskspace.path&#x3D; </span><br><span class="line"># 应该可用的最小磁盘空间（以字节为单位）。</span><br><span class="line">management.health.diskspace.threshold&#x3D; 0</span><br><span class="line"># 启用弹性搜索健康检查。</span><br><span class="line">management.health.elasticsearch.enabled&#x3D; true</span><br><span class="line"># 逗号分隔的索引名称。</span><br><span class="line">management.health.elasticsearch.indices&#x3D; </span><br><span class="line"># 等待群集响应的时间（以毫秒为单位）。</span><br><span class="line">management.health.elasticsearch.response-timeout&#x3D; 100</span><br><span class="line"># 启用JMS健康检查。</span><br><span class="line">management.health.jms.enabled&#x3D; true</span><br><span class="line"># 启用邮件运行状况检查。</span><br><span class="line">management.health.mail.enabled&#x3D; true</span><br><span class="line"># 启用MongoDB健康检查。</span><br><span class="line">management.health.mongo.enabled&#x3D; true</span><br><span class="line"># 启用RabbitMQ运行状况检查。</span><br><span class="line">management.health.rabbit.enabled&#x3D; true</span><br><span class="line"># 启用Redis健康检查。</span><br><span class="line">management.health.redis.enabled&#x3D; true</span><br><span class="line"># 启用Solr运行状况检查。</span><br><span class="line">management.health.solr.enabled&#x3D; true</span><br><span class="line"># 按照严重性的顺序，以逗号分隔的健康状态列表。</span><br><span class="line">management.health.status.order&#x3D; DOWN, OUT_OF_SERVICE, UNKNOWN, UP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># TRACING ((TraceProperties) 跟踪性能</span><br><span class="line"># 跟踪中包含的项目。</span><br><span class="line">management.trace.include&#x3D; request-headers,response-headers,errors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 远程 shell配置</span><br><span class="line"># 验证类型。 根据环境自动检测。</span><br><span class="line">shell.auth&#x3D; simple</span><br><span class="line"># JAAS域。</span><br><span class="line">shell.auth.jaas.domain&#x3D; my-domain</span><br><span class="line"># 验证密钥的路径。 这应该指向一个有效的“.pem”文件。</span><br><span class="line">shell.auth.key.path&#x3D; </span><br><span class="line"># 登录用户。</span><br><span class="line">shell.auth.simple.user.name&#x3D; user</span><br><span class="line"># 登录用户的密码。</span><br><span class="line">shell.auth.simple.user.password&#x3D; </span><br><span class="line"># 登录到CRaSH控制台的所需的角色，以逗号分隔列表。</span><br><span class="line">shell.auth.spring.roles&#x3D; ADMIN</span><br><span class="line"># 用于查找命令的模式。</span><br><span class="line">shell.command-path-patterns&#x3D; classpath*:&#x2F;commands&#x2F;**,classpath*:&#x2F;crash&#x2F;commands&#x2F;**</span><br><span class="line"># 扫描更改并在必要时更新命令（以秒为单位）。</span><br><span class="line">shell.command-refresh-interval&#x3D; -1</span><br><span class="line"># 用于查找配置的模式。</span><br><span class="line">shell.config-path-patterns&#x3D; classpath*:&#x2F;crash&#x2F;*</span><br><span class="line"># 逗号分隔的要禁用的命令列表。</span><br><span class="line">shell.disabled-commands&#x3D; jpa*,jdbc*,jndi*</span><br><span class="line"># 禁用逗号分隔的插件列表。 默认情况下，根据环境禁用某些插件。</span><br><span class="line">shell.disabled-plugins&#x3D; </span><br><span class="line"># 用户被提示再次登录后的毫秒数。</span><br><span class="line">shell.ssh.auth-timeout &#x3D; </span><br><span class="line"># 启用CRaSH SSH支持。</span><br><span class="line">shell.ssh.enabled&#x3D; true</span><br><span class="line"># 未使用的连接关闭之后的毫秒数。</span><br><span class="line">shell.ssh.idle-timeout &#x3D; </span><br><span class="line"># SSH服务器密钥路径。</span><br><span class="line">shell.ssh.key-path&#x3D; </span><br><span class="line"># SSH端口。</span><br><span class="line">shell.ssh.port&#x3D; 2000</span><br><span class="line"># 启用CRaSH telnet支持。 如果TelnetPlugin可用，默认情况下启用。</span><br><span class="line">shell.telnet.enabled&#x3D; false</span><br><span class="line"># Telnet端口。</span><br><span class="line">shell.telnet.port&#x3D; 5000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># GIT 信息配置</span><br><span class="line"># 生成的git信息属性文件的资源引用。</span><br><span class="line">spring.git.properties&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 标准出口</span><br><span class="line"># 模式，告诉聚合器如何从源存储库中的键。</span><br><span class="line">spring.metrics.export.aggregate.key-pattern&#x3D; </span><br><span class="line"># 全局存储库的前缀如果处于活动状态。</span><br><span class="line">spring.metrics.export.aggregate.prefix&#x3D; </span><br><span class="line"># 导出刻度之间以毫秒为单位的延迟。 按照这种延迟，指标将按计划导出到外部来源。</span><br><span class="line">spring.metrics.export.delay-millis&#x3D; 5000</span><br><span class="line"># 标志以启用度量标准导出（假设MetricWriter可用）。</span><br><span class="line">spring.metrics.export.enabled&#x3D; true</span><br><span class="line"># 要排除的度量名称列表。 应用后包括。</span><br><span class="line">spring.metrics.export.excludes&#x3D; </span><br><span class="line"># 要包含的度量名称的模式列表。</span><br><span class="line">spring.metrics.export.includes&#x3D; </span><br><span class="line"># redis存储库导出的密钥（如果活动）。</span><br><span class="line">spring.metrics.export.redis.key&#x3D; keys.spring.metrics</span><br><span class="line"># redis存储库的前缀 如果处于活动状态。</span><br><span class="line">spring.metrics.export.redis.prefix&#x3D; spring.metrics</span><br><span class="line"># 标志基于不导出不变的度量值来关闭任何可用的优化。</span><br><span class="line">spring.metrics.export.send-latest&#x3D; </span><br><span class="line"># 主机的statsd服务器接收导出的指标。</span><br><span class="line">spring.metrics.export.statsd.host&#x3D; </span><br><span class="line"># 接收导出指标的statsd服务器端口。</span><br><span class="line">spring.metrics.export.statsd.port&#x3D; 8125</span><br><span class="line"># statsd导出指标的前缀。</span><br><span class="line">spring.metrics.export.statsd.prefix&#x3D; </span><br><span class="line"># 每个MetricWriter bean名称具有特定的触发器属性。</span><br><span class="line">spring.metrics.export.triggers.*&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># DEVTOOLS属性</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"># DEVTOOLS（开发工具属性）</span><br><span class="line"># 启用一个livereload.com兼容的服务器。</span><br><span class="line">spring.devtools.livereload.enabled&#x3D; true</span><br><span class="line">#  # Server port.</span><br><span class="line">spring.devtools.livereload.port&#x3D; 35729</span><br><span class="line"># 应该排除的触发完全重新启动的其他模式。</span><br><span class="line">spring.devtools.restart.additional-exclude&#x3D; </span><br><span class="line"># 观看更改的附加路径。</span><br><span class="line">spring.devtools.restart.additional-paths&#x3D; </span><br><span class="line"># 启用自动重启功能。</span><br><span class="line">spring.devtools.restart.enabled&#x3D; true</span><br><span class="line"># 应该排除的模式触发完全重新启动。</span><br><span class="line">spring.devtools.restart.exclude&#x3D; META-INF&#x2F;maven&#x2F;**,META-INF&#x2F;resources&#x2F;**,resources&#x2F;**,static&#x2F;**,public&#x2F;**,templates&#x2F;**,**&#x2F;*Test.class,**&#x2F;*Tests.class,git.properties</span><br><span class="line"># 轮询类路径更改之间等待的时间量（以毫秒为单位）。</span><br><span class="line">spring.devtools.restart.poll-interval&#x3D; 1000</span><br><span class="line"># 触发重新启动之前没有任何类路径更改所需的安静时间量（以毫秒为单位）。</span><br><span class="line">spring.devtools.restart.quiet-period&#x3D; 400</span><br><span class="line"># 更改后的特定文件的名称将触发重新启动检查。 如果未指定任何类路径文件更改将触发重新启动。</span><br><span class="line">spring.devtools.restart.trigger-file&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 远程开发工具属性</span><br><span class="line"># 用于处理远程连接的上下文路径。</span><br><span class="line">spring.devtools.remote.context-path&#x3D; &#x2F;.~~spring-boot!~</span><br><span class="line"># 启用远程调试支持。</span><br><span class="line">spring.devtools.remote.debug.enabled&#x3D; true</span><br><span class="line"># 本地远程调试服务器端口。</span><br><span class="line">spring.devtools.remote.debug.local-port&#x3D; 8000</span><br><span class="line"># 用于连接到远程应用程序的代理主机。</span><br><span class="line">spring.devtools.remote.proxy.host&#x3D; </span><br><span class="line"># 用于连接到远程应用程序的代理端口。</span><br><span class="line">spring.devtools.remote.proxy.port&#x3D; </span><br><span class="line"># 启用远程重启。</span><br><span class="line">spring.devtools.remote.restart.enabled&#x3D; true</span><br><span class="line"># 建立连接所需的共享密钥（需要启用远程支持）。</span><br><span class="line">spring.devtools.remote.secret&#x3D; </span><br><span class="line"># HTTP头用于传输共享密钥。&lt;&#x2F; span&gt;</span><br><span class="line">spring.devtools.remote.secret-header-name&#x3D; X-AUTH-TOKEN</span><br><span class="line"></span><br><span class="line">＃----------------------------------------</span><br><span class="line">#TESTING PROPERTIES</span><br><span class="line">＃----------------------------------------</span><br><span class="line"></span><br><span class="line">spring.test.database.replace &#x3D; any＃要替换的现有DataSource的类型。</span><br><span class="line">spring.test.mockmvc.print &#x3D;默认#MVC打印选项。</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PC列表通用排序功能</title>
      <link href="/2020/03/17/%E9%80%9A%E7%94%A8%E5%88%97%E8%A1%A8%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/"/>
      <url>/2020/03/17/%E9%80%9A%E7%94%A8%E5%88%97%E8%A1%A8%E6%8E%92%E5%BA%8F%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><p>之前做过好多外包都没写过排序的实现，这次发现同事写的有问题，所以手动实现一个。不知是否有用。直接上代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 给表的排序字段排序</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年07月17日 16:51</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Api</span>(tags = <span class="string">"给列表排序"</span>)</span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/common/sort"</span>)</span><br><span class="line"><span class="meta">@Validated</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SortTableController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ICommonSV commonSV;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拖拽标志对应的表和字段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, String&gt; tables = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拖拽标志对应的表和字段</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, String&gt; tablesWhere = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">// 表名</span></span><br><span class="line">tables.put(<span class="string">"app_banner"</span>, <span class="string">"sort_num"</span>);</span><br><span class="line">tables.put(<span class="string">"app_health_plate"</span>, <span class="string">"sort_num"</span>);</span><br><span class="line">tables.put(<span class="string">"app_start_page"</span>, <span class="string">"sort_num"</span>);</span><br><span class="line">tables.put(<span class="string">"clinic_manual"</span>, <span class="string">"sort"</span>);</span><br><span class="line">tables.put(<span class="string">"sys_menu"</span>, <span class="string">"menu_order"</span>);</span><br><span class="line">tables.put(<span class="string">"nav_dept_adv"</span>, <span class="string">"sort_num"</span>);</span><br><span class="line"><span class="comment">// 排序条件</span></span><br><span class="line">tablesWhere.put(<span class="string">"sys_menu"</span>, <span class="string">"and parent_id = #&#123;params.p0&#125;"</span>);</span><br><span class="line">tablesWhere.put(<span class="string">"clinic_manual"</span>, <span class="string">"and deleted !='01' "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Log</span></span><br><span class="line"><span class="meta">@ApiOperation</span>(<span class="string">"排序"</span>)</span><br><span class="line"><span class="meta">@ApiImplicitParams</span>(&#123;</span><br><span class="line"><span class="meta">@ApiImplicitParam</span>(value = <span class="string">"拖拽标志(nav_doctor_infor,nav_popu_dept_infor,nav_quick_entry_infor)"</span>, name = <span class="string">"tableName"</span>, paramType = <span class="string">"form"</span>),</span><br><span class="line"><span class="meta">@ApiImplicitParam</span>(value = <span class="string">"上"</span>, name = <span class="string">"top"</span>, paramType = <span class="string">"form"</span>),</span><br><span class="line"><span class="meta">@ApiImplicitParam</span>(value = <span class="string">"中"</span>, name = <span class="string">"mid"</span>, paramType = <span class="string">"form"</span>),</span><br><span class="line"><span class="meta">@ApiImplicitParam</span>(value = <span class="string">"下"</span>, name = <span class="string">"bottom"</span>, paramType = <span class="string">"form"</span>),</span><br><span class="line"><span class="meta">@ApiImplicitParam</span>(value = <span class="string">"条件"</span>, name = <span class="string">"whereCase"</span>, paramType = <span class="string">"form"</span>),</span><br><span class="line">&#125;)</span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/sortTable"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> APIResponse <span class="title">sortTable</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">@NotNull String tableName,</span></span></span><br><span class="line"><span class="function"><span class="params">Long top,</span></span></span><br><span class="line"><span class="function"><span class="params">@NotNull Long mid,</span></span></span><br><span class="line"><span class="function"><span class="params">Long bottom,</span></span></span><br><span class="line"><span class="function"><span class="params">String[] whereCase</span></span></span><br><span class="line"><span class="function"><span class="params">)</span> </span>&#123;</span><br><span class="line">String sort = tables.get(tableName);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isBlank(sort)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">&#125;</span><br><span class="line">Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="comment">//根据上下判定是上移还是下移</span></span><br><span class="line">Boolean down = <span class="keyword">null</span>;</span><br><span class="line">Long midSort = <span class="keyword">null</span>;</span><br><span class="line">Long topSort = <span class="keyword">null</span>;</span><br><span class="line">Long bottomSort = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (top == <span class="keyword">null</span>) &#123;</span><br><span class="line">down = <span class="keyword">false</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (bottom == <span class="keyword">null</span>) &#123;</span><br><span class="line">down = <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">midSort = findSort(mid, tableName);</span><br><span class="line">topSort = findSort(top, tableName);</span><br><span class="line">bottomSort = findSort(bottom, tableName);</span><br><span class="line">down = midSort &gt; topSort &amp;&amp; midSort &gt; bottomSort;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 执行更新操作</span></span><br><span class="line">String updateSql = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">if</span> (down) &#123;</span><br><span class="line"><span class="keyword">if</span> (topSort == <span class="keyword">null</span>) &#123;</span><br><span class="line">topSort = findSort(top, tableName);</span><br><span class="line">&#125;</span><br><span class="line">List&lt;Long&gt; ids = findIds(top, mid, tableName, whereCase, <span class="string">"first"</span>);</span><br><span class="line"><span class="keyword">if</span> (ids.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> APIResponseBuilder.successNoData();</span><br><span class="line">&#125;</span><br><span class="line">updateSql = <span class="string">"update "</span> + tableName + <span class="string">" set "</span> + sort + <span class="string">" = "</span> + sort + <span class="string">" + 1 where id in ( "</span> + StringUtils.join(ids, <span class="string">","</span>) + <span class="string">" )"</span>;</span><br><span class="line">commonSV.updateByParams(updateSql, params);</span><br><span class="line">params.put(<span class="string">"newSort"</span>, topSort);</span><br><span class="line">params.put(<span class="string">"id"</span>, mid);</span><br><span class="line">updateSql = <span class="string">"update "</span> + tableName + <span class="string">" set "</span> + sort + <span class="string">" = #&#123;params.newSort&#125; where id = #&#123;params.id&#125; "</span>;</span><br><span class="line">commonSV.updateByParams(updateSql, params);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!down) &#123;</span><br><span class="line"><span class="keyword">if</span> (bottomSort == <span class="keyword">null</span>) &#123;</span><br><span class="line">bottomSort = findSort(bottom, tableName);</span><br><span class="line">&#125;</span><br><span class="line">List&lt;Long&gt; ids = findIds(mid, bottom, tableName, whereCase, <span class="string">"last"</span>);</span><br><span class="line"><span class="keyword">if</span> (ids.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">return</span> APIResponseBuilder.successNoData();</span><br><span class="line">&#125;</span><br><span class="line">updateSql = <span class="string">"update "</span> + tableName + <span class="string">" set "</span> + sort + <span class="string">" = "</span> + sort + <span class="string">" - 1 where id in ( "</span> + StringUtils.join(ids, <span class="string">","</span>) + <span class="string">" )"</span>;</span><br><span class="line">commonSV.updateByParams(updateSql, params);</span><br><span class="line">params.put(<span class="string">"newSort"</span>, bottomSort);</span><br><span class="line">params.put(<span class="string">"id"</span>, mid);</span><br><span class="line">updateSql = <span class="string">"update "</span> + tableName + <span class="string">" set "</span> + sort + <span class="string">" = #&#123;params.newSort&#125; where id = #&#123;params.id&#125; "</span>;</span><br><span class="line">commonSV.updateByParams(updateSql, params);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> APIResponseBuilder.successNoDataWithMsg(<span class="string">"排序成功!"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 查询两个ID之间的ID有哪些</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> startId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> endId</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> whereCase</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> removeTag</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> List&lt;Long&gt; <span class="title">findIds</span><span class="params">(Long startId, Long endId, String tableName, String[] whereCase, String removeTag)</span> </span>&#123;</span><br><span class="line">String sort = tables.get(tableName);</span><br><span class="line">String sql = <span class="string">" select id "</span> +</span><br><span class="line"><span class="string">" from "</span> + tableName + <span class="string">" "</span> +</span><br><span class="line"><span class="string">" where "</span> + sort + <span class="string">" &gt;= (select "</span> + sort + <span class="string">" from "</span> + tableName + <span class="string">" where id = #&#123;params.startId&#125;) "</span> +</span><br><span class="line"><span class="string">" and "</span> + sort + <span class="string">" &lt;= (select "</span> + sort + <span class="string">" from "</span> + tableName + <span class="string">" where id = #&#123;params.endId&#125;) "</span>;</span><br><span class="line">String whereCaseStr = tablesWhere.get(tableName);</span><br><span class="line"><span class="keyword">if</span> (whereCaseStr != <span class="keyword">null</span>) &#123;</span><br><span class="line">sql += whereCaseStr;</span><br><span class="line">&#125;</span><br><span class="line">sql += <span class="string">" order by  "</span> + sort + <span class="string">" desc "</span>;</span><br><span class="line">Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">params.put(<span class="string">"startId"</span>, startId);</span><br><span class="line">params.put(<span class="string">"endId"</span>, endId);</span><br><span class="line"><span class="keyword">if</span> (whereCase != <span class="keyword">null</span> &amp;&amp; whereCase.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; whereCase.length; i++) &#123;</span><br><span class="line">params.put(<span class="string">"p"</span> + i, whereCase[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">List&lt;JSONObject&gt; longs = commonSV.queryListJSONObject(sql, params);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(removeTag) &amp;&amp; !longs.isEmpty()) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="string">"last"</span>.equals(removeTag)) &#123;</span><br><span class="line">longs.remove(longs.size() - <span class="number">1</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"first"</span>.equals(removeTag)) &#123;</span><br><span class="line">longs.remove(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> longs.stream().map(n -&gt; n.getLong(<span class="string">"id"</span>)).collect(Collectors.toList());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据ID查询序号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> tableName</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Long <span class="title">findSort</span><span class="params">(Long id, String tableName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (id == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line">String sql = <span class="string">" select "</span> + tables.get(tableName) + <span class="string">" from "</span> + tableName + <span class="string">" where id = #&#123;params.id&#125;"</span>;</span><br><span class="line">Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">params.put(<span class="string">"id"</span>, id);</span><br><span class="line">Number sortNum = commonSV.selectField(sql, params, Number<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">return</span> sortNum.longValue();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 轮子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 轮子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot中Mybatis枚举翻译插件实现</title>
      <link href="/2020/03/17/Mybatis%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0,%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%9A%E4%B8%BE%E5%AD%97%E6%AE%B5%E7%BF%BB%E8%AF%91%E4%B8%BA%E4%B8%AD%E6%96%87%E6%8F%92%E4%BB%B6/"/>
      <url>/2020/03/17/Mybatis%E6%8F%92%E4%BB%B6%E5%AE%9E%E7%8E%B0,%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E6%9E%9A%E4%B8%BE%E5%AD%97%E6%AE%B5%E7%BF%BB%E8%AF%91%E4%B8%BA%E4%B8%AD%E6%96%87%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="开发目的"><a href="#开发目的" class="headerlink" title="开发目的"></a>开发目的</h3><p>新项目中类似状态值都是使用数据库的KEY:VALUE替代的.发现同事都是每次都是自己去数据库查出来,然后循环对比值…</p><a id="more"></a><h3 id="开发目的-1"><a href="#开发目的-1" class="headerlink" title="开发目的"></a>开发目的</h3><blockquote><p>新项目中类似状态值都是使用数据库的KEY:VALUE替代的.发现同事都是每次都是自己去数据库查出来,然后循环对比值.<br>或者是给前端提供枚举查询接口,然后前端遍历.非常麻烦.<br>所以使用Mybatis插件替代这个重复性工作.<br>开发完毕后,发现Mybatis有类型转换器,但是和项目现在的现象出入挺大.以下介绍以下插件的开发.之后还发现和PageHepler冲突,修复了一番.</p></blockquote><h3 id="插件配置到spring容器中"><a href="#插件配置到spring容器中" class="headerlink" title="插件配置到spring容器中"></a>插件配置到spring容器中</h3><blockquote><p>此处有点坑,起初按照容器初始化加入到容器的方式.但是与Springboot的Mybatis的PagerHepler的starter顺序不好控制.导致插件的加载顺序不一致.由于分页插件的拦截顺序严格控制.如果拦截相同的地方就会导致分页插件总计失效.所以采用以下方式,采用容器启动后,加入到Mybatis拦截中的最后一个位置:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 配置枚举翻译插件</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年04月28日 15:23</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPluginConfig</span> <span class="keyword">implements</span> <span class="title">ApplicationRunner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;SqlSessionFactory&gt; sqlSessionFactoryList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(ApplicationArguments args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Iterator var3 = <span class="keyword">this</span>.sqlSessionFactoryList.iterator();</span><br><span class="line">        <span class="keyword">while</span> (var3.hasNext()) &#123;</span><br><span class="line">            SqlSessionFactory sqlSessionFactory = (SqlSessionFactory) var3.next();</span><br><span class="line">            sqlSessionFactory.getConfiguration().addInterceptor(<span class="keyword">new</span> MyBatisEnumHandlePlugin());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插件开发代码"><a href="#插件开发代码" class="headerlink" title="插件开发代码"></a>插件开发代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 处理枚举字段</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年04月28日 14:57</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Intercepts</span>(&#123;</span><br><span class="line">        <span class="meta">@Signature</span>(type = ResultSetHandler<span class="class">.<span class="keyword">class</span>, <span class="title">method</span> </span>= <span class="string">"handleResultSets"</span>, args = Statement<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class">&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">MyBatisEnumHandlePlugin</span> <span class="keyword">implements</span> <span class="title">Interceptor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">intercept</span><span class="params">(Invocation invocation)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        DefaultResultSetHandler statementHandler = (DefaultResultSetHandler) invocation.getTarget();</span><br><span class="line">        Object proceed = invocation.proceed();</span><br><span class="line">        <span class="keyword">if</span> (proceed <span class="keyword">instanceof</span> List) &#123;</span><br><span class="line">            List data = (List) proceed;</span><br><span class="line">            <span class="keyword">if</span> (data == <span class="keyword">null</span> || data.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> proceed;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 对第一个对象进行分析</span></span><br><span class="line">            List&lt;Map&lt;String, Object&gt;&gt; translationInformation = getTranslationInformation(data.get(<span class="number">0</span>).getClass());</span><br><span class="line">            <span class="comment">// 如果没有字典标识,直接返回</span></span><br><span class="line">            <span class="keyword">if</span> (translationInformation.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">return</span> proceed;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 遍历结果进行设置翻译值</span></span><br><span class="line">            <span class="keyword">for</span> (Object datum : data) &#123;</span><br><span class="line">                <span class="keyword">for</span> (Map&lt;String, Object&gt; info : translationInformation) &#123;</span><br><span class="line">                    Field readField = (Field) info.get(<span class="string">"read"</span>);</span><br><span class="line">                    Field writeField = (Field) info.get(<span class="string">"write"</span>);</span><br><span class="line">                    Map dictValues = (Map) info.get(<span class="string">"value"</span>);</span><br><span class="line">                    FieldUtils.writeField(writeField, datum, dictValues.get(readField.get(datum)), <span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> data;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">plugin</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Plugin.wrap(o, <span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setProperties</span><span class="params">(Properties properties)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 通过类,获取需要翻译的字段信息</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Map&lt;String, Object&gt;&gt; getTranslationInformation(Class&lt;?&gt; cls) &#123;</span><br><span class="line">        <span class="comment">// 查询字典值service</span></span><br><span class="line">        ISysDictSV sysDictSV = SpringUtil.getObject(ISysDictSV<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        List&lt;DictField&gt; dicts = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        getAllDictAnnotation(cls, dicts);</span><br><span class="line">        <span class="keyword">if</span> (dicts.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> list;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 开始填充Field</span></span><br><span class="line">        <span class="keyword">for</span> (DictField dictField : dicts) &#123;</span><br><span class="line">            <span class="keyword">if</span> (dictField.enumClass().equals(DictEnum<span class="class">.<span class="keyword">class</span>)) </span>&#123;</span><br><span class="line">                <span class="comment">// 如果是父类枚举直接返回</span></span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 字典读写翻译信息存储</span></span><br><span class="line">            Map&lt;String, Object&gt; fieldInfo = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">            String toField = dictField.to();</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">""</span>.equals(toField)) &#123;</span><br><span class="line">                <span class="comment">//如果没有设置，默认为From()+Name</span></span><br><span class="line">                toField = dictField.from() + <span class="string">"Name"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Field readField = FieldUtils.getField(cls, dictField.from(), <span class="keyword">true</span>);</span><br><span class="line">            Field writeField = FieldUtils.getField(cls, toField, <span class="keyword">true</span>);</span><br><span class="line">            Map dictValues = sysDictSV.getDictValues(dictField.enumClass(), dictField.codeType());</span><br><span class="line">            <span class="keyword">if</span> (readField == <span class="keyword">null</span> || writeField == <span class="keyword">null</span> || dictValues == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            fieldInfo.put(<span class="string">"read"</span>, readField);</span><br><span class="line">            fieldInfo.put(<span class="string">"write"</span>, writeField);</span><br><span class="line">            fieldInfo.put(<span class="string">"value"</span>, dictValues);</span><br><span class="line">            list.add(fieldInfo);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取所有的字典注解</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cls    类信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fields 存放值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getAllDictAnnotation</span><span class="params">(Class&lt;?&gt; cls, List&lt;DictField&gt; fields)</span> </span>&#123;</span><br><span class="line">        DictEntity annotation = cls.getAnnotation(DictEntity<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        <span class="comment">// 加入注解</span></span><br><span class="line">        <span class="keyword">if</span> (annotation != <span class="keyword">null</span>) &#123;</span><br><span class="line">            DictField[] value = annotation.value();</span><br><span class="line">            fields.addAll(Arrays.asList(value));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 继续往上找</span></span><br><span class="line">        <span class="keyword">if</span> (cls.getSuperclass() != <span class="keyword">null</span> &amp;&amp; cls.getSuperclass() != BaseSearchModel<span class="class">.<span class="keyword">class</span> &amp;&amp; <span class="title">cls</span>.<span class="title">getSuperclass</span>() !</span>= Object<span class="class">.<span class="keyword">class</span>) </span>&#123;</span><br><span class="line">            getAllDictAnnotation(cls.getSuperclass(), fields);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="枚举翻译注解"><a href="#枚举翻译注解" class="headerlink" title="枚举翻译注解"></a>枚举翻译注解</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标识是一个含有数据字典的实体</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年04月28日 12:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> DictEntity &#123;</span><br><span class="line">    DictField[] value();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 标识是一个含有数据字典的实体</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年04月28日 12:30</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="meta">@Repeatable</span>(value = DictEntity<span class="class">.<span class="keyword">class</span>)</span></span><br><span class="line"><span class="class"><span class="title">public</span> @<span class="title">interface</span> <span class="title">DictField</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 要翻译的字段名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">from</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 翻译到哪个字段.默认为from()+Name,可以自定义</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">String <span class="title">to</span><span class="params">()</span> <span class="keyword">default</span> ""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 枚举类</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class&lt;? extends DictEnum&gt; enumClass();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * code类型</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">Class <span class="title">codeType</span><span class="params">()</span> <span class="keyword">default</span> String.class</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 轮子 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> 轮子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/03/16/hello-world/"/>
      <url>/2020/03/16/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
