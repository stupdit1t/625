<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>每天拾柴火</title>
  
  <subtitle>砍柴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kanchai.club/"/>
  <updated>2020-04-21T02:18:30.000Z</updated>
  <id>https://kanchai.club/</id>
  
  <author>
    <name>625</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mysql去重sql</title>
    <link href="https://kanchai.club/2020/04/21/Mysql%E5%8E%BB%E9%87%8Dsql/"/>
    <id>https://kanchai.club/2020/04/21/Mysql%E5%8E%BB%E9%87%8Dsql/</id>
    <published>2020-04-21T05:37:24.474Z</published>
    <updated>2020-04-21T02:18:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>替换变量table_name 和 group_by</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DELETE</span><br><span class="line">FROM</span><br><span class="line">$&#123;table_name&#125;</span><br><span class="line">WHERE ID NOT IN (</span><br><span class="line">SELECT</span><br><span class="line">*</span><br><span class="line">FROM</span><br><span class="line">(</span><br><span class="line">SELECT</span><br><span class="line">Max(ID)</span><br><span class="line">FROM</span><br><span class="line">    $&#123;table_name&#125;</span><br><span class="line">GROUP BY</span><br><span class="line">$&#123;group_by&#125;</span><br><span class="line">bb</span><br><span class="line">    )</span><br><span class="line">)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;替换变量table_name 和 group_by&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span cla
      
    
    </summary>
    
    
    
      <category term="mysql" scheme="https://kanchai.club/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>OpenResty下载与安装(Linux&amp;Windos)</title>
    <link href="https://kanchai.club/2020/04/21/OpenResty%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85(Linux&amp;Windos)/"/>
    <id>https://kanchai.club/2020/04/21/OpenResty%E4%B8%8B%E8%BD%BD%E4%B8%8E%E5%AE%89%E8%A3%85(Linux&amp;Windos)/</id>
    <published>2020-04-21T01:13:42.651Z</published>
    <updated>2020-04-21T01:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="OpenResty下载与安装"><a href="#OpenResty下载与安装" class="headerlink" title="OpenResty下载与安装"></a>OpenResty下载与安装</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h5 id="版本说明"><a href="#版本说明" class="headerlink" title="版本说明"></a>版本说明</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OpenResty&#x3D;1.15.8.2 </span><br><span class="line">linux.centos&#x3D;7</span><br><span class="line">windows&#x3D;10</span><br></pre></td></tr></table></figure><h5 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h5><ul><li>OpenResty 官网:<a href="http://openresty.org/cn/" target="_blank" rel="noopener">http://openresty.org/cn/</a></li><li>OpenResty 下载及安装说明地址：<a href="http://openresty.org/cn/download.html" target="_blank" rel="noopener">http://openresty.org/cn/download.html</a></li></ul><h2 id="Win-10-安装"><a href="#Win-10-安装" class="headerlink" title="Win 10 安装"></a>Win 10 安装</h2><p>解压即安装，双击 nginx.exe 即运行；</p><p>或者进入安装目录，执行 start nginx.exe 即运行；</p><h2 id="Linux-Tar-安装"><a href="#Linux-Tar-安装" class="headerlink" title="Linux Tar 安装"></a>Linux Tar 安装</h2><p>官方源码安装指南：<a href="http://openresty.org/cn/installation.html" target="_blank" rel="noopener">http://openresty.org/cn/installation.html</a></p><h5 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install pcre-devel openssl-devel gcc curl</span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># .&#x2F;configure 默认 --prefix&#x3D;&#x2F;usr&#x2F;local&#x2F;openresty</span><br><span class="line"># .&#x2F;configure --help 查看更多的选项。</span><br><span class="line">.&#x2F;configure</span><br></pre></td></tr></table></figure><h5 id="编译与安装"><a href="#编译与安装" class="headerlink" title="编译与安装"></a>编译与安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 编译</span><br><span class="line">make </span><br><span class="line"># 安装</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 方式一：进入 openresty安装目录&#x2F;bin 目录，执行</span><br><span class="line">.&#x2F;openresty</span><br><span class="line"># 方式二：进入 openresty安装目录&#x2F;nginx&#x2F;sbin 目录，执行</span><br><span class="line">.&#x2F;nginx</span><br></pre></td></tr></table></figure><h2 id="Linux-Yum-安装"><a href="#Linux-Yum-安装" class="headerlink" title="Linux Yum 安装"></a>Linux Yum 安装</h2><h5 id="添加-OpenResty-仓库"><a href="#添加-OpenResty-仓库" class="headerlink" title="添加 OpenResty 仓库"></a>添加 OpenResty 仓库</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br><span class="line">sudo yum-config-manager --add-repo https:&#x2F;&#x2F;openresty.org&#x2F;package&#x2F;centos&#x2F;openresty.repo</span><br></pre></td></tr></table></figure><h5 id="下载与安装"><a href="#下载与安装" class="headerlink" title="下载与安装"></a>下载与安装</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 下载与安装</span><br><span class="line">sudo yum install -y openresty</span><br><span class="line"># 更新</span><br><span class="line">sudo yum check-update</span><br></pre></td></tr></table></figure><p>注：默认安装目录：/usr/local/openresty</p><h5 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 方式一：进入 openresty安装目录&#x2F;bin 目录，执行</span><br><span class="line">.&#x2F;openresty</span><br><span class="line"># 方式二：进入 openresty安装目录&#x2F;&#x2F;nginx&#x2F;sbin 目录，执行</span><br><span class="line">.&#x2F;nginx</span><br></pre></td></tr></table></figure><h5 id="安装-OpenResty-命令工具"><a href="#安装-OpenResty-命令工具" class="headerlink" title="安装 OpenResty 命令工具"></a>安装 OpenResty 命令工具</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y openresty-resty</span><br></pre></td></tr></table></figure><p>命令行工具 opm 在 openresty-opm 包里，而 restydoc 工具在 openresty-doc 包里头</p><h5 id="附录-configure-选项"><a href="#附录-configure-选项" class="headerlink" title="附录-configure 选项"></a>附录-configure 选项</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br></pre></td><td class="code"><pre><span class="line">root@localhost openresty-1.15.8.2]# .&#x2F;configure --help</span><br><span class="line">  --help                             this message</span><br><span class="line"></span><br><span class="line">  --prefix&#x3D;PATH                      set the installation prefix (default to &#x2F;usr&#x2F;local&#x2F;openresty)</span><br><span class="line"></span><br><span class="line">  --with-debug                       enable debug logging</span><br><span class="line">  --with-dtrace-probes               enable dtrace USDT probes</span><br><span class="line">  --with-dtrace&#x3D;PATH                 set dtrace utility pathname</span><br><span class="line"></span><br><span class="line">  --with-no-pool-patch               enable the no-pool patch for debugging memory issues</span><br><span class="line"></span><br><span class="line">  -jN                                pass -jN option to make while building the bundled</span><br><span class="line">                                     Lua 5.1 interpreter or LuaJIT 2.1</span><br><span class="line"></span><br><span class="line">  --without-http_echo_module         disable ngx_http_echo_module</span><br><span class="line">  --without-http_xss_module          disable ngx_http_xss_module</span><br><span class="line">  --without-http_coolkit_module      disable ngx_http_coolkit_module</span><br><span class="line">  --without-http_set_misc_module     disable ngx_http_set_misc_module</span><br><span class="line">  --without-http_form_input_module   disable ngx_http_form_input_module</span><br><span class="line">  --without-http_encrypted_session_module</span><br><span class="line">                                     disable ngx_http_encrypted_session_module</span><br><span class="line">  --without-http_srcache_module      disable ngx_http_srcache_module</span><br><span class="line">  --without-http_lua_module          disable ngx_http_lua_module</span><br><span class="line">  --without-http_lua_upstream_module disable ngx_http_lua_upstream_module</span><br><span class="line">  --without-http_headers_more_module disable ngx_http_headers_more_module</span><br><span class="line">  --without-http_array_var_module    disable ngx_http_array_var_module</span><br><span class="line">  --without-http_memc_module         disable ngx_http_memc_module</span><br><span class="line">  --without-http_redis2_module       disable ngx_http_redis2_module</span><br><span class="line">  --without-http_redis_module        disable ngx_http_redis_module</span><br><span class="line">  --without-http_rds_json_module     disable ngx_http_rds_json_module</span><br><span class="line">  --without-http_rds_csv_module      disable ngx_http_rds_csv_module</span><br><span class="line">  --without-stream_lua_module        disable ngx_stream_lua_module</span><br><span class="line">  --without-ngx_devel_kit_module     disable ngx_devel_kit_module</span><br><span class="line">  --without-http_ssl_module          disable ngx_http_ssl_module</span><br><span class="line">  --without-stream_ssl_module        disable ngx_stream_ssl_module</span><br><span class="line"></span><br><span class="line">  --with-http_iconv_module           enable ngx_http_iconv_module</span><br><span class="line">  --with-http_drizzle_module         enable ngx_http_drizzle_module</span><br><span class="line">  --with-http_postgres_module        enable ngx_http_postgres_module</span><br><span class="line"></span><br><span class="line">  --without-lua_cjson                disable the lua-cjson library</span><br><span class="line">  --without-lua_tablepool            disable the lua-tablepool library (and by consequence, the</span><br><span class="line">                                     lua-resty-shell library)</span><br><span class="line">  --without-lua_redis_parser         disable the lua-redis-parser library</span><br><span class="line">  --without-lua_rds_parser           disable the lua-rds-parser library</span><br><span class="line">  --without-lua_resty_dns            disable the lua-resty-dns library</span><br><span class="line">  --without-lua_resty_memcached      disable the lua-resty-memcached library</span><br><span class="line">  --without-lua_resty_redis          disable the lua-resty-redis library</span><br><span class="line">  --without-lua_resty_mysql          disable the lua-resty-mysql library</span><br><span class="line">  --without-lua_resty_upload         disable the lua-resty-upload library</span><br><span class="line">  --without-lua_resty_upstream_healthcheck</span><br><span class="line">                                     disable the lua-resty-upstream-healthcheck library</span><br><span class="line">  --without-lua_resty_string         disable the lua-resty-string library</span><br><span class="line">  --without-lua_resty_websocket      disable the lua-resty-websocket library</span><br><span class="line">  --without-lua_resty_limit_traffic  disable the lua-resty-limit-traffic library</span><br><span class="line">  --without-lua_resty_lock           disable the lua-resty-lock library</span><br><span class="line">  --without-lua_resty_lrucache       disable the lua-resty-lrucache library</span><br><span class="line">  --without-lua_resty_signal         disable the lua-resty-signal library (and by consequence,</span><br><span class="line">                                     the lua-resty-shell library)</span><br><span class="line">  --without-lua_resty_shell          disable the lua-resty-shell library</span><br><span class="line">  --without-lua_resty_core           disable the lua-resty-core library</span><br><span class="line"></span><br><span class="line">  --with-luajit                      enable and build the bundled LuaJIT 2.1 (the default)</span><br><span class="line">  --with-luajit&#x3D;DIR                  use the external LuaJIT 2.1 installation specified by DIR</span><br><span class="line">  --with-luajit-xcflags&#x3D;FLAGS        Specify extra C compiler flags for LuaJIT 2.1</span><br><span class="line">  --without-luajit-lua52             Turns off the LuaJIT extensions from Lua 5.2 that may break</span><br><span class="line">                                     backward compatibility.</span><br><span class="line">  --without-luajit-gc64              Turns off the LuaJIT GC64 mode (which is enabled by default</span><br><span class="line">                                     on x86_64)</span><br><span class="line"></span><br><span class="line">  --with-libdrizzle&#x3D;DIR              specify the libdrizzle 1.0 (or drizzle) installation prefix</span><br><span class="line">  --with-libpq&#x3D;DIR                   specify the libpq (or postgresql) installation prefix</span><br><span class="line">  --with-pg_config&#x3D;PATH              specify the path of the pg_config utility</span><br><span class="line"></span><br><span class="line">Options directly inherited from nginx</span><br><span class="line"></span><br><span class="line">  --sbin-path&#x3D;PATH                   set nginx binary pathname</span><br><span class="line">  --modules-path&#x3D;PATH                set modules path</span><br><span class="line">  --conf-path&#x3D;PATH                   set nginx.conf pathname</span><br><span class="line">  --error-log-path&#x3D;PATH              set error log pathname</span><br><span class="line">  --pid-path&#x3D;PATH                    set nginx.pid pathname</span><br><span class="line">  --lock-path&#x3D;PATH                   set nginx.lock pathname</span><br><span class="line">  --tapset-prefix&#x3D;PATH               set systemtap tapset directory prefix</span><br><span class="line">  --stap-nginx-path&#x3D;PATH             set stap-nginx pathname</span><br><span class="line"></span><br><span class="line">  --user&#x3D;USER                        set non-privileged user for</span><br><span class="line">                                     worker processes</span><br><span class="line">  --group&#x3D;GROUP                      set non-privileged group for</span><br><span class="line">                                     worker processes</span><br><span class="line"></span><br><span class="line">  --build&#x3D;NAME                       set build name</span><br><span class="line">  --builddir&#x3D;DIR                     set the build directory</span><br><span class="line"></span><br><span class="line">  --with-select_module               enable select module</span><br><span class="line">  --without-select_module            disable select module</span><br><span class="line">  --with-poll_module                 enable poll module</span><br><span class="line">  --without-poll_module              disable poll module</span><br><span class="line"></span><br><span class="line">  --with-threads                     enable thread pool support</span><br><span class="line"></span><br><span class="line">  --with-file-aio                    enable file AIO support</span><br><span class="line">  --with-ipv6                        enable IPv6 support</span><br><span class="line"></span><br><span class="line">  --with-http_v2_module              enable ngx_http_v2_module</span><br><span class="line">  --with-http_realip_module          enable ngx_http_realip_module</span><br><span class="line">  --with-http_addition_module        enable ngx_http_addition_module</span><br><span class="line">  --with-http_xslt_module            enable ngx_http_xslt_module</span><br><span class="line">  --with-http_xslt_module&#x3D;dynamic    enable dynamic ngx_http_xslt_module</span><br><span class="line">  --with-http_image_filter_module    enable ngx_http_image_filter_module</span><br><span class="line">  --with-http_image_filter_module&#x3D;dynamic</span><br><span class="line">                                     enable dynamic ngx_http_image_filter_module</span><br><span class="line">  --with-http_geoip_module           enable ngx_http_geoip_module</span><br><span class="line">  --with-http_geoip_module&#x3D;dynamic   enable dynamic ngx_http_geoip_module</span><br><span class="line">  --with-http_sub_module             enable ngx_http_sub_module</span><br><span class="line">  --with-http_dav_module             enable ngx_http_dav_module</span><br><span class="line">  --with-http_flv_module             enable ngx_http_flv_module</span><br><span class="line">  --with-http_mp4_module             enable ngx_http_mp4_module</span><br><span class="line">  --with-http_gunzip_module          enable ngx_http_gunzip_module</span><br><span class="line">  --with-http_gzip_static_module     enable ngx_http_gzip_static_module</span><br><span class="line">  --with-http_auth_request_module    enable ngx_http_auth_request_module</span><br><span class="line">  --with-http_random_index_module    enable ngx_http_random_index_module</span><br><span class="line">  --with-http_secure_link_module     enable ngx_http_secure_link_module</span><br><span class="line">  --with-http_degradation_module     enable ngx_http_degradation_module</span><br><span class="line">  --with-http_slice_module           enable ngx_http_slice_module</span><br><span class="line">  --with-http_stub_status_module     enable ngx_http_stub_status_module</span><br><span class="line"></span><br><span class="line">  --without-http_charset_module      disable ngx_http_charset_module</span><br><span class="line">  --without-http_gzip_module         disable ngx_http_gzip_module</span><br><span class="line">  --without-http_ssi_module          disable ngx_http_ssi_module</span><br><span class="line">  --without-http_userid_module       disable ngx_http_userid_module</span><br><span class="line">  --without-http_access_module       disable ngx_http_access_module</span><br><span class="line">  --without-http_auth_basic_module   disable ngx_http_auth_basic_module</span><br><span class="line">  --without-http_autoindex_module    disable ngx_http_autoindex_module</span><br><span class="line">  --without-http_geo_module          disable ngx_http_geo_module</span><br><span class="line">  --without-http_map_module          disable ngx_http_map_module</span><br><span class="line">  --without-http_split_clients_module disable ngx_http_split_clients_module</span><br><span class="line">  --without-http_referer_module      disable ngx_http_referer_module</span><br><span class="line">  --without-http_rewrite_module      disable ngx_http_rewrite_module</span><br><span class="line">  --without-http_proxy_module        disable ngx_http_proxy_module</span><br><span class="line">  --without-http_fastcgi_module      disable ngx_http_fastcgi_module</span><br><span class="line">  --without-http_uwsgi_module        disable ngx_http_uwsgi_module</span><br><span class="line">  --without-http_scgi_module         disable ngx_http_scgi_module</span><br><span class="line">  --without-http_memcached_module    disable ngx_http_memcached_module</span><br><span class="line">  --without-http_limit_conn_module   disable ngx_http_limit_conn_module</span><br><span class="line">  --without-http_limit_req_module    disable ngx_http_limit_req_module</span><br><span class="line">  --without-http_empty_gif_module    disable ngx_http_empty_gif_module</span><br><span class="line">  --without-http_browser_module      disable ngx_http_browser_module</span><br><span class="line">  --without-http_upstream_hash_module</span><br><span class="line">                                     disable ngx_http_upstream_hash_module</span><br><span class="line">  --without-http_upstream_ip_hash_module</span><br><span class="line">                                     disable ngx_http_upstream_ip_hash_module</span><br><span class="line">  --without-http_upstream_least_conn_module</span><br><span class="line">                                     disable ngx_http_upstream_least_conn_module</span><br><span class="line">  --without-http_upstream_keepalive_module</span><br><span class="line">                                     disable ngx_http_upstream_keepalive_module</span><br><span class="line"></span><br><span class="line">  --without-http_upstream_zone_module</span><br><span class="line">                                     disable ngx_http_upstream_zone_module</span><br><span class="line">  --with-http_perl_module            enable ngx_http_perl_module</span><br><span class="line">  --with-http_perl_module&#x3D;dynamic    enable dynamic ngx_http_perl_module</span><br><span class="line">  --with-perl_modules_path&#x3D;PATH      set Perl modules path</span><br><span class="line">  --with-perl&#x3D;PATH                   set perl binary pathname</span><br><span class="line"></span><br><span class="line">  --http-log-path&#x3D;PATH               set http access log pathname</span><br><span class="line">  --http-client-body-temp-path&#x3D;PATH  set path to store</span><br><span class="line">                                     http client request body temporary files</span><br><span class="line">  --http-proxy-temp-path&#x3D;PATH        set path to store</span><br><span class="line">                                     http proxy temporary files</span><br><span class="line">  --http-fastcgi-temp-path&#x3D;PATH      set path to store</span><br><span class="line">                                     http fastcgi temporary files</span><br><span class="line">  --http-uwsgi-temp-path&#x3D;PATH        set path to store</span><br><span class="line">                                     http uwsgi temporary files</span><br><span class="line">  --http-scgi-temp-path&#x3D;PATH         set path to store</span><br><span class="line">                                     http scgi temporary files</span><br><span class="line"></span><br><span class="line">  --without-http                     disable HTTP server</span><br><span class="line">  --without-http-cache               disable HTTP cache</span><br><span class="line"></span><br><span class="line">  --with-mail                        enable POP3&#x2F;IMAP4&#x2F;SMTP proxy module</span><br><span class="line">  --with-mail&#x3D;dynamic                enable dynamic POP3&#x2F;IMAP4&#x2F;SMTP proxy module</span><br><span class="line">  --with-mail_ssl_module             enable ngx_mail_ssl_module</span><br><span class="line">  --without-mail_pop3_module         disable ngx_mail_pop3_module</span><br><span class="line">  --without-mail_imap_module         disable ngx_mail_imap_module</span><br><span class="line">  --without-mail_smtp_module         disable ngx_mail_smtp_module</span><br><span class="line"></span><br><span class="line">  --without-stream                   disable TCP&#x2F;UDP proxy module</span><br><span class="line">  --without-stream_ssl_module        disable ngx_stream_ssl_module</span><br><span class="line"></span><br><span class="line">  --with-stream                      enable TCP&#x2F;UDP proxy module (default on)</span><br><span class="line">  --with-stream&#x3D;dynamic              enable dynamic TCP&#x2F;UDP proxy module</span><br><span class="line">  --with-stream_ssl_module           enable ngx_stream_ssl_module (default on)</span><br><span class="line">  --with-stream_realip_module        enable ngx_stream_realip_module</span><br><span class="line">  --with-stream_geoip_module         enable ngx_stream_geoip_module</span><br><span class="line">  --with-stream_geoip_module&#x3D;dynamic enable dynamic ngx_stream_geoip_module</span><br><span class="line">  --with-stream_ssl_preread_module   enable ngx_stream_ssl_preread_module</span><br><span class="line">  --without-stream_limit_conn_module disable ngx_stream_limit_conn_module</span><br><span class="line">  --without-stream_access_module     disable ngx_stream_access_module</span><br><span class="line">  --without-stream_geo_module        disable ngx_stream_geo_module</span><br><span class="line">  --without-stream_map_module        disable ngx_stream_map_module</span><br><span class="line">  --without-stream_split_clients_module</span><br><span class="line">                                     disable ngx_stream_split_clients_module</span><br><span class="line">  --without-stream_return_module     disable ngx_stream_return_module</span><br><span class="line">  --without-stream_upstream_hash_module</span><br><span class="line">                                     disable ngx_stream_upstream_hash_module</span><br><span class="line">  --without-stream_upstream_least_conn_module</span><br><span class="line">                                     disable ngx_stream_upstream_least_conn_module</span><br><span class="line">  --without-stream_upstream_zone_module</span><br><span class="line">                                     disable ngx_stream_upstream_zone_module</span><br><span class="line"></span><br><span class="line">  --with-google_perftools_module     enable ngx_google_perftools_module</span><br><span class="line">  --with-cpp_test_module             enable ngx_cpp_test_module</span><br><span class="line"></span><br><span class="line">  --add-module&#x3D;PATH                  enable external module</span><br><span class="line">  --add-dynamic-module&#x3D;PATH          enable dynamic external module</span><br><span class="line"></span><br><span class="line">  --with-cc&#x3D;PATH                     set C compiler pathname</span><br><span class="line">  --with-cpp&#x3D;PATH                    set C preprocessor pathname</span><br><span class="line">  --with-cc-opt&#x3D;OPTIONS              set additional C compiler options</span><br><span class="line">  --with-ld-opt&#x3D;OPTIONS              set additional linker options</span><br><span class="line">  --with-cpu-opt&#x3D;CPU                 build for the specified CPU, valid values:</span><br><span class="line">                                     pentium, pentiumpro, pentium3, pentium4,</span><br><span class="line">                                     athlon, opteron, sparc32, sparc64, ppc64</span><br><span class="line"></span><br><span class="line">  --without-pcre                     disable PCRE library usage</span><br><span class="line">  --with-pcre                        force PCRE library usage</span><br><span class="line">  --with-pcre&#x3D;DIR                    set path to PCRE library sources</span><br><span class="line">  --with-pcre-opt&#x3D;OPTIONS            set additional make options for PCRE</span><br><span class="line">  --with-pcre-conf-opt&#x3D;OPTIONS       set additional configure options for PCRE</span><br><span class="line">  --with-pcre-jit                    build PCRE with JIT compilation support</span><br><span class="line"></span><br><span class="line">  --with-zlib&#x3D;DIR                    set path to zlib library sources</span><br><span class="line">  --with-zlib-opt&#x3D;OPTIONS            set additional build options for zlib</span><br><span class="line">  --with-zlib-asm&#x3D;CPU                use zlib assembler sources optimized</span><br><span class="line">                                     for the specified CPU, valid values:</span><br><span class="line">                                     pentium, pentiumpro</span><br><span class="line"></span><br><span class="line">  --with-libatomic                   force libatomic_ops library usage</span><br><span class="line">  --with-libatomic&#x3D;DIR               set path to libatomic_ops library sources</span><br><span class="line"></span><br><span class="line">  --with-openssl&#x3D;DIR                 set path to OpenSSL library sources</span><br><span class="line">  --with-openssl-opt&#x3D;OPTIONS         set additional build options for OpenSSL</span><br><span class="line"></span><br><span class="line">  --dry-run                          dry running the configure, for testing only</span><br><span class="line">  --platform&#x3D;PLATFORM                forcibly specify a platform name, for testing only</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「SIMBA1949」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https:&#x2F;&#x2F;blog.csdn.net&#x2F;simba1949&#x2F;java&#x2F;article&#x2F;details&#x2F;103333599</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;OpenResty下载与安装&quot;&gt;&lt;a href=&quot;#OpenResty下载与安装&quot; class=&quot;headerlink&quot; title=&quot;OpenResty下载与安装&quot;&gt;&lt;/a&gt;OpenResty下载与安装&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot;
      
    
    </summary>
    
    
    
      <category term="nginx" scheme="https://kanchai.club/tags/nginx/"/>
    
      <category term="devops" scheme="https://kanchai.club/tags/devops/"/>
    
  </entry>
  
  <entry>
    <title>synchronized与Lock的区别与使用？</title>
    <link href="https://kanchai.club/2020/04/21/synchronized%E4%B8%8ELock%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://kanchai.club/2020/04/21/synchronized%E4%B8%8ELock%E7%9A%84%E5%8C%BA%E5%88%AB%E4%B8%8E%E4%BD%BF%E7%94%A8/</id>
    <published>2020-04-21T01:04:22.356Z</published>
    <updated>2020-04-21T01:03:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="引言："><a href="#引言：" class="headerlink" title="引言："></a>引言：</h2><p>昨天在学习别人分享的面试经验时，看到Lock的使用。想起自己在上次面试也遇到了synchronized与Lock的区别与使用。</p><p>于是，我整理了两者的区别和使用情况，同时，对synchronized的使用过程一些常见问题的总结，最后是参照源码和说明文档，对Lock的使用写了几个简单的Demo。请大家批评指正。</p><h2 id="技术点："><a href="#技术点：" class="headerlink" title="技术点："></a>技术点：</h2><h3 id="1、线程与进程："><a href="#1、线程与进程：" class="headerlink" title="1、线程与进程："></a>1、线程与进程：</h3><p>在开始之前先把进程与线程进行区分一下，一个程序最少需要一个进程，而一个进程最少需要一个线程。关系是线程–&gt;进程–&gt;程序的大致组成结构。所以线程是程序执行流的最小单位，而进程是系统进行资源分配和调度的一个独立单位。以下我们所有讨论的都是建立在线程基础之上。</p><h3 id="2、Thread的几个重要方法："><a href="#2、Thread的几个重要方法：" class="headerlink" title="2、Thread的几个重要方法："></a>2、Thread的几个重要方法：</h3><p>我们先了解一下Thread的几个重要方法。</p><ul><li><p>start()方法，调用该方法开始执行该线程；</p></li><li><p>stop()方法，调用该方法强制结束该线程执行；</p></li><li><p>join方法，调用该方法等待该线程结束。</p></li><li><p>sleep()方法，调用该方法该线程进入等待。</p></li><li><p>run()方法，调用该方法直接执行线程的run()方法，但是线程调用start()方法时也会运行run()方法，区别就是一个是由线程调度运行run()方法，一个是直接调用了线程中的run()方法！！</p></li></ul><p>看到这里，可能有些人就会问啦，那wait()和notify()呢？要注意，其实wait()与notify()方法是Object的方法，不是Thread的方法！！同时，wait()与notify()会配合使用，分别表示线程挂起和线程恢复。</p><p>这里还有一个很常见的问题，顺带提一下：wait()与sleep()的区别，简单来说wait()会释放对象锁而sleep()不会释放对象锁。这些问题有很多的资料，不再赘述。</p><h3 id="3、线程状态："><a href="#3、线程状态：" class="headerlink" title="3、线程状态："></a>3、线程状态：</h3><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java8-1586835150.png" alt="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用" title="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用"></p><p>线程总共有5大状态，通过上面第二个知识点的介绍，理解起来就简单了。  </p><ul><li><p>新建状态：新建线程对象，并没有调用start()方法之前</p></li><li><p>就绪状态：调用start()方法之后线程就进入就绪状态，但是并不是说只要调用start()方法线程就马上变为当前线程，在变为当前线程之前都是为就绪状态。值得一提的是，线程在睡眠和挂起中恢复的时候也会进入就绪状态哦。</p></li><li><p>运行状态：线程被设置为当前线程，开始执行run()方法。就是线程进入运行状态</p></li><li><p>阻塞状态：线程被暂停，比如说调用sleep()方法后线程就进入阻塞状态</p></li><li><p>死亡状态：线程执行结束</p></li></ul><h3 id="4、锁类型"><a href="#4、锁类型" class="headerlink" title="4、锁类型"></a>4、锁类型</h3><ul><li><p>可重入锁：在执行对象中所有同步方法不用再次获得锁</p></li><li><p>可中断锁：在等待获取锁过程中可中断</p></li><li><p>公平锁：按等待获取锁的线程的等待时间进行获取，等待时间长的具有优先获取锁权利</p></li><li><p>读写锁：对资源读取和写入的时候拆分为2部分处理，读的时候可以多线程一起读，写的时候必须同步地写</p></li></ul><h2 id="synchronized与Lock的区别"><a href="#synchronized与Lock的区别" class="headerlink" title="synchronized与Lock的区别"></a>synchronized与Lock的区别</h2><p>1、我把两者的区别分类到了一个表中，方便大家对比：</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java3-1586835150.png" alt="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用" title="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用"></p><p>或许，看到这里还对LOCK所知甚少，那么接下来，我们进入LOCK的深入学习。</p><h2 id="Lock详细介绍与Demo"><a href="#Lock详细介绍与Demo" class="headerlink" title="Lock详细介绍与Demo"></a>Lock详细介绍与Demo</h2><p>以下是Lock接口的源码，笔者修剪之后的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Lock</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Acquires the lock.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Acquires the lock unless the current thread is</span></span><br><span class="line"><span class="comment">     * &#123;<span class="doctag">@linkplain</span> Thread#interrupt interrupted&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lockInterruptibly</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Acquires the lock only if it is free at the time of invocation.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Acquires the lock if it is free within the given waiting time and the</span></span><br><span class="line"><span class="comment">     * current thread has not been &#123;<span class="doctag">@linkplain</span> Thread#interrupt interrupted&#125;.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">tryLock</span><span class="params">(<span class="keyword">long</span> time, TimeUnit unit)</span> <span class="keyword">throws</span> InterruptedException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Releases the lock.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">unlock</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从Lock接口中我们可以看到主要有个方法，这些方法的功能从注释中可以看出：</p><ul><li><p>lock()：获取锁，如果锁被暂用则一直等待</p></li><li><p>unlock()：释放锁</p></li><li><p>tryLock(): 注意返回类型是boolean，如果获取锁的时候锁被占用就返回false，否则返回true</p></li><li><p>tryLock(long time, TimeUnit unit)：比起tryLock()就是给了一个时间期限，保证等待参数时间</p></li><li><p>lockInterruptibly()：用该锁的获得方式，如果线程在获取锁的阶段进入了等待，那么可以中断此线程，先去做别的事</p></li></ul><p>通过 以上的解释，大致可以解释在上个部分中“锁类型(lockInterruptibly())”，“锁状态(tryLock())”等问题，还有就是前面子所获取的过程我所写的“大致就是可以尝试获得锁，线程可以不会一直等待”用了“可以”的原因。</p><p>下面是Lock一般使用的例子，注意ReentrantLock是Lock接口的实现。</p><h4 id="lock-："><a href="#lock-：" class="headerlink" title="lock()："></a>lock()：</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.brickworkers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要参与同步的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Thread thread)</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"线程名"</span>+thread.getName() + <span class="string">"获得了锁"</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"线程名"</span>+thread.getName() + <span class="string">"释放了锁"</span>);</span><br><span class="line">            lock.unlock();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LockTest lockTest = <span class="keyword">new</span> LockTest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程1</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                lockTest.method(Thread.currentThread());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                lockTest.method(Thread.currentThread());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行情况：线程名t1获得了锁</span></span><br><span class="line"><span class="comment">//         线程名t1释放了锁</span></span><br><span class="line"><span class="comment">//         线程名t2获得了锁</span></span><br><span class="line"><span class="comment">//         线程名t2释放了锁</span></span><br></pre></td></tr></table></figure><h4 id="tryLock"><a href="#tryLock" class="headerlink" title="tryLock():"></a>tryLock():</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.brickworkers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.Lock;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.locks.ReentrantLock;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LockTest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Lock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//需要参与同步的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Thread thread)</span></span>&#123;</span><br><span class="line"><span class="comment">/*        lock.lock();</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            System.out.println("线程名"+thread.getName() + "获得了锁");</span></span><br><span class="line"><span class="comment">        &#125;catch(Exception e)&#123;</span></span><br><span class="line"><span class="comment">            e.printStackTrace();</span></span><br><span class="line"><span class="comment">        &#125; finally &#123;</span></span><br><span class="line"><span class="comment">            System.out.println("线程名"+thread.getName() + "释放了锁");</span></span><br><span class="line"><span class="comment">            lock.unlock();</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(lock.tryLock())&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"线程名"</span>+thread.getName() + <span class="string">"获得了锁"</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"线程名"</span>+thread.getName() + <span class="string">"释放了锁"</span>);</span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"我是"</span>+Thread.currentThread().getName()+<span class="string">"有人占着锁，我就不要啦"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LockTest lockTest = <span class="keyword">new</span> LockTest();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//线程1</span></span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                lockTest.method(Thread.currentThread());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t1"</span>);</span><br><span class="line"></span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                lockTest.method(Thread.currentThread());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">"t2"</span>);</span><br><span class="line"></span><br><span class="line">        t1.start();</span><br><span class="line">        t2.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行结果： 线程名t2获得了锁</span></span><br><span class="line"><span class="comment">//         我是t1有人占着锁，我就不要啦</span></span><br><span class="line"><span class="comment">//         线程名t2释放了锁</span></span><br></pre></td></tr></table></figure><p>看到这里相信大家也都会使用如何使用Lock了吧，关于tryLock(long time, TimeUnit unit)和lockInterruptibly()不再赘述。前者主要存在一个等待时间，在测试代码中写入一个等待时间，后者主要是等待中断，会抛出一个中断异常，常用度不高，喜欢探究可以自己深入研究。</p><p>前面比较重提到“公平锁”，在这里可以提一下ReentrantLock对于平衡锁的定义，在源码中有这么两段：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Sync object for non-fair locks</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">NonfairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">7316153563782823691L</span>;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Performs lock.  Try immediate barge, backing up to normal</span></span><br><span class="line"><span class="comment">        * acquire on failure.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           <span class="keyword">if</span> (compareAndSetState(<span class="number">0</span>, <span class="number">1</span>))</span><br><span class="line">               setExclusiveOwnerThread(Thread.currentThread());</span><br><span class="line">           <span class="keyword">else</span></span><br><span class="line">               acquire(<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> nonfairTryAcquire(acquires);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * Sync object for fair locks</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="keyword">static</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">FairSync</span> <span class="keyword">extends</span> <span class="title">Sync</span> </span>&#123;</span><br><span class="line">       <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">3000897897090466540L</span>;</span><br><span class="line"></span><br><span class="line">       <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">lock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">           acquire(<span class="number">1</span>);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="comment">/**</span></span><br><span class="line"><span class="comment">        * Fair version of tryAcquire.  Don't grant access unless</span></span><br><span class="line"><span class="comment">        * recursive call or no waiters or is first.</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">       <span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">boolean</span> <span class="title">tryAcquire</span><span class="params">(<span class="keyword">int</span> acquires)</span> </span>&#123;</span><br><span class="line">           <span class="keyword">final</span> Thread current = Thread.currentThread();</span><br><span class="line">           <span class="keyword">int</span> c = getState();</span><br><span class="line">           <span class="keyword">if</span> (c == <span class="number">0</span>) &#123;</span><br><span class="line">               <span class="keyword">if</span> (!hasQueuedPredecessors() &amp;&amp;</span><br><span class="line">                   compareAndSetState(<span class="number">0</span>, acquires)) &#123;</span><br><span class="line">                   setExclusiveOwnerThread(current);</span><br><span class="line">                   <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">               &#125;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span> (current == getExclusiveOwnerThread()) &#123;</span><br><span class="line">               <span class="keyword">int</span> nextc = c + acquires;</span><br><span class="line">               <span class="keyword">if</span> (nextc &lt; <span class="number">0</span>)</span><br><span class="line">                   <span class="keyword">throw</span> <span class="keyword">new</span> Error(<span class="string">"Maximum lock count exceeded"</span>);</span><br><span class="line">               setState(nextc);</span><br><span class="line">               <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>从以上源码可以看出在Lock中可以自己控制锁是否公平，而且，默认的是非公平锁，以下是ReentrantLock的构造函数：</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ReentrantLock</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     sync = <span class="keyword">new</span> NonfairSync();<span class="comment">//默认非公平锁</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h2 id="尾记录："><a href="#尾记录：" class="headerlink" title="尾记录："></a>尾记录：</h2><p>笔者水平一般，不过此博客在引言中的目的已全部达到。这只是笔者在学习过程中的总结与概括，如存在不正确的，欢迎大家批评指出。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="1、两种锁的底层实现方式："><a href="#1、两种锁的底层实现方式：" class="headerlink" title="1、两种锁的底层实现方式："></a>1、两种锁的底层实现方式：</h3><p>synchronized：我们知道java是用字节码指令来控制程序（这里不包括热点代码编译成机器码）。在字节指令中，存在有synchronized所包含的代码块，那么会形成2段流程的执行。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java6-1586835150.png" alt="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用" title="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用"></p><p>我们点击查看SyncDemo.java的源码SyncDemo.class，可以看到如下：</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java5-1586835150.png" alt="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用" title="【72期】面试官：对并发熟悉吗？说一下synchronized与Lock的区别与使用"></p><p>如上就是这段代码段字节码指令，没你想的那么难吧。言归正传，我们可以清晰段看到，其实synchronized映射成字节码指令就是增加来两个指令：monitorenter和monitorexit。当一条线程进行执行的遇到monitorenter指令的时候，它会去尝试获得锁，如果获得锁那么锁计数+1（为什么会加一呢，因为它是一个可重入锁，所以需要用这个锁计数判断锁的情况），如果没有获得锁，那么阻塞。当它遇到monitorexit的时候，锁计数器-1，当计数器为0，那么就释放锁。</p><p>那么有的朋友看到这里就疑惑了，那图上有2个monitorexit呀？马上回答这个问题：上面我以前写的文章也有表述过，synchronized锁释放有两种机制，一种就是执行完释放；另外一种就是发送异常，虚拟机释放。图中第二个monitorexit就是发生异常时执行的流程，这就是我开头说的“会有2个流程存在“。而且，从图中我们也可以看到在第13行，有一个goto指令，也就是说如果正常运行结束会跳转到19行执行。</p><p>这下，你对synchronized是不是了解的很清晰了呢。接下来我们再聊一聊Lock。</p><p>Lock：Lock实现和synchronized不一样，后者是一种悲观锁，它胆子很小，它很怕有人和它抢吃的，所以它每次吃东西前都把自己关起来。而Lock呢底层其实是CAS乐观锁的体现，它无所谓，别人抢了它吃的，它重新去拿吃的就好啦，所以它很乐观。具体底层怎么实现，博主不在细述，有机会的话，我会对concurrent包下面的机制好好和大家说说，如果面试问起，你就说底层主要靠volatile和CAS操作实现的。</p><p>现在，才是我真正想在这篇博文后面加的，我要说的是：尽可能去使用synchronized而不要去使用LOCK</p><p>什么概念呢？我和大家打个比方：你叫jdk，你生了一个孩子叫synchronized，后来呢，你领养了一个孩子叫LOCK。起初，LOCK刚来到新家的时候，它很乖，很懂事，各个方面都表现的比synchronized好。你很开心，但是你内心深处又有一点淡淡的忧伤，你不希望你自己亲生的孩子竟然还不如一个领养的孩子乖巧。这个时候，你对亲生的孩子教育更加深刻了，你想证明，你的亲生孩子synchronized并不会比领养的孩子LOCK差。（博主只是打个比方）</p><h3 id="那如何教育呢？"><a href="#那如何教育呢？" class="headerlink" title="那如何教育呢？"></a>那如何教育呢？</h3><p>在jdk1.6~jdk1.7的时候，也就是synchronized16、7岁的时候，你作为爸爸，你给他优化了，具体优化在哪里呢：</p><h3 id="1、线程自旋和适应性自旋"><a href="#1、线程自旋和适应性自旋" class="headerlink" title="1、线程自旋和适应性自旋"></a>1、线程自旋和适应性自旋</h3><p>我们知道，java’线程其实是映射在内核之上的，线程的挂起和恢复会极大的影响开销。并且jdk官方人员发现，很多线程在等待锁的时候，在很短的一段时间就获得了锁，所以它们在线程等待的时候，并不需要把线程挂起，而是让他无目的的循环，一般设置10次。这样就避免了线程切换的开销，极大的提升了性能。</p><p>而适应性自旋，是赋予了自旋一种学习能力，它并不固定自旋10次一下。他可以根据它前面线程的自旋情况，从而调整它的自旋，甚至是不经过自旋而直接挂起。</p><h3 id="2、锁消除"><a href="#2、锁消除" class="headerlink" title="2、锁消除"></a>2、锁消除</h3><p>什么叫锁消除呢？就是把不必要的同步在编译阶段进行移除。</p><p>那么有的小伙伴又迷糊了，我自己写的代码我会不知道这里要不要加锁？我加了锁就是表示这边会有同步呀？</p><p>并不是这样，这里所说的锁消除并不一定指代是你写的代码的锁消除，我打一个比方：</p><p>在jdk1.5以前，我们的String字符串拼接操作其实底层是StringBuffer来实现的（这个大家可以用我前面介绍的方法，写一个简单的demo，然后查看class文件中的字节码指令就清楚了），而在jdk1.5之后，那么是用StringBuilder来拼接的。我们考虑前面的情况，比如如下代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">String str1=<span class="string">"qwe"</span>;</span><br><span class="line">String str2=<span class="string">"asd"</span>;</span><br><span class="line">String str3=str1+str2;</span><br></pre></td></tr></table></figure><p>底层实现会变成这样：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">sb.append(<span class="string">"qwe"</span>);</span><br><span class="line">sb.append(<span class="string">"asd"</span>);</span><br></pre></td></tr></table></figure><p>我们知道，StringBuffer是一个线程安全的类，也就是说两个append方法都会同步，通过指针逃逸分析（就是变量不会外泄），我们发现在这段代码并不存在线程安全问题，这个时候就会把这个同步锁消除。</p><h3 id="3、锁粗化"><a href="#3、锁粗化" class="headerlink" title="3、锁粗化"></a>3、锁粗化</h3><p>在用synchronized的时候，我们都讲究为了避免大开销，尽量同步代码块要小。那么为什么还要加粗呢？</p><p>我们继续以上面的字符串拼接为例，我们知道在这一段代码中，每一个append都需要同步一次，那么我可以把锁粗化到第一个append和最后一个append（这里不要去纠结前面的锁消除，我只是打个比方）</p><h3 id="4、轻量级锁"><a href="#4、轻量级锁" class="headerlink" title="4、轻量级锁"></a>4、轻量级锁</h3><h3 id="5、偏向锁"><a href="#5、偏向锁" class="headerlink" title="5、偏向锁"></a>5、偏向锁</h3><p>关于最后这两种，我希望留个有缘的读者自己去查找，我不希望我把一件事情描述的那么详细，自己动手得到才是你自己的，博主可以告诉你的是，最后两种并不难。。加油吧，各位。</p><p><em>来源：<a href="https://blog.csdn.net/u012403290/" target="_blank" rel="noopener">https://blog.csdn.net/u012403290/</a></em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;引言：&quot;&gt;&lt;a href=&quot;#引言：&quot; class=&quot;headerlink&quot; title=&quot;引言：&quot;&gt;&lt;/a&gt;引言：&lt;/h2&gt;&lt;p&gt;昨天在学习别人分享的面试经验时，看到Lock的使用。想起自己在上次面试也遇到了synchronized与Lock的区别与使用。&lt;/p
      
    
    </summary>
    
    
    
      <category term="JAVA并发" scheme="https://kanchai.club/tags/JAVA%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>API接口设计该如何设计？如何保证安全？</title>
    <link href="https://kanchai.club/2020/04/20/API%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E8%AF%A5%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%EF%BC%9F%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%AE%89%E5%85%A8%EF%BC%9F/"/>
    <id>https://kanchai.club/2020/04/20/API%E6%8E%A5%E5%8F%A3%E8%AE%BE%E8%AE%A1%E8%AF%A5%E5%A6%82%E4%BD%95%E8%AE%BE%E8%AE%A1%EF%BC%9F%E5%A6%82%E4%BD%95%E4%BF%9D%E8%AF%81%E5%AE%89%E5%85%A8%EF%BC%9F/</id>
    <published>2020-04-20T10:01:29.424Z</published>
    <updated>2020-04-20T10:00:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>在实际的业务中，难免会跟第三方系统进行数据的交互与传递，那么如何保证数据在传输过程中的安全呢（防窃取）？除了https的协议之外，能不能加上通用的一套算法以及规范来保证传输的安全性呢？  </p><p>下面我们就来讨论下常用的一些API设计的安全方法，可能不一定是最好的，有更牛逼的实现方式，但是这篇是我自己的经验分享.<br><strong>一、token 简介</strong><br>Token：访问令牌access token, 用于接口中, 用于标识接口调用者的身份、凭证，减少用户名和密码的传输次数。一般情况下客户端(接口调用方)需要先向服务器端申请一个接口调用的账号，服务器会给出一个appId和一个key, key用于参数签名使用，注意key保存到客户端，需要做一些安全处理，防止泄露。<br>Token的值一般是UUID，服务端生成Token后需要将token做为key，将一些和token关联的信息作为value保存到缓存服务器中(redis)，当一个请求过来后，服务器就去缓存服务器中查询这个Token是否存在，存在则调用接口，不存在返回接口错误，一般通过拦截器或者过滤器来实现，Token分为两种：  </p><ul><li><p>API Token(接口令牌): 用于访问不需要用户登录的接口，如登录、注册、一些基本数据的获取等。获取接口令牌需要拿appId、timestamp和sign来换，sign=加密(timestamp+key)</p></li><li><p>USER Token(用户令牌): 用于访问需要用户登录之后的接口，如：获取我的基本信息、保存、修改、删除等操作。获取用户令牌需要拿用户名和密码来换</p></li></ul><p>关于Token的时效性：token可以是一次性的、也可以在一段时间范围内是有效的，具体使用哪种看业务需要。<br>一般情况下接口最好使用https协议，如果使用http协议，Token机制只是一种减少被黑的可能性，其实只能防君子不能防小人。<br>一般token、timestamp和sign 三个参数会在接口中会同时作为参数传递，每个参数都有各自的用途。</p><p><strong>二、timestamp 简介</strong><br>timestamp: 时间戳，是客户端调用接口时对应的当前时间戳，时间戳用于防止DoS攻击。当黑客劫持了请求的url去DoS攻击，每次调用接口时接口都会判断服务器当前系统时间和接口中传的的timestamp的差值，如果这个差值超过某个设置的时间(假如5分钟)，那么这个请求将被拦截掉，如果在设置的超时时间范围内，是不能阻止DoS攻击的。timestamp机制只能减轻DoS攻击的时间，缩短攻击时间。如果黑客修改了时间戳的值可通过sign签名机制来处理。<br>DoS<br>DoS是Denial of Service的简称，即拒绝服务，造成DoS的攻击行为被称为DoS攻击，其目的是使计算机或网络无法提供正常的服务。最常见的DoS攻击有计算机网络带宽攻击和连通性攻击。<br>DoS攻击是指故意的攻击网络协议实现的缺陷或直接通过野蛮手段残忍地耗尽被攻击对象的资源，目的是让目标计算机或网络无法提供正常的服务或资源访问，使目标系统服务系统停止响应甚至崩溃，而在此攻击中并不包括侵入目标服务器或目标网络设备。这些服务资源包括网络带宽，文件系统空间容量，开放的进程或者允许的连接。这种攻击会导致资源的匮乏，无论计算机的处理速度多快、内存容量多大、网络带宽的速度多快都无法避免这种攻击带来的后果。  </p><ul><li><p>Pingflood: 该攻击在短时间内向目的主机发送大量ping包，造成网络堵塞或主机资源耗尽。  </p></li><li><p>Synflood: 该攻击以多个随机的源主机地址向目的主机发送SYN包，而在收到目的主机的SYN ACK后并不回应，这样，目的主机就为这些源主机建立了大量的连接队列，而且由于没有收到ACK一直维护着这些队列，造成了资源的大量消耗而不能向正常请求提供服务。  </p></li><li><p>Smurf：该攻击向一个子网的广播地址发一个带有特定请求（如ICMP回应请求）的包，并且将源地址伪装成想要攻击的主机地址。子网上所有主机都回应广播包请求而向被攻击主机发包，使该主机受到攻击。  </p></li><li><p>Land-based：攻击者将一个包的源地址和目的地址都设置为目标主机的地址，然后将该包通过IP欺骗的方式发送给被攻击主机，这种包可以造成被攻击主机因试图与自己建立连接而陷入死循环，从而很大程度地降低了系统性能。  </p></li><li><p>Ping of Death：根据TCP/IP的规范，一个包的长度最大为65536字节。尽管一个包的长度不能超过65536字节，但是一个包分成的多个片段的叠加却能做到。当一个主机收到了长度大于65536字节的包时，就是受到了Ping of Death攻击，该攻击会造成主机的宕机。  </p></li><li><p>Teardrop：IP数据包在网络传递时，数据包可以分成更小的片段。攻击者可以通过发送两段（或者更多）数据包来实现TearDrop攻击。第一个包的偏移量为0，长度为N，第二个包的偏移量小于N。为了合并这些数据段，TCP/IP堆栈会分配超乎寻常的巨大资源，从而造成系统资源的缺乏甚至机器的重新启动。  </p></li><li><p>PingSweep：使用ICMP Echo轮询多个主机。</p></li></ul><p><strong>三、sign 简介</strong><br>nonce：随机值，是客户端随机生成的值，作为参数传递过来，随机值的目的是增加sign签名的多变性。随机值一般是数字和字母的组合，6位长度，随机值的组成和长度没有固定规则。<br>sign: 一般用于参数签名，防止参数被非法篡改，最常见的是修改金额等重要敏感参数， sign的值一般是将所有非空参数按照升续排序然后+token+key+timestamp+nonce(随机数)拼接在一起，然后使用某种加密算法进行加密，作为接口中的一个参数sign来传递，也可以将sign放到请求头中。接口在网络传输过程中如果被黑客挟持，并修改其中的参数值，然后再继续调用接口，虽然参数的值被修改了，但是因为黑客不知道sign是如何计算出来的，不知道sign都有哪些值构成，不知道以怎样的顺序拼接在一起的，最重要的是不知道签名字符串中的key是什么，所以黑客可以篡改参数的值，但没法修改sign的值，当服务器调用接口前会按照sign的规则重新计算出sign的值然后和接口传递的sign参数的值做比较，如果相等表示参数值没有被篡改，如果不等，表示参数被非法篡改了，就不执行接口了。<br><strong>四、防止重复提交</strong>  </p><p>对于一些重要的操作需要防止客户端重复提交的(如非幂等性重要操作)，具体办法是当请求第一次提交时将sign作为key保存到redis，并设置超时时间，超时时间和Timestamp中设置的差值相同。当同一个请求第二次访问时会先检测redis是否存在该sign，如果存在则证明重复提交了，接口就不再继续调用了。如果sign在缓存服务器中因过期时间到了，而被删除了，此时当这个url再次请求服务器时，因token的过期时间和sign的过期时间一直，sign过期也意味着token过期，那样同样的url再访问服务器会因token错误会被拦截掉，这就是为什么sign和token的过期时间要保持一致的原因。拒绝重复调用机制确保URL被别人截获了也无法使用（如抓取数据）。<br>对于哪些接口需要防止重复提交可以自定义个注解来标记。<br>注意：所有的安全措施都用上的话有时候难免太过复杂，在实际项目中需要根据自身情况作出裁剪，比如可以只使用签名机制就可以保证信息不会被篡改，或者定向提供服务的时候只用Token机制就可以了。如何裁剪，全看项目实际情况和对接口安全性的要求。<br><strong>五、使用流程</strong><br>1.接口调用方(客户端)向接口提供方(服务器)申请接口调用账号，申请成功后，接口提供方会给接口调用方一个appId和一个key参数<br>2.客户端携带参数appId、timestamp、sign去调用服务器端的API token，其中sign=加密(appId + timestamp + key)<br>3.客户端拿着api_token 去访问不需要登录就能访问的接口<br>4.当访问用户需要登录的接口时，客户端跳转到登录页面，通过用户名和密码调用登录接口，登录接口会返回一个usertoken, 客户端拿着usertoken 去访问需要登录才能访问的接口<br>sign的作用是防止参数被篡改，客户端调用服务端时需要传递sign参数，服务器响应客户端时也可以返回一个sign用于客户度校验返回的值是否被非法篡改了。客户端传的sign和服务器端响应的sign算法可能会不同。</p><p><strong>六、示例代码</strong><br>1. dependency  </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2. RedisConfiguration  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> RedisConfiguration &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JedisConnectionFactory jedisConnectionFactory()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JedisConnectionFactory();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持存储对象</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; redisTemplate()&#123;</span><br><span class="line">        RedisTemplate&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; redisTemplate = <span class="keyword">new</span> StringRedisTemplate();</span><br><span class="line">        redisTemplate.setConnectionFactory(jedisConnectionFactory());</span><br><span class="line">        Jackson2JsonRedisSerializer jackson2JsonRedisSerializer = <span class="keyword">new</span> Jackson2JsonRedisSerializer(<span class="built_in">Object</span>.class);</span><br><span class="line">        ObjectMapper objectMapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line">        objectMapper.setVisibility(PropertyAccessor.ALL, JsonAutoDetect.Visibility.ANY);</span><br><span class="line">        objectMapper.enableDefaultTyping(ObjectMapper.DefaultTyping.NON_FINAL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        jackson2JsonRedisSerializer.setObjectMapper(objectMapper);</span><br><span class="line">        redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);</span><br><span class="line">        redisTemplate.afterPropertiesSet();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3. TokenController  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/token"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> TokenController &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * API Token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * @param sign</span></span><br><span class="line"><span class="comment">     * @return</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"/api_token"</span>)</span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;AccessToken&gt; apiToken(<span class="built_in">String</span> appId, <span class="meta">@RequestHeader</span>(<span class="string">"timestamp"</span>) <span class="built_in">String</span> timestamp, <span class="meta">@RequestHeader</span>(<span class="string">"sign"</span>) <span class="built_in">String</span> sign) &#123;</span><br><span class="line">        Assert.isTrue(!StringUtils.isEmpty(appId) &amp;&amp; !StringUtils.isEmpty(timestamp) &amp;&amp; !StringUtils.isEmpty(sign), <span class="string">"参数错误"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        long reqeustInterval = System.currentTimeMillis() - Long.valueOf(timestamp);</span><br><span class="line">        Assert.isTrue(reqeustInterval &lt; <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>, <span class="string">"请求过期，请重新请求"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 1. 根据appId查询数据库获取appSecret</span></span><br><span class="line">        AppInfo appInfo = <span class="keyword">new</span> AppInfo(<span class="string">"1"</span>, <span class="string">"12345678954556"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 校验签名</span></span><br><span class="line">        <span class="built_in">String</span> signString = timestamp + appId + appInfo.getKey();</span><br><span class="line">        <span class="built_in">String</span> signature = MD5Util.encode(signString);</span><br><span class="line">        log.info(signature);</span><br><span class="line">        Assert.isTrue(signature.equals(sign), <span class="string">"签名错误"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 如果正确生成一个token保存到redis中，如果错误返回错误信息</span></span><br><span class="line">        AccessToken accessToken = <span class="keyword">this</span>.saveToken(<span class="number">0</span>, appInfo, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> ApiResponse.success(accessToken);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotRepeatSubmit</span>(<span class="number">5000</span>)</span><br><span class="line">    <span class="meta">@PostMapping</span>(<span class="string">"user_token"</span>)</span><br><span class="line">    <span class="keyword">public</span> ApiResponse&lt;UserInfo&gt; userToken(<span class="built_in">String</span> username, <span class="built_in">String</span> password) &#123;</span><br><span class="line">        <span class="comment">// 根据用户名查询密码, 并比较密码(密码可以RSA加密一下)</span></span><br><span class="line">        UserInfo userInfo = <span class="keyword">new</span> UserInfo(username, <span class="string">"81255cb0dca1a5f304328a70ac85dcbd"</span>, <span class="string">"111111"</span>);</span><br><span class="line">        <span class="built_in">String</span> pwd = password + userInfo.getSalt();</span><br><span class="line">        <span class="built_in">String</span> passwordMD5 = MD5Util.encode(pwd);</span><br><span class="line">        Assert.isTrue(passwordMD5.equals(userInfo.getPassword()), <span class="string">"密码错误"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 保存Token</span></span><br><span class="line">        AppInfo appInfo = <span class="keyword">new</span> AppInfo(<span class="string">"1"</span>, <span class="string">"12345678954556"</span>);</span><br><span class="line">        AccessToken accessToken = <span class="keyword">this</span>.saveToken(<span class="number">1</span>, appInfo, userInfo);</span><br><span class="line">        userInfo.setAccessToken(accessToken);</span><br><span class="line">        <span class="keyword">return</span> ApiResponse.success(userInfo);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccessToken saveToken(int tokenType, AppInfo appInfo,  UserInfo userInfo) &#123;</span><br><span class="line">        <span class="built_in">String</span> token = UUID.randomUUID().toString();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// token有效期为2小时</span></span><br><span class="line">        Calendar calendar = Calendar.getInstance();</span><br><span class="line">        calendar.setTime(<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">        calendar.add(Calendar.SECOND, <span class="number">7200</span>);</span><br><span class="line">        <span class="built_in">Date</span> expireTime = calendar.getTime();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 保存token</span></span><br><span class="line">        ValueOperations&lt;<span class="built_in">String</span>, TokenInfo&gt; operations = redisTemplate.opsForValue();</span><br><span class="line">        TokenInfo tokenInfo = <span class="keyword">new</span> TokenInfo();</span><br><span class="line">        tokenInfo.setTokenType(tokenType);</span><br><span class="line">        tokenInfo.setAppInfo(appInfo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tokenType == <span class="number">1</span>) &#123;</span><br><span class="line">            tokenInfo.setUserInfo(userInfo);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        operations.set(token, tokenInfo, <span class="number">7200</span>, TimeUnit.SECONDS);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        AccessToken accessToken = <span class="keyword">new</span> AccessToken(token, expireTime);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> accessToken;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="built_in">void</span> main(<span class="built_in">String</span>[] args) &#123;</span><br><span class="line">        long timestamp = System.currentTimeMillis();</span><br><span class="line">        System.out.println(timestamp);</span><br><span class="line">        <span class="built_in">String</span> signString = timestamp + <span class="string">"1"</span> + <span class="string">"12345678954556"</span>;</span><br><span class="line">        <span class="built_in">String</span> sign = MD5Util.encode(signString);</span><br><span class="line">        System.out.println(sign);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line">        signString = <span class="string">"password=123456&amp;username=1&amp;12345678954556"</span> + <span class="string">"ff03e64b-427b-45a7-b78b-47d9e8597d3b1529815393153sdfsdfsfs"</span> + timestamp + <span class="string">"A1scr6"</span>;</span><br><span class="line">        sign = MD5Util.encode(signString);</span><br><span class="line">        System.out.println(sign);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4. WebMvcConfiguration  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMvcConfiguration</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurationSupport</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String[] excludePathPatterns  = &#123;<span class="string">"/api/token/api_token"</span>&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenInterceptor tokenInterceptor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.addInterceptors(registry);</span><br><span class="line">        registry.addInterceptor(tokenInterceptor)</span><br><span class="line">                .addPathPatterns(<span class="string">"/api/**"</span>)</span><br><span class="line">                .excludePathPatterns(excludePathPatterns);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">5</span>. TokenInterceptor</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TokenInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> request</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> response</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> handler 访问的目标方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String token = request.getHeader(<span class="string">"token"</span>);</span><br><span class="line">        String timestamp = request.getHeader(<span class="string">"timestamp"</span>);</span><br><span class="line">        <span class="comment">// 随机字符串</span></span><br><span class="line">        String nonce = request.getHeader(<span class="string">"nonce"</span>);</span><br><span class="line">        String sign = request.getHeader(<span class="string">"sign"</span>);</span><br><span class="line">        Assert.isTrue(!StringUtils.isEmpty(token) &amp;&amp; !StringUtils.isEmpty(timestamp) &amp;&amp; !StringUtils.isEmpty(sign), <span class="string">"参数错误"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 获取超时时间</span></span><br><span class="line">        NotRepeatSubmit notRepeatSubmit = ApiUtil.getNotRepeatSubmit(handler);</span><br><span class="line">        <span class="keyword">long</span> expireTime = notRepeatSubmit == <span class="keyword">null</span> ? <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span> : notRepeatSubmit.value();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. 请求时间间隔</span></span><br><span class="line">        <span class="keyword">long</span> reqeustInterval = System.currentTimeMillis() - Long.valueOf(timestamp);</span><br><span class="line">        Assert.isTrue(reqeustInterval &lt; expireTime, <span class="string">"请求超时，请重新请求"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. 校验Token是否存在</span></span><br><span class="line">        ValueOperations&lt;String, TokenInfo&gt; tokenRedis = redisTemplate.opsForValue();</span><br><span class="line">        TokenInfo tokenInfo = tokenRedis.get(token);</span><br><span class="line">        Assert.notNull(tokenInfo, <span class="string">"token错误"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4. 校验签名(将所有的参数加进来，防止别人篡改参数) 所有参数看参数名升续排序拼接成url</span></span><br><span class="line">        <span class="comment">// 请求参数 + token + timestamp + nonce</span></span><br><span class="line">        String signString = ApiUtil.concatSignString(request) + tokenInfo.getAppInfo().getKey() + token + timestamp + nonce;</span><br><span class="line">        String signature = MD5Util.encode(signString);</span><br><span class="line">        <span class="keyword">boolean</span> flag = signature.equals(sign);</span><br><span class="line">        Assert.isTrue(flag, <span class="string">"签名错误"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 5. 拒绝重复调用(第一次访问时存储，过期时间和请求超时时间保持一致), 只有标注不允许重复提交注解的才会校验</span></span><br><span class="line">        <span class="keyword">if</span> (notRepeatSubmit != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ValueOperations&lt;String, Integer&gt; signRedis = redisTemplate.opsForValue();</span><br><span class="line">            <span class="keyword">boolean</span> exists = redisTemplate.hasKey(sign);</span><br><span class="line">            Assert.isTrue(!exists, <span class="string">"请勿重复提交"</span>);</span><br><span class="line">            signRedis.set(sign, <span class="number">0</span>, expireTime, TimeUnit.MILLISECONDS);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.preHandle(request, response, handler);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6. MD5Util —-MD5工具类，加密生成数字签名  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MD5Util</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> final String hexDigits[] = &#123; <span class="string">"0"</span>, <span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>, <span class="string">"4"</span>, <span class="string">"5"</span>,</span><br><span class="line">            <span class="string">"6"</span>, <span class="string">"7"</span>, <span class="string">"8"</span>, <span class="string">"9"</span>, <span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>, <span class="string">"e"</span>, <span class="string">"f"</span> &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">byteArrayToHexString</span>(<span class="params"><span class="keyword">byte</span> b[]</span>)</span> &#123;</span><br><span class="line">        StringBuffer resultSb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b.length; i++)</span><br><span class="line">            resultSb.append(byteToHexString(b[i]));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultSb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">byteToHexString</span>(<span class="params"><span class="keyword">byte</span> b</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> n = b;</span><br><span class="line">        <span class="keyword">if</span> (n &lt; <span class="number">0</span>)</span><br><span class="line">            n += <span class="number">256</span>;</span><br><span class="line">        <span class="keyword">int</span> d1 = n / <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">int</span> d2 = n % <span class="number">16</span>;</span><br><span class="line">        <span class="keyword">return</span> hexDigits[d1] + hexDigits[d2];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span>(<span class="params">String origin</span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> encode(origin, <span class="string">"UTF-8"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">encode</span>(<span class="params">String origin, String charsetname</span>)</span> &#123;</span><br><span class="line">        String resultString = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            resultString = <span class="keyword">new</span> String(origin);</span><br><span class="line">            MessageDigest md = MessageDigest.getInstance(<span class="string">"MD5"</span>);</span><br><span class="line">            <span class="keyword">if</span> (charsetname == <span class="literal">null</span> || <span class="string">""</span>.<span class="keyword">equals</span>(charsetname))</span><br><span class="line">                resultString = byteArrayToHexString(md.digest(resultString</span><br><span class="line">                        .getBytes()));</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                resultString = byteArrayToHexString(md.digest(resultString</span><br><span class="line">                        .getBytes(charsetname)));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception exception) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultString;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7. @NotRepeatSubmit   —–自定义注解，防止重复提交。  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 禁止重复提交</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">@Target(ElementType.METHOD)</span><br><span class="line">@Retention(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> @<span class="keyword">interface</span> <span class="title">NotRepeatSubmit</span> &#123;</span><br><span class="line">    <span class="comment">/** 过期时间，单位毫秒 **/</span></span><br><span class="line">    <span class="function"><span class="keyword">long</span> <span class="title">value</span>(<span class="params"></span>) <span class="keyword">default</span> 5000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8. AccessToken  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> AccessToken &#123;</span><br><span class="line">    <span class="comment">/** token */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> token;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 失效时间 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">Date</span> expireTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9. AppInfo  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> AppInfo &#123;</span><br><span class="line">    <span class="comment">/** App id */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> appId;</span><br><span class="line">    <span class="comment">/** API 秘钥 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10. TokenInfo  </p><figure class="highlight cs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Data</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">TokenInfo</span> &#123;</span><br><span class="line">    <span class="comment">/** token类型: api:0 、user:1 */</span></span><br><span class="line">    <span class="keyword">private</span> Integer tokenType;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** App 信息 */</span></span><br><span class="line">    <span class="keyword">private</span> AppInfo appInfo;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 用户其他数据 */</span></span><br><span class="line">    <span class="keyword">private</span> UserInfo userInfo;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11. UserInfo  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> UserInfo &#123;</span><br><span class="line">    <span class="comment">/** 用户名 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> username;</span><br><span class="line">    <span class="comment">/** 手机号 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> mobile;</span><br><span class="line">    <span class="comment">/** 邮箱 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> email;</span><br><span class="line">    <span class="comment">/** 密码 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> password;</span><br><span class="line">    <span class="comment">/** 盐 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> salt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> AccessToken accessToken;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> UserInfo(<span class="built_in">String</span> username, <span class="built_in">String</span> password, <span class="built_in">String</span> salt) &#123;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.salt = salt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>12. ApiCodeEnum  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 错误码code可以使用纯数字,使用不同区间标识一类错误，也可以使用纯字符，也可以使用前缀+编号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 错误码：ERR + 编号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 可以使用日志级别的前缀作为错误类型区分 Info(I) Error(E) Warning(W)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * 或者以业务模块 + 错误号</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * TODO 错误码设计</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Alipay 用了两个code，两个msg(https://docs.open.alipay.com/api_1/alipay.trade.pay)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> ApiCodeEnum &#123;</span><br><span class="line">    SUCCESS(<span class="string">"10000"</span>, <span class="string">"success"</span>),</span><br><span class="line">    UNKNOW_ERROR(<span class="string">"ERR0001"</span>,<span class="string">"未知错误"</span>),</span><br><span class="line">    PARAMETER_ERROR(<span class="string">"ERR0002"</span>,<span class="string">"参数错误"</span>),</span><br><span class="line">    TOKEN_EXPIRE(<span class="string">"ERR0003"</span>,<span class="string">"认证过期"</span>),</span><br><span class="line">    REQUEST_TIMEOUT(<span class="string">"ERR0004"</span>,<span class="string">"请求超时"</span>),</span><br><span class="line">    SIGN_ERROR(<span class="string">"ERR0005"</span>,<span class="string">"签名错误"</span>),</span><br><span class="line">    REPEAT_SUBMIT(<span class="string">"ERR0006"</span>,<span class="string">"请不要频繁操作"</span>),</span><br><span class="line">    ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 代码 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> code;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 结果 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> msg;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ApiCodeEnum(<span class="built_in">String</span> code, <span class="built_in">String</span> msg) &#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> getCode() &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">String</span> getMsg() &#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>13. ApiResult  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ApiResult &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 代码 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> code;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 结果 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>14. ApiUtil  ——-这个参考支付宝加密的算法写的.我直接Copy过来了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ApiUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按参数名升续拼接参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">request</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">static</span> <span class="built_in">String</span> concatSignString(HttpServletRequest request) &#123;</span><br><span class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; paramterMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        request.getParameterMap().forEach((key, value) -&gt; paramterMap.put(key, value[<span class="number">0</span>]));</span><br><span class="line">        <span class="comment">// 按照key升续排序，然后拼接参数</span></span><br><span class="line">        <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; keySet = paramterMap.keySet();</span><br><span class="line">        <span class="built_in">String</span>[] keyArray = keySet.toArray(<span class="keyword">new</span> <span class="built_in">String</span>[keySet.size()]);</span><br><span class="line">        Arrays.sort(keyArray);</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">String</span> k : keyArray) &#123;</span><br><span class="line">            <span class="comment">// 或略掉的字段</span></span><br><span class="line">            <span class="keyword">if</span> (k.equals(<span class="string">"sign"</span>)) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (paramterMap.get(k).trim().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 参数值为空，则不参与签名</span></span><br><span class="line">                sb.append(k).append(<span class="string">"="</span>).append(paramterMap.get(k).trim()).append(<span class="string">"&amp;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="built_in">String</span> concatSignString(<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; map) &#123;</span><br><span class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; paramterMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.forEach((key, value) -&gt; paramterMap.put(key, value));</span><br><span class="line">        <span class="comment">// 按照key升续排序，然后拼接参数</span></span><br><span class="line">        <span class="built_in">Set</span>&lt;<span class="built_in">String</span>&gt; keySet = paramterMap.keySet();</span><br><span class="line">        <span class="built_in">String</span>[] keyArray = keySet.toArray(<span class="keyword">new</span> <span class="built_in">String</span>[keySet.size()]);</span><br><span class="line">        Arrays.sort(keyArray);</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="keyword">for</span> (<span class="built_in">String</span> k : keyArray) &#123;</span><br><span class="line">            <span class="keyword">if</span> (paramterMap.get(k).trim().length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 参数值为空，则不参与签名</span></span><br><span class="line">                sb.append(k).append(<span class="string">"="</span>).append(paramterMap.get(k).trim()).append(<span class="string">"&amp;"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取方法上的<span class="doctag">@NotRepeatSubmit</span>注解</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param <span class="variable">handler</span></span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    public <span class="keyword">static</span> NotRepeatSubmit getNotRepeatSubmit(<span class="built_in">Object</span> handler) &#123;</span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod) &#123;</span><br><span class="line">            HandlerMethod handlerMethod = (HandlerMethod) handler;</span><br><span class="line">            Method method = handlerMethod.getMethod();</span><br><span class="line">            NotRepeatSubmit annotation = method.getAnnotation(NotRepeatSubmit.class);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> annotation;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>15. ApiResponse</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> ApiResponse&lt;T&gt; &#123;</span><br><span class="line">    <span class="comment">/** 结果 */</span></span><br><span class="line">    <span class="keyword">private</span> ApiResult result;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 数据 */</span></span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/** 签名 */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="built_in">String</span> sign;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse success(T data) &#123;</span><br><span class="line">        <span class="keyword">return</span> response(ApiCodeEnum.SUCCESS.getCode(), ApiCodeEnum.SUCCESS.getMsg(), data);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ApiResponse error(<span class="built_in">String</span> code, <span class="built_in">String</span> msg) &#123;</span><br><span class="line">        <span class="keyword">return</span> response(code, msg, <span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;T&gt; ApiResponse response(<span class="built_in">String</span> code, <span class="built_in">String</span> msg, T data) &#123;</span><br><span class="line">        ApiResult result = <span class="keyword">new</span> ApiResult(code, msg);</span><br><span class="line">        ApiResponse response = <span class="keyword">new</span> ApiResponse();</span><br><span class="line">        response.setResult(result);</span><br><span class="line">        response.setData(data);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">String</span> sign = signData(data);</span><br><span class="line">        response.setSign(sign);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> &lt;T&gt; <span class="built_in">String</span> signData(T data) &#123;</span><br><span class="line">        <span class="comment">// TODO 查询key</span></span><br><span class="line">        <span class="built_in">String</span> key = <span class="string">"12345678954556"</span>;</span><br><span class="line">        Map&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; responseMap = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            responseMap = getFields(data);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">String</span> urlComponent = ApiUtil.concatSignString(responseMap);</span><br><span class="line">        <span class="built_in">String</span> signature = urlComponent + <span class="string">"key="</span> + key;</span><br><span class="line">        <span class="built_in">String</span> sign = MD5Util.encode(signature);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sign;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * @param data 反射的对象,获取对象的字段名和值</span></span><br><span class="line"><span class="comment">     * @throws IllegalArgumentException</span></span><br><span class="line"><span class="comment">     * @throws IllegalAccessException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Map&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; getFields(<span class="built_in">Object</span> data) throws IllegalAccessException, IllegalArgumentException &#123;</span><br><span class="line">        <span class="keyword">if</span> (data == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        Map&lt;<span class="built_in">String</span>, <span class="built_in">String</span>&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        Field[] fields = data.getClass().getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (int i = <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">            Field field = fields[i];</span><br><span class="line">            field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="built_in">String</span> name = field.getName();</span><br><span class="line">            <span class="built_in">Object</span> value = field.get(data);</span><br><span class="line">            <span class="keyword">if</span> (field.get(data) != <span class="literal">null</span>) &#123;</span><br><span class="line">                map.put(name, value.toString());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>七、ThreadLocal</strong><br>ThreadLocal是线程内的全局上下文。就是在单个线程中，方法之间共享的内存，每个方法都可以从该上下文中获取值和修改值。<br>实际案例：<br>在调用api时都会传一个token参数，通常会写一个拦截器来校验token是否合法，我们可以通过token找到对应的用户信息(User)，如果token合法，然后将用户信息存储到ThreadLocal中，这样无论是在controller、service、dao的哪一层都能访问到该用户的信息。作用类似于Web中的request作用域。<br>传统方式我们要在方法中访问某个变量，可以通过传参的形式往方法中传参，如果多个方法都要使用那么每个方法都要传参；如果使用ThreadLocal所有方法就不需要传该参数了，每个方法都可以通过ThreadLocal来访问该值。  </p><ul><li><p>ThreadLocalUtil.set(“key”, value); 保存值</p></li><li><p>T value = ThreadLocalUtil.get(“key”); 获取值</p></li></ul><p>ThreadLocalUtil</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">public <span class="class"><span class="keyword">class</span> <span class="title">ThreadLocalUtil</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    private <span class="keyword">static</span> final ThreadLocal&lt;<span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt;&gt; threadLocal = <span class="keyword">new</span> ThreadLocal() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        protected <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; initialValue() &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">4</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="built_in">Map</span>&lt;<span class="built_in">String</span>, <span class="built_in">Object</span>&gt; getThreadLocal()&#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> &lt;T&gt; T <span class="keyword">get</span>(String key) &#123;</span><br><span class="line">        <span class="built_in">Map</span> map = (<span class="built_in">Map</span>)threadLocal.get();</span><br><span class="line">        <span class="keyword">return</span> (T)map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> &lt;T&gt; T <span class="keyword">get</span>(String key,T defaultValue) &#123;</span><br><span class="line">        <span class="built_in">Map</span> map = (<span class="built_in">Map</span>)threadLocal.get();</span><br><span class="line">        <span class="keyword">return</span> (T)map.get(key) == <span class="literal">null</span> ? defaultValue : (T)map.get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">set</span>(String key, Object value) &#123;</span><br><span class="line">        <span class="built_in">Map</span> map = (<span class="built_in">Map</span>)threadLocal.get();</span><br><span class="line">        map.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> <span class="keyword">set</span>(Map&lt;String, Object&gt; keyValueMap) &#123;</span><br><span class="line">        <span class="built_in">Map</span> map = (<span class="built_in">Map</span>)threadLocal.get();</span><br><span class="line">        map.putAll(keyValueMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> remove() &#123;</span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> &lt;T&gt; <span class="built_in">Map</span>&lt;<span class="built_in">String</span>,T&gt; fetchVarsByPrefix(<span class="built_in">String</span> prefix) &#123;</span><br><span class="line">        <span class="built_in">Map</span>&lt;<span class="built_in">String</span>,T&gt; vars = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="keyword">if</span>( prefix == <span class="literal">null</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span> vars;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Map</span> map = (<span class="built_in">Map</span>)threadLocal.get();</span><br><span class="line">        <span class="built_in">Set</span>&lt;<span class="built_in">Map</span>.Entry&gt; <span class="keyword">set</span> = map.entrySet();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for( Map.Entry entry : <span class="keyword">set</span>)&#123;</span><br><span class="line">            <span class="built_in">Object</span> key = entry.getKey();</span><br><span class="line">            <span class="keyword">if</span>( key <span class="keyword">instanceof</span> <span class="built_in">String</span> )&#123;</span><br><span class="line">                <span class="keyword">if</span>( ((<span class="built_in">String</span>) key).startsWith(prefix) )&#123;</span><br><span class="line">                    vars.put((<span class="built_in">String</span>)key,(T)entry.getValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vars;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> &lt;T&gt; T remove(<span class="built_in">String</span> key) &#123;</span><br><span class="line">        <span class="built_in">Map</span> map = (<span class="built_in">Map</span>)threadLocal.get();</span><br><span class="line">        <span class="keyword">return</span> (T)map.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    public <span class="keyword">static</span> <span class="keyword">void</span> clear(<span class="built_in">String</span> prefix) &#123;</span><br><span class="line">        <span class="keyword">if</span>( prefix == <span class="literal">null</span> )&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Map</span> map = (<span class="built_in">Map</span>)threadLocal.get();</span><br><span class="line">        <span class="built_in">Set</span>&lt;<span class="built_in">Map</span>.Entry&gt; <span class="keyword">set</span> = map.entrySet();</span><br><span class="line">        List&lt;String&gt; removeKeys = new ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        for( Map.Entry entry : <span class="keyword">set</span> )&#123;</span><br><span class="line">            <span class="built_in">Object</span> key = entry.getKey();</span><br><span class="line">            <span class="keyword">if</span>( key <span class="keyword">instanceof</span> <span class="built_in">String</span> )&#123;</span><br><span class="line">                <span class="keyword">if</span>( ((<span class="built_in">String</span>) key).startsWith(prefix) )&#123;</span><br><span class="line">                    removeKeys.add((<span class="built_in">String</span>)key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>( <span class="built_in">String</span> key : removeKeys )&#123;</span><br><span class="line">            map.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总结:这个是目前第三方数据接口交互过程中常用的一些参数与使用示例，希望对大家有点帮助。<br>当然如果为了保证更加的安全，可以加上RSA,RSA2，AES等等加密方式，保证了数据的更加的安全，但是唯一的缺点是加密与解密比较耗费CPU的资源。  </p><blockquote><p>来源：<a href="https://www.cnblogs.com/jurendage/p/12653865.html" target="_blank" rel="noopener">https://www.cnblogs.com/jurendage/p/12653865.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在实际的业务中，难免会跟第三方系统进行数据的交互与传递，那么如何保证数据在传输过程中的安全呢（防窃取）？除了https的协议之外，能不能加上通用的一套算法以及规范来保证传输的安全性呢？  &lt;/p&gt;
&lt;p&gt;下面我们就来讨论下常用的一些API设计的安全方法，可能不一定是最好的，
      
    
    </summary>
    
    
    
      <category term="JAVA安全" scheme="https://kanchai.club/tags/JAVA%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案</title>
    <link href="https://kanchai.club/2020/04/20/%E8%B0%88%E8%B0%88%E5%85%B3%E4%BA%8E%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%EF%BC%8C%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://kanchai.club/2020/04/20/%E8%B0%88%E8%B0%88%E5%85%B3%E4%BA%8E%E7%BC%93%E5%AD%98%E7%A9%BF%E9%80%8F%EF%BC%8C%E7%BC%93%E5%AD%98%E5%87%BB%E7%A9%BF%EF%BC%8C%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%EF%BC%8C%E7%83%AD%E7%82%B9%E6%95%B0%E6%8D%AE%E5%A4%B1%E6%95%88%E9%97%AE%E9%A2%98%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</id>
    <published>2020-04-20T02:42:53.764Z</published>
    <updated>2020-04-20T02:42:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>作者：Tom-shushu</p><p>cnblogs.com/Tom-shushu/p/10636382.html</p></blockquote><h2 id="1-我们使用缓存时的业务流程大概为："><a href="#1-我们使用缓存时的业务流程大概为：" class="headerlink" title="1.我们使用缓存时的业务流程大概为："></a>1.我们使用缓存时的业务流程大概为：</h2><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java10-1586143832.png" alt="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案" title="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案"></p><p>当我们查询一条数据时，先去查询缓存，如果缓存有就直接返回，如果没有就去查询数据库，然后返回。这种情况下就可能出现下面的一些现象。</p><h2 id="2-缓存穿透"><a href="#2-缓存穿透" class="headerlink" title="2.缓存穿透"></a>2.缓存穿透</h2><h3 id="2-1什么是缓存穿透"><a href="#2-1什么是缓存穿透" class="headerlink" title="2.1什么是缓存穿透"></a>2.1什么是缓存穿透</h3><p>缓存穿透是指查询一个一定不存在的数据，由于缓存是不命中时被动写的，并且出于容错考虑，如果从存储层查不到数据则不写入缓存，这将导致这个不存在的数据每次请求都要到存储层去查询，失去了缓存的意义。在流量大时，可能DB就挂掉了，要是有人利用不存在的key频繁攻击我们的应用，这就是漏洞。</p><h3 id="2-2缓存穿透带来的问题"><a href="#2-2缓存穿透带来的问题" class="headerlink" title="2.2缓存穿透带来的问题"></a>2.2缓存穿透带来的问题</h3><p>试想一下，如果有黑客对你的系统进行攻击，拿一个不存在的id去查询数据，会产生大量的请求到你的数据库去查询，可能会导致你的数据库由于压力过大而宕掉。</p><h3 id="2-3解决的办法"><a href="#2-3解决的办法" class="headerlink" title="2.3解决的办法"></a>2.3解决的办法</h3><h4 id="2-3-1缓存空值"><a href="#2-3-1缓存空值" class="headerlink" title="2.3.1缓存空值"></a>2.3.1缓存空值</h4><p>之所以会发生穿透，就是因为缓存中没有储存这些空数据的key。从而导致每次查询都到数据库去了。</p><p>那么我们就可以为这些key对应的值设置为null丢到缓存里面去。后面出现查询这个key的请求的时候直接返回null。</p><p>这样就不用再到数据库中去走一圈了，但是别忘了设置过期时间。</p><p>缓存空对象会有两个问题：</p><ul><li><p>第一，空值做了缓存，意味着缓存层中存了更多的键，需要更多的内存空间 ( 如果是攻击，问题更严重 )，比较有效的方法是针对这类数据设置一个较短的过期时间，让其自动剔除。</p></li><li><p>第二，缓存层和存储层的数据会有一段时间窗口的不一致，可能会对业务有一定影响。例如过期时间设置为 5分钟，如果此时存储层添加了这个数据，那此段时间就会出现缓存层和存储层数据的不一致，此时可以利用消息系统或者其他方式清除掉缓存层中的空对象。</p></li></ul><h4 id="2-3-2用布隆过滤器BloomFilter"><a href="#2-3-2用布隆过滤器BloomFilter" class="headerlink" title="2.3.2用布隆过滤器BloomFilter"></a>2.3.2用布隆过滤器BloomFilter</h4><p>BloomFilter类似于一个hbase set用来判断某个元素(key)是否存在于某个集合中。</p><p>这种方式在大数据场景应用比较多，比如Hbase中使用它去判断数据是否在磁盘上。还有在爬虫场景判断url是否已经被爬取过。</p><p>这种方案可以加在第一种方案中，在缓存之前加一层BloomFilter，在查询的时候先去BloomFilter去查询key是否存在，如果不存在就直接返回，存在再去查缓存——–&gt;差数据库。</p><p>流程图如下：</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java6-1586143832-1.png" alt="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案" title="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案"></p><h3 id="2-4如何选择"><a href="#2-4如何选择" class="headerlink" title="2.4如何选择"></a>2.4如何选择</h3><p>针对于一些恶意攻击，攻击带来大量key是不存在的，那么我们采用第一种方案就会缓存大量不存在的数据。此时我们采用第一种方案就不合适了，我们完全可以先使用第二种方案过滤掉这些key。</p><p>针对这些key异常多，请求多，重复率比较低的数据，我们就没有必要进行缓存，使用第二种方案直接过滤掉。</p><p>而对于空数据的key有限的，重复率比较高的，我们则可以采用第一种方式进行缓存。</p><h2 id="3-缓存击穿"><a href="#3-缓存击穿" class="headerlink" title="3.缓存击穿"></a>3.缓存击穿</h2><h3 id="3-1什么是缓存击穿"><a href="#3-1什么是缓存击穿" class="headerlink" title="3.1什么是缓存击穿"></a>3.1什么是缓存击穿</h3><p>缓存击穿是我们使用缓存可能遇到的第二个问题。</p><p>在平时高并发的系统中，大量的请求同时查询一个key时，此时这个key正好失效了，就会导致大量的请求都打到数据库上面去，这种现象我们称为缓存击穿。</p><h3 id="3-2会带来什么问题"><a href="#3-2会带来什么问题" class="headerlink" title="3.2会带来什么问题"></a>3.2会带来什么问题</h3><p>会造成某一时刻数据请求量过大，压力剧增。</p><h3 id="3-3如何解决"><a href="#3-3如何解决" class="headerlink" title="3.3如何解决"></a>3.3如何解决</h3><p>上面现象是多个线程同时去查询数据库的这一条数据，那么我们可以在第一个查询数据的请求上使用一个互斥锁来锁住它。（如果是单机，可以用synchronized或者lock来处理，如果是分布式环境可以用分布式锁就可以了（分布式锁，可以用memcache的add, redis的setnx, zookeeper的添加节点操作））</p><p>其他线程走到这一步拿不到锁就等着，等待第一个线程查询到了数据，然后做缓存。后面的线程进来发现已经有了缓存，就直接走缓存。</p><h2 id="4-缓存雪崩"><a href="#4-缓存雪崩" class="headerlink" title="4.缓存雪崩"></a>4.缓存雪崩</h2><h3 id="4-1什么是缓存雪崩"><a href="#4-1什么是缓存雪崩" class="headerlink" title="4.1什么是缓存雪崩"></a>4.1什么是缓存雪崩</h3><p>缓存雪崩的情况是指：当某一时刻发生大规模的缓存失效的情况，比如你的缓存服务宕机了，会有大量的请求进来直接打到数据库上面，结果就是数据库挂掉。</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/04/java9-1586143832.png" alt="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案" title="面试官：谈谈关于缓存穿透，缓存击穿，缓存雪崩，热点数据失效问题的解决方案"></p><h3 id="4-2解决办法"><a href="#4-2解决办法" class="headerlink" title="4.2解决办法"></a>4.2解决办法</h3><h4 id="4-2-1雪崩前：使用集群缓存，保证缓存服务的高可用"><a href="#4-2-1雪崩前：使用集群缓存，保证缓存服务的高可用" class="headerlink" title="4.2.1雪崩前：使用集群缓存，保证缓存服务的高可用"></a>4.2.1雪崩前：使用集群缓存，保证缓存服务的高可用</h4><p>这种方案就是在发生雪崩前对缓存集群，实现高可用，如果是使用Redis，可以使用（主从 + 哨兵），Redis Cluster来避免Redis全盘崩溃的情况。</p><h4 id="4-2-2雪崩中：ehcache本地缓存-Hystrix限流-amp-降级，避免MySQl被打死"><a href="#4-2-2雪崩中：ehcache本地缓存-Hystrix限流-amp-降级，避免MySQl被打死" class="headerlink" title="4.2.2雪崩中：ehcache本地缓存 + Hystrix限流 &amp; 降级，避免MySQl被打死"></a>4.2.2雪崩中：ehcache本地缓存 + Hystrix限流 &amp; 降级，避免MySQl被打死</h4><p>使用ehcache本地缓存的目的也是考虑Redis Cluster完全不可用的时候，ehcache本地缓存还能够支撑一阵。</p><p>使用Hystrix进行限流 &amp; 降级，比如一秒来了5000个请求，我们可以设置假设一秒只能有2000个请求可以通过这个组件，那么其他剩余的3000请求就会走限流逻辑。</p><p>然后去调用我们自己开发的降级组件（降级）,比如设置的一些默认值等等之类的。以此来保护最后的MySQl不会被大量的请求打死。</p><h4 id="4-2-3雪崩后：开启Redis持久化，尽快恢复缓存集群。"><a href="#4-2-3雪崩后：开启Redis持久化，尽快恢复缓存集群。" class="headerlink" title="4.2.3雪崩后：开启Redis持久化，尽快恢复缓存集群。"></a>4.2.3雪崩后：开启Redis持久化，尽快恢复缓存集群。</h4><h2 id="5-解决热点数据集中失效问题"><a href="#5-解决热点数据集中失效问题" class="headerlink" title="5.解决热点数据集中失效问题"></a>5.解决热点数据集中失效问题</h2><p>我们在设置缓存的时候，一般会给缓存设置一个失效的时间，过了这个时间，缓存就失效了。</p><p>对于一些热点数据来说，当缓存失效后会存在大量的请求到数据库上来，从而可能导致数据库崩溃的情况。</p><h3 id="5-1解决办法"><a href="#5-1解决办法" class="headerlink" title="5.1解决办法"></a>5.1解决办法</h3><h4 id="5-1-1设置不同的失效时间"><a href="#5-1-1设置不同的失效时间" class="headerlink" title="5.1.1设置不同的失效时间"></a>5.1.1设置不同的失效时间</h4><p>为了避免这些热点数据集体失效，那么我们在设置缓存过期时间的时侯，让他们失效的时间错开。比如我们可以在原有的失效时间基础上增加一个随机值。</p><h4 id="5-1-2互斥锁"><a href="#5-1-2互斥锁" class="headerlink" title="5.1.2互斥锁"></a>5.1.2互斥锁</h4><p>结合上面的击穿情况，在第一个请求去查询数据库的时候对它加一个互斥锁，其余的查询请求都会被阻塞住，直到锁被释放，从而保护数据库。</p><p>但是也是由于它会阻塞其他线程，此时系统的吞吐量会下降。需要结合实际业务去考虑。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;作者：Tom-shushu&lt;/p&gt;
&lt;p&gt;cnblogs.com/Tom-shushu/p/10636382.html&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-我们使用缓存时的业务流程大概为：&quot;&gt;&lt;a href=&quot;#1-我们使用缓存
      
    
    </summary>
    
    
    
      <category term="JAVA缓存" scheme="https://kanchai.club/tags/JAVA%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>FFmpeg 视频处理教程！</title>
    <link href="https://kanchai.club/2020/04/01/FFmpeg_%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://kanchai.club/2020/04/01/FFmpeg_%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</id>
    <published>2020-04-01T03:55:50.809Z</published>
    <updated>2020-04-01T03:55:50.804Z</updated>
    
    <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2020/01/" target="_blank" rel="noopener">2020年1月14日</a></p><p><a href="https://www.ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a> 是视频处理最常用的开源软件。</p><p>它功能强大，用途广泛，大量用于视频网站和商业软件（比如 Youtube 和 iTunes），也是许多音频和视频格式的标准编码/解码实现。</p><p><img src="https://www.wangbase.com/blogimg/asset/202001/bg2020011401.jpg" alt=""></p><p>FFmpeg 本身是一个庞大的项目，包含许多组件和库文件，最常用的是它的命令行工具。本文介绍 FFmpeg 命令行如何处理视频，比桌面视频处理软件更简洁高效。</p><p>如果你还没安装，可以根据<a href="https://www.ffmpeg.org/download.html" target="_blank" rel="noopener">官方文档</a> 先完成安装。</p><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>介绍 FFmpeg 用法之前，需要了解一些视频处理的基本概念。</p><h3 id="1-1-容器"><a href="#1-1-容器" class="headerlink" title="1.1 容器"></a>1.1 容器</h3><p>视频文件本身其实是一个容器（container），里面包括了视频和音频，也可能有字幕等其他内容。</p><p>常见的容器格式有以下几种。一般来说，视频文件的后缀名反映了它的容器格式。</p><blockquote><ul><li><p>MP4</p></li><li><p>MKV</p></li><li><p>WebM</p></li><li><p>AVI</p></li></ul></blockquote><p>下面的命令查看 FFmpeg 支持的容器。</p><blockquote><p>$ ffmpeg -formats</p></blockquote><h3 id="1-2-编码格式"><a href="#1-2-编码格式" class="headerlink" title="1.2 编码格式"></a>1.2 编码格式</h3><p>视频和音频都需要经过编码，才能保存成文件。不同的编码格式（CODEC），有不同的压缩率，会导致文件大小和清晰度的差异。</p><p>常用的视频编码格式如下。</p><blockquote><ul><li><p>H.262</p></li><li><p>H.264</p></li><li><p>H.265</p></li></ul></blockquote><p>上面的编码格式都是有版权的，但是可以免费使用。此外，还有几种无版权的视频编码格式。</p><blockquote><ul><li><p>VP8</p></li><li><p>VP9</p></li><li><p>AV1</p></li></ul></blockquote><p>常用的音频编码格式如下。</p><blockquote><ul><li><p>MP3</p></li><li><p>AAC</p></li></ul></blockquote><p>上面所有这些都是有损的编码格式，编码后会损失一些细节，以换取压缩后较小的文件体积。无损的编码格式压缩出来的文件体积较大，这里就不介绍了。</p><p>下面的命令可以查看 FFmpeg 支持的编码格式，视频编码和音频编码都在内。</p><blockquote><p>$ ffmpeg -codecs</p></blockquote><h3 id="1-3-编码器"><a href="#1-3-编码器" class="headerlink" title="1.3 编码器"></a>1.3 编码器</h3><p>编码器（encoders）是实现某种编码格式的库文件。只有安装了某种格式的编码器，才能实现该格式视频/音频的编码和解码。</p><p>以下是一些 FFmpeg 内置的视频编码器。</p><blockquote><ul><li><p>libx264：最流行的开源 H.264 编码器</p></li><li><p>NVENC：基于 NVIDIA GPU 的 H.264 编码器</p></li><li><p>libx265：开源的 HEVC 编码器</p></li><li><p>libvpx：谷歌的 VP8 和 VP9 编码器</p></li><li><p>libaom：AV1 编码器</p></li></ul></blockquote><p>音频编码器如下。</p><blockquote><ul><li><p>libfdk-aac</p></li><li><p>aac</p></li></ul></blockquote><p>下面的命令可以查看 FFmpeg 已安装的编码器。</p><blockquote><p>$ ffmpeg -encoders</p></blockquote><h2 id="二、FFmpeg-的使用格式"><a href="#二、FFmpeg-的使用格式" class="headerlink" title="二、FFmpeg 的使用格式"></a>二、FFmpeg 的使用格式</h2><p>FFmpeg 的命令行参数非常多，可以分成五个部分。</p><blockquote><p>$ ffmpeg {1} {2} -i {3} {4} {5}</p></blockquote><p>上面命令中，五个部分的参数依次如下。</p><blockquote><ol><li><p>全局参数</p></li><li><p>输入文件参数</p></li><li><p>输入文件</p></li><li><p>输出文件参数</p></li><li><p>输出文件</p></li></ol></blockquote><p>参数太多的时候，为了便于查看，ffmpeg 命令可以写成多行。</p><blockquote><p>$ ffmpeg \[全局参数] \[输入文件参数] \-i [输入文件] \[输出文件参数] \[输出文件]</p></blockquote><p>下面是一个例子。</p><blockquote><p>$ ffmpeg \-y \ # 全局参数-c:a libfdk_aac -c:v libx264 \ # 输入文件参数-i input.mp4 \ # 输入文件-c:v libvpx-vp9 -c:a libvorbis \ # 输出文件参数output.webm # 输出文件</p></blockquote><p>上面的命令将 mp4 文件转成 webm 文件，这两个都是容器格式。输入的 mp4 文件的音频编码格式是 aac，视频编码格式是 H.264；输出的 webm 文件的视频编码格式是 VP9，音频格式是 Vorbis。</p><p>如果不指明编码格式，FFmpeg 会自己判断输入文件的编码。因此，上面的命令可以简单写成下面的样子。</p><blockquote><p>$ ffmpeg -i input.avi output.mp4</p></blockquote><h2 id="三、常用命令行参数"><a href="#三、常用命令行参数" class="headerlink" title="三、常用命令行参数"></a>三、常用命令行参数</h2><p>FFmpeg 常用的命令行参数如下。</p><blockquote><ul><li><p><code>-c</code>：指定编码器</p></li><li><p><code>-c copy</code>：直接复制，不经过重新编码（这样比较快）</p></li><li><p><code>-c:v</code>：指定视频编码器</p></li><li><p><code>-c:a</code>：指定音频编码器</p></li><li><p><code>-i</code>：指定输入文件</p></li><li><p><code>-an</code>：去除音频流</p></li><li><p><code>-vn</code>： 去除视频流</p></li><li><p><code>-preset</code>：指定输出的视频质量，会影响文件的生成速度，有以下几个可用的值 ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow。</p></li><li><p><code>-y</code>：不经过确认，输出时直接覆盖同名文件。</p></li></ul></blockquote><h2 id="四、常见用法"><a href="#四、常见用法" class="headerlink" title="四、常见用法"></a>四、常见用法</h2><p>下面介绍 FFmpeg 几种常见用法。</p><h3 id="4-1-查看文件信息"><a href="#4-1-查看文件信息" class="headerlink" title="4.1 查看文件信息"></a>4.1 查看文件信息</h3><p>查看视频文件的元信息，比如编码格式和比特率，可以只使用<code>-i</code>参数。</p><blockquote><p>$ ffmpeg -i input.mp4</p></blockquote><p>上面命令会输出很多冗余信息，加上<code>-hide_banner</code>参数，可以只显示元信息。</p><blockquote><p>$ ffmpeg -i input.mp4 -hide_banner</p></blockquote><h3 id="4-2-转换编码格式"><a href="#4-2-转换编码格式" class="headerlink" title="4.2 转换编码格式"></a>4.2 转换编码格式</h3><p>转换编码格式（transcoding）指的是， 将视频文件从一种编码转成另一种编码。比如转成 H.264 编码，一般使用编码器<code>libx264</code>，所以只需指定输出文件的视频编码器即可。</p><blockquote><p>$ ffmpeg -i [input.file] -c:v libx264 output.mp4</p></blockquote><p>下面是转成 H.265 编码的写法。</p><blockquote><p>$ ffmpeg -i [input.file] -c:v libx265 output.mp4</p></blockquote><h3 id="4-3-转换容器格式"><a href="#4-3-转换容器格式" class="headerlink" title="4.3 转换容器格式"></a>4.3 转换容器格式</h3><p>转换容器格式（transmuxing）指的是，将视频文件从一种容器转到另一种容器。下面是 mp4 转 webm 的写法。</p><blockquote><p>$ ffmpeg -i input.mp4 -c copy output.webm</p></blockquote><p>上面例子中，只是转一下容器，内部的编码格式不变，所以使用<code>-c copy</code>指定直接拷贝，不经过转码，这样比较快。</p><h3 id="4-4-调整码率"><a href="#4-4-调整码率" class="headerlink" title="4.4 调整码率"></a>4.4 调整码率</h3><p>调整码率（transrating）指的是，改变编码的比特率，一般用来将视频文件的体积变小。下面的例子指定码率最小为964K，最大为3856K，缓冲区大小为 2000K。</p><blockquote><p>$ ffmpeg \-i input.mp4 \-minrate 964K -maxrate 3856K -bufsize 2000K <br>output.mp4</p></blockquote><h3 id="4-5-改变分辨率（transsizing）"><a href="#4-5-改变分辨率（transsizing）" class="headerlink" title="4.5 改变分辨率（transsizing）"></a>4.5 改变分辨率（transsizing）</h3><p>下面是改变视频分辨率（transsizing）的例子，从 1080p 转为 480p 。</p><blockquote><p>$ ffmpeg \-i input.mp4 \-vf scale=480:-1 <br>output.mp4</p></blockquote><h3 id="4-6-提取音频"><a href="#4-6-提取音频" class="headerlink" title="4.6 提取音频"></a>4.6 提取音频</h3><p>有时，需要从视频里面提取音频（demuxing），可以像下面这样写。</p><blockquote><p>$ ffmpeg \-i input.mp4 \-vn -c:a copy <br>output.aac</p></blockquote><p>上面例子中，<code>-vn</code>表示去掉视频，<code>-c:a copy</code>表示不改变音频编码，直接拷贝。</p><h3 id="4-7-添加音轨"><a href="#4-7-添加音轨" class="headerlink" title="4.7 添加音轨"></a>4.7 添加音轨</h3><p>添加音轨（muxing）指的是，将外部音频加入视频，比如添加背景音乐或旁白。</p><blockquote><p>$ ffmpeg \-i input.aac -i input.mp4 <br>output.mp4</p></blockquote><p>上面例子中，有音频和视频两个输入文件，FFmpeg 会将它们合成为一个文件。</p><h3 id="4-8-截图"><a href="#4-8-截图" class="headerlink" title="4.8 截图"></a>4.8 截图</h3><p>下面的例子是从指定时间开始，连续对1秒钟的视频进行截图。</p><blockquote><p>$ ffmpeg \-y \-i input.mp4 \-ss 00:01:24 -t 00:00:01 <br>output_%3d.jpg</p></blockquote><p>如果只需要截一张图，可以指定只截取一帧。</p><blockquote><p>$ ffmpeg \-ss 01:23:45 \-i input \-vframes 1 -q:v 2 <br>output.jpg</p></blockquote><p>上面例子中，<code>-vframes 1</code>指定只截取一帧，<code>-q:v 2</code>表示输出的图片质量，一般是1到5之间（1 为质量最高）。</p><h3 id="4-9-裁剪"><a href="#4-9-裁剪" class="headerlink" title="4.9 裁剪"></a>4.9 裁剪</h3><p>裁剪（cutting）指的是，截取原始视频里面的一个片段，输出为一个新视频。可以指定开始时间（start）和持续时间（duration），也可以指定结束时间（end）。</p><blockquote><p>$ ffmpeg -ss [start] -i [input] -t [duration] -c copy [output]$ ffmpeg -ss [start] -i [input] -to [end] -c copy [output]</p></blockquote><p>下面是实际的例子。</p><blockquote><p>$ ffmpeg -ss 00:01:50 -i [input] -t 10.5 -c copy [output]$ ffmpeg -ss 2.5 -i [input] -to 10 -c copy [output]</p></blockquote><p>上面例子中，<code>-c copy</code>表示不改变音频和视频的编码格式，直接拷贝，这样会快很多。</p><h3 id="4-10-为音频添加封面"><a href="#4-10-为音频添加封面" class="headerlink" title="4.10 为音频添加封面"></a>4.10 为音频添加封面</h3><p>有些视频网站只允许上传视频文件。如果要上传音频文件，必须为音频添加封面，将其转为视频，然后上传。</p><p>下面命令可以将音频文件，转为带封面的视频文件。</p><blockquote><p>$ ffmpeg \-loop 1 \-i cover.jpg -i input.mp3 \-c:v libx264 -c:a aac -b:a 192k -shortest <br>output.mp4</p></blockquote><p>上面命令中，有两个输入文件，一个是封面图片<code>cover.jpg</code>，另一个是音频文件<code>input.mp3</code>。<code>-loop 1</code>参数表示图片无限循环，<code>-shortest</code>参数表示音频文件结束，输出视频就结束。</p><h2 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h2><ul><li><p><a href="https://github.com/leandromoreira/ffmpeg-libav-tutorial#chapter-3---transcoding" target="_blank" rel="noopener">FFmpeg libav tutorial</a></p></li><li><p><a href="https://github.com/leandromoreira/digital_video_introduction/blob/master/encoding_pratical_examples.md#split-and-merge-smoothly" target="_blank" rel="noopener">Digital video introduction</a></p></li><li><p><a href="http://slhck.info/ffmpeg-encoding-course/" target="_blank" rel="noopener">FFmpeg encoding and editing course</a></p></li><li><p><a href="http://dragonquest64.blogspot.com/2019/10/making-slideshows-wffmpeg.html" target="_blank" rel="noopener">Making Slideshows w/FFMpeg</a></p></li><li><p><a href="https://itsfoss.com/ffmpeg/" target="_blank" rel="noopener">The Complete Guide for Using ffmpeg in Linux</a></p></li></ul><p>（完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者： &lt;a href=&quot;http://www.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;日期： &lt;a href=&quot;http://www.ruanyifeng.com/blog/2020/0
      
    
    </summary>
    
    
    
      <category term="视频处理" scheme="https://kanchai.club/tags/%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 敏捷开发入门教程</title>
    <link href="https://kanchai.club/2020/04/01/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://kanchai.club/2020/04/01/%E6%95%8F%E6%8D%B7%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</id>
    <published>2020-04-01T03:53:11.702Z</published>
    <updated>2020-04-01T03:51:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2019/03/" target="_blank" rel="noopener">2019年3月 6日</a></p><p>敏捷开发（agile development）是非常流行的软件开发方法。据<a href="https://www.statista.com/statistics/673786/worldwide-software-development-survey-agile-development-continuous-integration-adoption/" target="_blank" rel="noopener">统计</a>，2018年90%的软件开发采用敏捷开发。</p><p>但是，到底什么是敏捷开发，能说清的人却不多。本文尝试用简洁易懂的语言，解释敏捷开发。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019030701.jpg" alt=""></p><h2 id="一、迭代开发"><a href="#一、迭代开发" class="headerlink" title="一、迭代开发"></a>一、迭代开发</h2><p>敏捷开发的核心是迭代开发（iterative development）。敏捷一定是采用迭代开发的方式。</p><p>那么什么是”迭代开发”呢？迭代的英文是 iterative，直译为”重复”，迭代开发其实就是”重复开发”。</p><p>对于大型软件项目，传统的开发方式是采用一个大周期（比如一年）进行开发，整个过程就是一次”大开发”；迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次”大开发”变成多次”小开发”，每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019030702.jpg" alt=""></p><p>举例来说，SpaceX 公司想造一个大推力火箭，将人类送到火星。但是，它不是一开始就造大火箭，而是先造一个最简陋的小火箭 Falcon 1。结果，第一次发射就爆炸了，直到第四次发射，才成功进入轨道。然后，开发了中型火箭 Falcon 9，九年中发射了70次。最后，才开发 Falcon 重型火箭。如果 SpaceX 不采用迭代开发，它可能直到现在还无法上天。</p><p>迭代开发将一个大任务，分解成多次连续的开发，本质就是逐步改进。开发者先快速发布一个有效但不完美的最简版本，然后不断迭代。每一次迭代都包含规划、设计、编码、测试、评估五个步骤，不断改进产品，添加新功能。通过频繁的发布，以及跟踪对前一次迭代的反馈，最终接近较完善的产品形态。</p><h2 id="二、增量开发"><a href="#二、增量开发" class="headerlink" title="二、增量开发"></a>二、增量开发</h2><p>迭代开发只是要求将开发分成多个迭代，并没有回答一个重要的问题：怎么划分迭代，哪个任务在这个迭代，哪个任务在下个迭代？这时，一般采用”增量开发”（incremental development）划分迭代。</p><p>所谓”增量开发”，指的是软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019030703.jpg" alt=""></p><p>举例来说，房产公司开发一个10栋楼的小区。如果采用增量开发的模式，该公司第一个迭代就是交付一号楼，第二个迭代交付二号楼……每个迭代都是完成一栋完整的楼。而不是第一个迭代挖好10栋楼的地基，第二个迭代建好每栋楼的骨架，第三个迭代架设屋顶……</p><p>增量开发加上迭代开发，才算真正的敏捷开发。</p><h2 id="三、敏捷开发的好处"><a href="#三、敏捷开发的好处" class="headerlink" title="三、敏捷开发的好处"></a>三、敏捷开发的好处</h2><h3 id="3-1-早期交付"><a href="#3-1-早期交付" class="headerlink" title="3.1 早期交付"></a>3.1 早期交付</h3><p>敏捷开发的第一个好处，就是早期交付，从而大大降低成本。</p><p>还是以上一节的房产公司为例，如果按照传统的”瀑布开发模式”，先挖10栋楼的地基、再盖骨架、然后架设屋顶，每个阶段都等到前一个阶段完成后开始，可能需要两年才能一次性交付10栋楼。也就是说，如果不考虑预售，该项目必须等到两年后才能回款。</p><p>敏捷开发是六个月后交付一号楼，后面每两个月交付一栋楼。因此，半年就能回款10%，后面每个月都会有现金流，资金压力就大大减轻了。</p><h3 id="3-2-降低风险"><a href="#3-2-降低风险" class="headerlink" title="3.2 降低风险"></a>3.2 降低风险</h3><p>敏捷开发的第二个好处是，及时了解市场需求，降低产品不适用的风险。</p><p>请想一想，哪一种情况损失比较小：10栋楼都造好以后，才发现卖不出去，还是造好第一栋楼，就发现卖不出去，从而改进或停建后面9栋楼？</p><p>对于软件项目来说，先有一个原型产品，了解市场的接受程度，往往是项目成功的关键。有一本书叫做《梦断代码》，副标题就是”20+个程序员，三年时间，4732个bug，100+万美元，最后失败的故事”，这就是没有采用敏捷开发的结果。相反的，Instagram 最初是一个地理位置打卡 App，后来发现用户不怎么在乎地理位置，更喜欢上传照片，就改做照片上传软件，结果成了独角兽。</p><p>由于敏捷开发可以不断试错，找出对业务最重要的功能，然后通过迭代，调整软件方向。相比传统方式，大大增加了产品成功的可能性。如果市场需求不确定，或者你对该领域不熟悉，那么敏捷开发几乎是唯一可行的应对方式。</p><h2 id="四、如何进行每一次迭代"><a href="#四、如何进行每一次迭代" class="headerlink" title="四、如何进行每一次迭代"></a>四、如何进行每一次迭代</h2><p>虽然敏捷开发将软件开发分成多个迭代，但是也要求，每次迭代都是一个完整的软件开发周期，必须按照软件工程的方法论，进行正规的流程管理。</p><p><img src="https://www.wangbase.com/blogimg/asset/201903/bg2019030704.jpg" alt=""></p><p>具体来说，每次迭代都必须依次完成以下五个步骤。</p><blockquote><ol><li><p>需求分析（requirements analysis）</p></li><li><p>设计（design）</p></li><li><p>编码（coding）</p></li><li><p>测试（testing）</p></li><li><p>部署和评估（deployment / evaluation）</p></li></ol></blockquote><p>每个迭代大约持续2~6周。</p><h2 id="五、敏捷开发的价值观"><a href="#五、敏捷开发的价值观" class="headerlink" title="五、敏捷开发的价值观"></a>五、敏捷开发的价值观</h2><p>《敏捷软件开发宣言》里面提到四个价值观。</p><blockquote><ul><li><p>程序员的主观能动性，以及程序员之间的互动，优于既定流程和工具。</p></li><li><p>软件能够运行，优于详尽的文档。</p></li><li><p>跟客户的密切协作，优于合同和谈判。</p></li><li><p>能够响应变化，优于遵循计划。</p></li></ul></blockquote><h2 id="六、十二条原则"><a href="#六、十二条原则" class="headerlink" title="六、十二条原则"></a>六、十二条原则</h2><p>该宣言还提出十二条敏捷开发的原则。</p><ol><li><p>通过早期和持续交付有价值的软件，实现客户满意度。</p></li><li><p>欢迎不断变化的需求，即使是在项目开发的后期。要善于利用需求变更，帮助客户获得竞争优势。</p></li><li><p>不断交付可用的软件，周期通常是几周，越短越好。</p></li><li><p>项目过程中，业务人员与开发人员必须在一起工作。</p></li><li><p>项目必须围绕那些有内在动力的个人而建立，他们应该受到信任。</p></li><li><p>面对面交谈是最好的沟通方式。</p></li><li><p>可用性是衡量进度的主要指标。</p></li><li><p>提倡可持续的开发，保持稳定的进展速度。</p></li><li><p>不断关注技术是否优秀，设计是否良好。</p></li><li><p>简单性至关重要，尽最大可能减少不必要的工作。</p></li><li><p>最好的架构、要求和设计，来自团队内部自发的认识。</p></li><li><p>团队要定期反思如何更有效，并相应地进行调整。</p></li></ol><h2 id="七、参考链接"><a href="#七、参考链接" class="headerlink" title="七、参考链接"></a>七、参考链接</h2><ul><li><p><a href="https://www.mindk.com/blog/iterative-development/" target="_blank" rel="noopener">Iterative development: the secret to great product launches</a>, Pavlo Zinchenko</p></li><li><p><a href="https://en.wikipedia.org/wiki/Agile_software_development" target="_blank" rel="noopener">Agile software development</a>, Wikipedia</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者： &lt;a href=&quot;http://www.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;日期： &lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/0
      
    
    </summary>
    
    
    
      <category term="项目管理" scheme="https://kanchai.club/tags/%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>OAuth 2.0 的四种方式！</title>
    <link href="https://kanchai.club/2020/04/01/OAuth_2.0_%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://kanchai.club/2020/04/01/OAuth_2.0_%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2020-04-01T03:34:33.238Z</published>
    <updated>2020-04-01T03:31:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2019/04/" target="_blank" rel="noopener">2019年4月 9日</a></p><p><a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html" target="_blank" rel="noopener">上一篇文章</a>介绍了 OAuth 2.0 是一种授权机制，主要用来颁发令牌（token）。本文接着介绍颁发令牌的实务操作。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040901.jpg" alt=""></p><p>下面我假定，你已经理解了 OAuth 2.0 的含义和设计思想，否则请先阅读这个系列的<a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html" target="_blank" rel="noopener">上一篇文章</a>。</p><blockquote><p>进入正文之前，插播一则活动消息。</p><p>4月22日（周一）到4月29日（下周一），每天晚上八点都有两小时的免费直播课，体系化介绍高级前端开发知识，网易云课堂主办。<a href="http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html#support" target="_blank" rel="noopener">详细介绍</a>请看本文结尾，欢迎关注。</p></blockquote><h2 id="RFC-6749"><a href="#RFC-6749" class="headerlink" title="RFC 6749"></a>RFC 6749</h2><p>OAuth 2.0 的标准是 <a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="noopener">RFC 6749</a> 文件。该文件先解释了 OAuth 是什么。</p><blockquote><p>OAuth 引入了一个授权层，用来分离两种不同的角色：客户端和资源所有者。……资源所有者同意以后，资源服务器可以向客户端颁发令牌。客户端通过令牌，去请求数据。</p></blockquote><p>这段话的意思就是，OAuth 的核心就是向第三方应用颁发令牌。然后，RFC 6749 接着写道：</p><blockquote><p>（由于互联网有多种场景，）本标准定义了获得令牌的四种授权方式（authorization grant ）。</p></blockquote><p>也就是说，OAuth 2.0 规定了四种获得令牌的流程。你可以选择最适合自己的那一种，向第三方应用颁发令牌。下面就是这四种授权方式。</p><blockquote><ul><li><p>授权码（authorization-code）</p></li><li><p>隐藏式（implicit）</p></li><li><p>密码式（password）：</p></li><li><p>客户端凭证（client credentials）</p></li></ul></blockquote><p>注意，不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：客户端 ID（client ID）和客户端密钥（client secret）。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的。</p><h2 id="第一种授权方式：授权码"><a href="#第一种授权方式：授权码" class="headerlink" title="第一种授权方式：授权码"></a>第一种授权方式：授权码</h2><p>授权码（authorization code）方式，指的是第三方应用先申请一个授权码，然后再用该码获取令牌。</p><p>这种方式是最常用的流程，安全性也最高，它适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。</p><p>第一步，A 网站提供一个链接，用户点击后就会跳转到 B 网站，授权用户数据给 A 网站使用。下面就是 A 网站跳转 B 网站的一个示意链接。</p><blockquote><p><a href="https://b.com/oauth/authorize" target="_blank" rel="noopener">https://b.com/oauth/authorize</a>?<br>  response_type=code&amp;<br>  client_id=CLIENT_ID&amp;<br>  redirect_uri=CALLBACK_URL&amp;<br>  scope=read</p></blockquote><p>上面 URL 中，<code>response_type</code>参数表示要求返回授权码（<code>code</code>），<code>client_id</code>参数让 B 知道是谁在请求，<code>redirect_uri</code>参数是 B 接受或拒绝请求后的跳转网址，<code>scope</code>参数表示要求的授权范围（这里是只读）。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040902.jpg" alt=""></p><p>第二步，用户跳转后，B 网站会要求用户登录，然后询问是否同意给予 A 网站授权。用户表示同意，这时 B 网站就会跳回<code>redirect_uri</code>参数指定的网址。跳转时，会传回一个授权码，就像下面这样。</p><blockquote><p><a href="https://a.com/callback?code=AUTHORIZATION_CODE" target="_blank" rel="noopener">https://a.com/callback?code=AUTHORIZATION_CODE</a></p></blockquote><p>上面 URL 中，<code>code</code>参数就是授权码。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040907.jpg" alt=""></p><p>第三步，A 网站拿到授权码以后，就可以在后端，向 B 网站请求令牌。</p><blockquote><p><a href="https://b.com/oauth/token" target="_blank" rel="noopener">https://b.com/oauth/token</a>?<br> client_id=CLIENT_ID&amp;<br> client_secret=CLIENT_SECRET&amp;<br> grant_type=authorization_code&amp;<br> code=AUTHORIZATION_CODE&amp;<br> redirect_uri=CALLBACK_URL</p></blockquote><p>上面 URL 中，<code>client_id</code>参数和<code>client_secret</code>参数用来让 B 确认 A 的身份（<code>client_secret</code>参数是保密的，因此只能在后端发请求），<code>grant_type</code>参数的值是<code>AUTHORIZATION_CODE</code>，表示采用的授权方式是授权码，<code>code</code>参数是上一步拿到的授权码，<code>redirect_uri</code>参数是令牌颁发后的回调网址。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040904.jpg" alt=""></p><p>第四步，B 网站收到请求以后，就会颁发令牌。具体做法是向<code>redirect_uri</code>指定的网址，发送一段 JSON 数据。</p><blockquote><p>{<br>  “access_token”:”ACCESS_TOKEN”,<br>  “token_type”:”bearer”,<br>  “expires_in”:2592000,<br>  “refresh_token”:”REFRESH_TOKEN”,<br>  “scope”:”read”,<br>  “uid”:100101,<br>  “info”:{…}}</p></blockquote><p>上面 JSON 数据中，<code>access_token</code>字段就是令牌，A 网站在后端拿到了。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040905.jpg" alt=""></p><h2 id="第二种方式：隐藏式"><a href="#第二种方式：隐藏式" class="headerlink" title="第二种方式：隐藏式"></a>第二种方式：隐藏式</h2><p>有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。RFC 6749 就规定了第二种方式，允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为（授权码）”隐藏式”（implicit）。</p><p>第一步，A 网站提供一个链接，要求用户跳转到 B 网站，授权用户数据给 A 网站使用。</p><blockquote><p><a href="https://b.com/oauth/authorize" target="_blank" rel="noopener">https://b.com/oauth/authorize</a>?<br>  response_type=token&amp;<br>  client_id=CLIENT_ID&amp;<br>  redirect_uri=CALLBACK_URL&amp;<br>  scope=read</p></blockquote><p>上面 URL 中，<code>response_type</code>参数为<code>token</code>，表示要求直接返回令牌。</p><p>第二步，用户跳转到 B 网站，登录后同意给予 A 网站授权。这时，B 网站就会跳回<code>redirect_uri</code>参数指定的跳转网址，并且把令牌作为 URL 参数，传给 A 网站。</p><blockquote><p><a href="https://a.com/callback#token=ACCESS_TOKEN" target="_blank" rel="noopener">https://a.com/callback#token=ACCESS_TOKEN</a></p></blockquote><p>上面 URL 中，<code>token</code>参数就是令牌，A 网站因此直接在前端拿到令牌。</p><p>注意，令牌的位置是 URL 锚点（fragment），而不是查询字符串（querystring），这是因为 OAuth 2.0 允许跳转网址是 HTTP 协议，因此存在”中间人攻击”的风险，而浏览器跳转时，锚点不会发到服务器，就减少了泄漏令牌的风险。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040906.jpg" alt=""></p><p>这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。</p><h2 id="第三种方式：密码式"><a href="#第三种方式：密码式" class="headerlink" title="第三种方式：密码式"></a>第三种方式：密码式</h2><p>如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为”密码式”（password）。</p><p>第一步，A 网站要求用户提供 B 网站的用户名和密码。拿到以后，A 就直接向 B 请求令牌。</p><blockquote><p><a href="https://oauth.b.com/token" target="_blank" rel="noopener">https://oauth.b.com/token</a>?<br>  grant_type=password&amp;<br>  username=USERNAME&amp;<br>  password=PASSWORD&amp;<br>  client_id=CLIENT_ID</p></blockquote><p>上面 URL 中，<code>grant_type</code>参数是授权方式，这里的<code>password</code>表示”密码式”，<code>username</code>和<code>password</code>是 B 的用户名和密码。</p><p>第二步，B 网站验证身份通过后，直接给出令牌。注意，这时不需要跳转，而是把令牌放在 JSON 数据里面，作为 HTTP 回应，A 因此拿到令牌。</p><p>这种方式需要用户给出自己的用户名/密码，显然风险很大，因此只适用于其他授权方式都无法采用的情况，而且必须是用户高度信任的应用。</p><h2 id="第四种方式：凭证式"><a href="#第四种方式：凭证式" class="headerlink" title="第四种方式：凭证式"></a>第四种方式：凭证式</h2><p>最后一种方式是凭证式（client credentials），适用于没有前端的命令行应用，即在命令行下请求令牌。</p><p>第一步，A 应用在命令行向 B 发出请求。</p><blockquote><p><a href="https://oauth.b.com/token" target="_blank" rel="noopener">https://oauth.b.com/token</a>?<br>  grant_type=client_credentials&amp;<br>  client_id=CLIENT_ID&amp;<br>  client_secret=CLIENT_SECRET</p></blockquote><p>上面 URL 中，<code>grant_type</code>参数等于<code>client_credentials</code>表示采用凭证式，<code>client_id</code>和<code>client_secret</code>用来让 B 确认 A 的身份。</p><p>第二步，B 网站验证通过以后，直接返回令牌。</p><p>这种方式给出的令牌，是针对第三方应用的，而不是针对用户的，即有可能多个用户共享同一个令牌。</p><h2 id="令牌的使用"><a href="#令牌的使用" class="headerlink" title="令牌的使用"></a>令牌的使用</h2><p>A 网站拿到令牌以后，就可以向 B 网站的 API 请求数据了。</p><p>此时，每个发到 API 的请求，都必须带有令牌。具体做法是在请求的头信息，加上一个<code>Authorization</code>字段，令牌就放在这个字段里面。</p><blockquote><p>curl -H “Authorization: Bearer ACCESS_TOKEN” \“<a href="https://api.b.com&quot;" target="_blank" rel="noopener">https://api.b.com&quot;</a></p></blockquote><p>上面命令中，<code>ACCESS_TOKEN</code>就是拿到的令牌。</p><h2 id="更新令牌"><a href="#更新令牌" class="headerlink" title="更新令牌"></a>更新令牌</h2><p>令牌的有效期到了，如果让用户重新走一遍上面的流程，再申请一个新的令牌，很可能体验不好，而且也没有必要。OAuth 2.0 允许用户自动更新令牌。</p><p>具体方法是，B 网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据，另一个用于获取新的令牌（refresh token 字段）。令牌到期前，用户使用 refresh token 发一个请求，去更新令牌。</p><blockquote><p><a href="https://b.com/oauth/token" target="_blank" rel="noopener">https://b.com/oauth/token</a>?<br>  grant_type=refresh_token&amp;<br>  client_id=CLIENT_ID&amp;<br>  client_secret=CLIENT_SECRET&amp;<br>  refresh_token=REFRESH_TOKEN</p></blockquote><p>上面 URL 中，<code>grant_type</code>参数为<code>refresh_token</code>表示要求更新令牌，<code>client_id</code>参数和<code>client_secret</code>参数用于确认身份，<code>refresh_token</code>参数就是用于更新令牌的令牌。</p><p>B 网站验证通过以后，就会颁发新的令牌。</p><p>写到这里，颁发令牌的四种方式就介绍完了。<a href="http://www.ruanyifeng.com/blog/2019/04/github-oauth.html" target="_blank" rel="noopener">下一篇文章</a>会编写一个真实的 Demo，演示如何通过 OAuth 2.0 向 GitHub 的 API 申请令牌，然后再用令牌获取数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者： &lt;a href=&quot;http://www.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;日期： &lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/0
      
    
    </summary>
    
    
    
      <category term="认证授权" scheme="https://kanchai.club/tags/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 第三方登录示例教程！</title>
    <link href="https://kanchai.club/2020/04/01/GitHub_OAuth_%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E7%A4%BA%E4%BE%8B%E6%95%99%E7%A8%8B/"/>
    <id>https://kanchai.club/2020/04/01/GitHub_OAuth_%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E7%A4%BA%E4%BE%8B%E6%95%99%E7%A8%8B/</id>
    <published>2020-04-01T03:34:33.147Z</published>
    <updated>2020-04-01T03:34:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2019/04/" target="_blank" rel="noopener">2019年4月21日</a></p><p>这组 OAuth 系列教程，<a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html" target="_blank" rel="noopener">第一篇</a>介绍了基本概念，<a href="http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html" target="_blank" rel="noopener">第二篇</a>介绍了获取令牌的四种方式，今天演示一个实例，如何通过 OAuth 获取 API 数据。</p><p>很多网站登录时，允许使用第三方网站的身份，这称为”第三方登录”。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019042101.jpg" alt=""></p><p>下面就以 GitHub 为例，写一个最简单的应用，演示第三方登录。</p><h2 id="一、第三方登录的原理"><a href="#一、第三方登录的原理" class="headerlink" title="一、第三方登录的原理"></a>一、第三方登录的原理</h2><p>所谓第三方登录，实质就是 OAuth 授权。用户想要登录 A 网站，A 网站让用户提供第三方网站的数据，证明自己的身份。获取第三方网站的身份数据，就需要 OAuth 授权。</p><p>举例来说，A 网站允许 GitHub 登录，背后就是下面的流程。</p><blockquote><ol><li><p>A 网站让用户跳转到 GitHub。</p></li><li><p>GitHub 要求用户登录，然后询问”A 网站要求获得 xx 权限，你是否同意？”</p></li><li><p>用户同意，GitHub 就会重定向回 A 网站，同时发回一个授权码。</p></li><li><p>A 网站使用授权码，向 GitHub 请求令牌。</p></li><li><p>GitHub 返回令牌.</p></li><li><p>A 网站使用令牌，向 GitHub 请求用户数据。</p></li></ol></blockquote><p>下面就是这个流程的代码实现。</p><h2 id="二、应用登记"><a href="#二、应用登记" class="headerlink" title="二、应用登记"></a>二、应用登记</h2><p>一个应用要求 OAuth 授权，必须先到对方网站登记，让对方知道是谁在请求。</p><p>所以，你要先去 GitHub 登记一下。当然，我已经登记过了，你使用我的登记信息也可以，但为了完整走一遍流程，还是建议大家自己登记。这是免费的。</p><p>访问这个<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">网址</a>，填写登记表。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019042102.jpg" alt=""></p><p>应用的名称随便填，主页 URL 填写<code>http://localhost:8080</code>，跳转网址填写 <code>http://localhost:8080/oauth/redirect</code>。</p><p>提交表单以后，GitHub 应该会返回客户端 ID（client ID）和客户端密钥（client secret），这就是应用的身份识别码。</p><h2 id="三、示例仓库"><a href="#三、示例仓库" class="headerlink" title="三、示例仓库"></a>三、示例仓库</h2><p>我写了一个<a href="https://github.com/ruanyf/node-oauth-demo" target="_blank" rel="noopener">代码仓库</a>，请将它克隆到本地。</p><blockquote><p>$ git clone <a href="mailto:git@github.com">git@github.com</a>:ruanyf/node-oauth-demo.git<br>$ cd node-oauth-demo</p></blockquote><p>两个配置项要改一下，写入上一步的身份识别码。</p><blockquote><ul><li><p><a href="https://github.com/ruanyf/node-oauth-demo/blob/master/index.js#L3" target="_blank" rel="noopener"><code>index.js</code></a>：改掉变量<code>clientID</code> and <code>clientSecret</code></p></li><li><p><a href="https://github.com/ruanyf/node-oauth-demo/blob/master/public/index.html#L16" target="_blank" rel="noopener"><code>public/index.html</code></a>：改掉变量<code>client_id</code></p></li></ul></blockquote><p>然后，安装依赖。</p><blockquote><p>$ npm install</p></blockquote><p>启动服务。</p><blockquote><p>$ node index.js</p></blockquote><p>浏览器访问<code>http://localhost:8080</code>，就可以看到这个示例了。</p><h2 id="四、浏览器跳转-GitHub"><a href="#四、浏览器跳转-GitHub" class="headerlink" title="四、浏览器跳转 GitHub"></a>四、浏览器跳转 GitHub</h2><p>示例的首页很简单，就是一个链接，让用户跳转到 GitHub。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019042103.jpg" alt=""></p><p>跳转的 URL 如下。</p><blockquote><p><a href="https://github.com/login/oauth/authorize" target="_blank" rel="noopener">https://github.com/login/oauth/authorize</a>?<br>  client_id=7e015d8ce32370079895&amp;<br>  redirect_uri=<a href="http://localhost:8080/oauth/redirect" target="_blank" rel="noopener">http://localhost:8080/oauth/redirect</a></p></blockquote><p>这个 URL 指向 GitHub 的 OAuth 授权网址，带有两个参数：<code>client_id</code>告诉 GitHub 谁在请求，<code>redirect_uri</code>是稍后跳转回来的网址。</p><p>用户点击到了 GitHub，GitHub 会要求用户登录，确保是本人在操作。</p><h2 id="五、授权码"><a href="#五、授权码" class="headerlink" title="五、授权码"></a>五、授权码</h2><p>登录后，GitHub 询问用户，该应用正在请求数据，你是否同意授权。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019042104.png" alt=""></p><p>用户同意授权， GitHub 就会跳转到<code>redirect_uri</code>指定的跳转网址，并且带上授权码，跳转回来的 URL 就是下面的样子。</p><blockquote><p><a href="http://localhost:8080/oauth/redirect" target="_blank" rel="noopener">http://localhost:8080/oauth/redirect</a>?<br>  code=859310e7cecc9196f4af</p></blockquote><p>后端收到这个请求以后，就拿到了授权码（<code>code</code>参数）。</p><h2 id="六、后端实现"><a href="#六、后端实现" class="headerlink" title="六、后端实现"></a>六、后端实现</h2><p>示例的<a href="https://github.com/ruanyf/node-oauth-demo/blob/master/index.js" target="_blank" rel="noopener">后端</a>采用 Koa 框架编写，具体语法请看<a href="http://www.ruanyifeng.com/blog/2017/08/koa.html" target="_blank" rel="noopener">教程</a>。</p><p>这里的关键是针对<code>/oauth/redirect</code>的请求，编写一个<a href="https://github.com/ruanyf/node-oauth-demo/blob/master/index.js#L16" target="_blank" rel="noopener">路由</a>，完成 OAuth 认证。</p><blockquote><p>const oauth = async ctx =&gt; {<br>  // …};app.use(route.get(‘/oauth/redirect’, oauth));</p></blockquote><p>上面代码中，<code>oauth</code>函数就是路由的处理函数。下面的代码都写在这个函数里面。</p><p>路由函数的第一件事，是从 URL 取出授权码。</p><blockquote><p>const requestToken = ctx.request.query.code;</p></blockquote><h2 id="七、令牌"><a href="#七、令牌" class="headerlink" title="七、令牌"></a>七、令牌</h2><p>后端使用这个授权码，向 GitHub 请求令牌。</p><blockquote><p>const tokenResponse = await axios({<br>  method: ‘post’,<br>  url: ‘<a href="https://github.com/login/oauth/access_token?&#39;" target="_blank" rel="noopener">https://github.com/login/oauth/access_token?&#39;</a> +<br>    `client_id=${clientID}&amp;` +<br>    `client_secret=${clientSecret}&amp;` +<br>    `code=${requestToken}`,<br>  headers: {<br>    accept: ‘application/json’<br>  }});</p></blockquote><p>上面代码中，GitHub 的令牌接口<code>https://github.com/login/oauth/access_token</code>需要提供三个参数。</p><blockquote><ul><li><p><code>client_id</code>：客户端的 ID</p></li><li><p><code>client_secret</code>：客户端的密钥</p></li><li><p><code>code</code>：授权码</p></li></ul></blockquote><p>作为回应，GitHub 会返回一段 JSON 数据，里面包含了令牌<code>accessToken</code>。</p><blockquote><p>const accessToken = tokenResponse.data.access_token;</p></blockquote><h2 id="八、API-数据"><a href="#八、API-数据" class="headerlink" title="八、API 数据"></a>八、API 数据</h2><p>有了令牌以后，就可以向 API 请求数据了。</p><blockquote><p>const result = await axios({<br>  method: ‘get’,<br>  url: `<a href="https://api.github.com/user\`" target="_blank" rel="noopener">https://api.github.com/user\`</a>,<br>  headers: {<br>    accept: ‘application/json’,<br>    Authorization: `token ${accessToken}`  }});</p></blockquote><p>上面代码中，GitHub API 的地址是<code>https://api.github.com/user</code>，请求的时候必须在 HTTP 头信息里面带上令牌<code>Authorization: token 361507da</code>。</p><p>然后，就可以拿到用户数据，得到用户的身份。</p><blockquote><p>const name = result.data.name;ctx.response.redirect(<code>/welcome.html?name=${name}</code>);</p></blockquote><p>（完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者： &lt;a href=&quot;http://www.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;日期： &lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/0
      
    
    </summary>
    
    
    
      <category term="认证授权" scheme="https://kanchai.club/tags/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>OAuth 2.0 的一个简单解释！</title>
    <link href="https://kanchai.club/2020/04/01/OAuth_2.0_%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/"/>
    <id>https://kanchai.club/2020/04/01/OAuth_2.0_%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/</id>
    <published>2020-04-01T03:27:48.218Z</published>
    <updated>2020-04-01T03:26:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2019/04/" target="_blank" rel="noopener">2019年4月 4日</a></p><p><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">OAuth 2.0</a> 是目前最流行的授权机制，用来授权第三方应用，获取用户数据。</p><p>这个标准比较抽象，使用了很多术语，初学者不容易理解。其实说起来并不复杂，下面我就通过一个简单的类比，帮助大家轻松理解，OAuth 2.0 到底是什么。</p><h2 id="一、快递员问题"><a href="#一、快递员问题" class="headerlink" title="一、快递员问题"></a>一、快递员问题</h2><p>我住在一个大型的居民小区。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040401.jpg" alt=""></p><p>小区有门禁系统。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040402.jpg" alt=""></p><p>进入的时候需要输入密码。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040403.jpg" alt=""></p><p>我经常网购和外卖，每天都有快递员来送货。我必须找到一个办法，让快递员通过门禁系统，进入小区。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040404.jpg" alt=""></p><p>如果我把自己的密码，告诉快递员，他就拥有了与我同样的权限，这样好像不太合适。万一我想取消他进入小区的权力，也很麻烦，我自己的密码也得跟着改了，还得通知其他的快递员。</p><p>有没有一种办法，让快递员能够自由进入小区，又不必知道小区居民的密码，而且他的唯一权限就是送货，其他需要密码的场合，他都没有权限？</p><h2 id="二、授权机制的设计"><a href="#二、授权机制的设计" class="headerlink" title="二、授权机制的设计"></a>二、授权机制的设计</h2><p>于是，我设计了一套授权机制。</p><p>第一步，门禁系统的密码输入器下面，增加一个按钮，叫做”获取授权”。快递员需要首先按这个按钮，去申请授权。</p><p>第二步，他按下按钮以后，屋主（也就是我）的手机就会跳出对话框：有人正在要求授权。系统还会显示该快递员的姓名、工号和所属的快递公司。</p><p>我确认请求属实，就点击按钮，告诉门禁系统，我同意给予他进入小区的授权。</p><p>第三步，门禁系统得到我的确认以后，向快递员显示一个进入小区的令牌（access token）。令牌就是类似密码的一串数字，只在短期内（比如七天）有效。</p><p>第四步，快递员向门禁系统输入令牌，进入小区。</p><p>有人可能会问，为什么不是远程为快递员开门，而要为他单独生成一个令牌？这是因为快递员可能每天都会来送货，第二天他还可以复用这个令牌。另外，有的小区有多重门禁，快递员可以使用同一个令牌通过它们。</p><h2 id="三、互联网场景"><a href="#三、互联网场景" class="headerlink" title="三、互联网场景"></a>三、互联网场景</h2><p>我们把上面的例子搬到互联网，就是 OAuth 的设计了。</p><p>首先，居民小区就是储存用户数据的网络服务。比如，微信储存了我的好友信息，获取这些信息，就必须经过微信的”门禁系统”。</p><p>其次，快递员（或者说快递公司）就是第三方应用，想要穿过门禁系统，进入小区。</p><p>最后，我就是用户本人，同意授权第三方应用进入小区，获取我的数据。</p><p>简单说，OAuth 就是一种授权机制。数据的所有者告诉系统，同意授权第三方应用进入系统，获取这些数据。系统从而产生一个短期的进入令牌（token），用来代替密码，供第三方应用使用。</p><h2 id="四、令牌与密码"><a href="#四、令牌与密码" class="headerlink" title="四、令牌与密码"></a>四、令牌与密码</h2><p>令牌（token）与密码（password）的作用是一样的，都可以进入系统，但是有三点差异。</p><p>（1）令牌是短期的，到期会自动失效，用户自己无法修改。密码一般长期有效，用户不修改，就不会发生变化。</p><p>（2）令牌可以被数据所有者撤销，会立即失效。以上例而言，屋主可以随时取消快递员的令牌。密码一般不允许被他人撤销。</p><p>（3）令牌有权限范围（scope），比如只能进小区的二号门。对于网络服务来说，只读令牌就比读写令牌更安全。密码一般是完整权限。</p><p>上面这些设计，保证了令牌既可以让第三方应用获得权限，同时又随时可控，不会危及系统安全。这就是 OAuth 2.0 的优点。</p><p>注意，只要知道了令牌，就能进入系统。系统一般不会再次确认身份，所以令牌必须保密，泄漏令牌与泄漏密码的后果是一样的。 这也是为什么令牌的有效期，一般都设置得很短的原因。</p><p>OAuth 2.0 对于如何颁发令牌的细节，规定得非常详细。具体来说，一共分成四种授权类型（authorization grant），即四种颁发令牌的方式，适用于不同的互联网场景。<a href="http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html" target="_blank" rel="noopener">下一篇文章</a>，我就来介绍这四种类型，并给出代码实例。</p><p>（完）</p><h3 id="文档信息"><a href="#文档信息" class="headerlink" title="文档信息"></a>文档信息</h3><ul><li><p>版权声明：自由转载-非商用-非衍生-保持署名（<a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" target="_blank" rel="noopener">创意共享3.0许可证</a>）</p></li><li><p>发表日期： 2019年4月 4日</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者： &lt;a href=&quot;http://www.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;日期： &lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/0
      
    
    </summary>
    
    
    
      <category term="认证授权" scheme="https://kanchai.club/tags/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>【57期】面试官问，MySQL建索引需要遵循哪些原则呢？</title>
    <link href="https://kanchai.club/2020/03/25/%E3%80%9057%E6%9C%9F%E3%80%91%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%EF%BC%8CMySQL%E5%BB%BA%E7%B4%A2%E5%BC%95%E9%9C%80%E8%A6%81%E9%81%B5%E5%BE%AA%E5%93%AA%E4%BA%9B%E5%8E%9F%E5%88%99%E5%91%A2%EF%BC%9F/"/>
    <id>https://kanchai.club/2020/03/25/%E3%80%9057%E6%9C%9F%E3%80%91%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%EF%BC%8CMySQL%E5%BB%BA%E7%B4%A2%E5%BC%95%E9%9C%80%E8%A6%81%E9%81%B5%E5%BE%AA%E5%93%AA%E4%BA%9B%E5%8E%9F%E5%88%99%E5%91%A2%EF%BC%9F/</id>
    <published>2020-03-25T03:41:06.399Z</published>
    <updated>2020-03-25T03:35:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-选择唯一性索引"><a href="#1-选择唯一性索引" class="headerlink" title="1.选择唯一性索引"></a>1.选择唯一性索引</h2><p>唯一性索引的值是唯一的，可以更快速的通过该索引来确定某条记录。例如，学生表中学号是具有唯一性的字段。为该字段建立唯一性索引可以很快的确定某个学生的信息。如果使用姓名的话，可能存在同名现象，从而降低查询速度。</p><h2 id="2-为经常需要排序、分组和联合操作的字段建立索引"><a href="#2-为经常需要排序、分组和联合操作的字段建立索引" class="headerlink" title="2.为经常需要排序、分组和联合操作的字段建立索引"></a>2.为经常需要排序、分组和联合操作的字段建立索引</h2><p>经常需要ORDER BY、GROUP BY、DISTINCT和UNION等操作的字段，排序操作会浪费很多时间。如果为其建立索引，可以有效地避免排序操作。</p><h2 id="3-为常作为查询条件的字段建立索引"><a href="#3-为常作为查询条件的字段建立索引" class="headerlink" title="3.为常作为查询条件的字段建立索引"></a>3.为常作为查询条件的字段建立索引</h2><p>如果某个字段经常用来做查询条件，那么该字段的查询速度会影响整个表的查询速度。因此，为这样的字段建立索引，可以提高整个表的查询速度。</p><h2 id="4-限制索引的数目"><a href="#4-限制索引的数目" class="headerlink" title="4.限制索引的数目"></a>4.限制索引的数目</h2><p>索引的数目不是越多越好。每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。修改表时，对索引的重构和更新很麻烦。越多的索引，会使更新表变得很浪费时间。</p><h2 id="5-尽量使用数据量少的索引"><a href="#5-尽量使用数据量少的索引" class="headerlink" title="5.尽量使用数据量少的索引"></a>5.尽量使用数据量少的索引</h2><p>如果索引的值很长，那么查询的速度会受到影响。例如，对一个CHAR(100)类型的字段进行全文检索需要的时间肯定要比对CHAR(10)类型的字段需要的时间要多。</p><h2 id="6-尽量使用前缀来索引"><a href="#6-尽量使用前缀来索引" class="headerlink" title="6.尽量使用前缀来索引"></a>6.尽量使用前缀来索引</h2><p>如果索引字段的值很长，最好使用值的前缀来索引。例如，TEXT和BLOG类型的字段，进行全文检索会很浪费时间。如果只检索字段的前面的若干个字符，这样可以提高检索速度。</p><h2 id="7-删除不再使用或者很少使用的索引"><a href="#7-删除不再使用或者很少使用的索引" class="headerlink" title="7.删除不再使用或者很少使用的索引"></a>7.删除不再使用或者很少使用的索引</h2><p>表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。数据库管理员应当定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</p><h2 id="8-最左前缀匹配原则，非常重要的原则。"><a href="#8-最左前缀匹配原则，非常重要的原则。" class="headerlink" title="8.最左前缀匹配原则，非常重要的原则。"></a>8.最左前缀匹配原则，非常重要的原则。</h2><p>mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a 1=”” and=”” b=”2” c=”“&gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><h2 id="9-和in可以乱序。"><a href="#9-和in可以乱序。" class="headerlink" title="9.=和in可以乱序。"></a>9.=和in可以乱序。</h2><p>比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p><h2 id="10-尽量选择区分度高的列作为索引。"><a href="#10-尽量选择区分度高的列作为索引。" class="headerlink" title="10.尽量选择区分度高的列作为索引。"></a>10.尽量选择区分度高的列作为索引。</h2><p>区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就 是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条 记录</p><h2 id="11-索引列不能参与计算，保持列“干净”。"><a href="#11-索引列不能参与计算，保持列“干净”。" class="headerlink" title="11.索引列不能参与计算，保持列“干净”。"></a>11.索引列不能参与计算，保持列“干净”。</h2><p>比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本 太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);</p><h2 id="12-尽量的扩展索引，不要新建索引。"><a href="#12-尽量的扩展索引，不要新建索引。" class="headerlink" title="12.尽量的扩展索引，不要新建索引。"></a>12.尽量的扩展索引，不要新建索引。</h2><p>比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可</p><p>注意：选择索引的最终目的是为了使查询的速度变快。上面给出的原则是最基本的准则，但不能拘泥于上面的准则。读者要在以后的学习和工作中进行不断的实践。根据应用的实际情况进行分析和判断，选择最合适的索引方式。## 目标</p><p>去除 iconfinder 上 icon 的水印</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>利用水印像素点和原图像素点颜色合并的原理，如果拥有加过水印的图片和水印图片，就可以反向推出原图原像素点的颜色；前提是你得拥有他的水印图片</p><p>来源：<a href="https://blog.csdn.net/u013412790/" target="_blank" rel="noopener">https://blog.csdn.net/u013412790/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-选择唯一性索引&quot;&gt;&lt;a href=&quot;#1-选择唯一性索引&quot; class=&quot;headerlink&quot; title=&quot;1.选择唯一性索引&quot;&gt;&lt;/a&gt;1.选择唯一性索引&lt;/h2&gt;&lt;p&gt;唯一性索引的值是唯一的，可以更快速的通过该索引来确定某条记录。例如，学生表中学号是具
      
    
    </summary>
    
    
    
      <category term="MYSQL" scheme="https://kanchai.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）</title>
    <link href="https://kanchai.club/2020/03/25/%E3%80%9063%E6%9C%9F%E3%80%91%E8%B0%88%E8%B0%88MySQL_%E7%B4%A2%E5%BC%95%EF%BC%8CB+%E6%A0%91%E5%8E%9F%E7%90%86%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%BB%BA%E7%B4%A2%E5%BC%95%E7%9A%84%E5%87%A0%E5%A4%A7%E5%8E%9F%E5%88%99%EF%BC%88MySQL%E9%9D%A2%E8%AF%95%E7%AC%AC%E5%85%AD%E5%BC%B9%EF%BC%89/"/>
    <id>https://kanchai.club/2020/03/25/%E3%80%9063%E6%9C%9F%E3%80%91%E8%B0%88%E8%B0%88MySQL_%E7%B4%A2%E5%BC%95%EF%BC%8CB+%E6%A0%91%E5%8E%9F%E7%90%86%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%BB%BA%E7%B4%A2%E5%BC%95%E7%9A%84%E5%87%A0%E5%A4%A7%E5%8E%9F%E5%88%99%EF%BC%88MySQL%E9%9D%A2%E8%AF%95%E7%AC%AC%E5%85%AD%E5%BC%B9%EF%BC%89/</id>
    <published>2020-03-25T03:41:04.566Z</published>
    <updated>2020-03-25T03:34:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>MYSQL一直了解得都不多，之前写sql准备提交生产环境之前的时候，老员工帮我检查了下sql，让修改了一下存储引擎，当时我使用的是Myisam，后面改成InnoDB了。为什么要改成这样，之前都没有听过存储引擎，于是网上查了一下。</p><p>事实上使用不同的存储引擎也是有很大区别的，下面猿友们可以了解一下。</p><h2 id="一、存储引擎的比较"><a href="#一、存储引擎的比较" class="headerlink" title="一、存储引擎的比较"></a>一、存储引擎的比较</h2><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java1-1584537211.png" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><blockquote><p>注：上面提到的B树索引并没有指出是B-Tree和B+Tree索引，但是B-树和B+树的定义是有区别的。</p></blockquote><p>在 MySQL 中，主要有四种类型的索引，分别为：B-Tree 索引， Hash 索引， Fulltext 索引和 R-Tree 索引。</p><p>B-Tree 索引是 MySQL 数据库中使用最为频繁的索引类型，除了 Archive 存储引擎之外的其他所有的存储引擎都支持 B-Tree 索引。Archive 引擎直到 MySQL 5.1 才支持索引，而且只支持索引单个 AUTO_INCREMENT 列。</p><p>不仅仅在 MySQL 中是如此，实际上在其他的很多数据库管理系统中B-Tree 索引也同样是作为最主要的索引类型，这主要是因为 B-Tree 索引的存储结构在数据库的数据检索中有非常优异的表现。</p><p>一般来说， MySQL 中的 B-Tree 索引的物理文件大多都是以 Balance Tree 的结构来存储的，也就是所有实际需要的数据都存放于 Tree 的 Leaf Node(叶子节点) ，而且到任何一个 Leaf Node 的最短路径的长度都是完全相同的，所以我们大家都称之为 B-Tree 索引。</p><p>当然，可能各种数据库（或 MySQL 的各种存储引擎）在存放自己的 B-Tree 索引的时候会对存储结构稍作改造。如 Innodb 存储引擎的 B-Tree 索引实际使用的存储结构实际上是 B+Tree，也就是在 B-Tree 数据结构的基础上做了很小的改造，在每一个Leaf Node 上面出了存放索引键的相关信息之外，还存储了指向与该 Leaf Node 相邻的后一个 LeafNode 的指针信息（增加了顺序访问指针），这主要是为了加快检索多个相邻 Leaf Node 的效率考虑。</p><p>InnoDB是Mysql的默认存储引擎(Mysql5.5.5之前是MyISAM）</p><p>可能对于没有了解过索引的猿友这样看这篇文章十分吃力，这类猿友有必要先对Mysql索引有个大体的了解。</p><p>接下来我们先看看B-树、B+树的概念。弄清楚，为什么加了索引查询速度会加快？</p><h2 id="二、B-树、B-树概念"><a href="#二、B-树、B-树概念" class="headerlink" title="二、B-树、B+树概念"></a>二、B-树、B+树概念</h2><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p>即二叉搜索树：</p><ol><li><p>所有非叶子结点至多拥有两个儿子（Left和Right）；</p></li><li><p>所有结点存储一个关键字；</p></li><li><p>非叶子结点的左指针指向小于其关键字的子树，右指针指向大于其关键字的子树；</p></li></ol><p>如：</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java8-1584537211.jpeg" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h3><p>是一种多路搜索树（并不是二叉的）：</p><ol><li><p>定义任意非叶子结点最多只有M个儿子；且M&gt;2；</p></li><li><p>根结点的儿子数为[2, M]；</p></li><li><p>除根结点以外的非叶子结点的儿子数为[M/2, M]；</p></li><li><p>每个结点存放至少M/2-1（取上整）和至多M-1个关键字；（至少2个关键字）</p></li><li><p>非叶子结点的关键字个数=指向儿子的指针个数-1；</p></li><li><p>非叶子结点的关键字：K[1], K[2], …, K[M-1]；且K[i] &lt; K[i+1]；</p></li><li><p>非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树；</p></li><li><p>所有叶子结点位于同一层；</p></li></ol><p>如：（M=3）</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java7-1584537211.jpeg" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><p>B-树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点；</p><p><strong>B-树的特性：</strong></p><ol><li><p>关键字集合分布在整颗树中；</p></li><li><p>任何一个关键字出现且只出现在一个结点中；</p></li><li><p>搜索有可能在非叶子结点结束；</p></li><li><p>其搜索性能等价于在关键字全集内做一次二分查找；</p></li><li><p>自动层次控制；</p></li></ol><p>由于限制了除根结点以外的非叶子结点，至少含有M/2个儿子，确保了结点的至少利用率。</p><p>所以B-树的性能总是等价于二分查找（与M值无关），也就没有B树平衡的问题；</p><p>由于M/2的限制，在插入结点时，如果结点已满，需要将结点分裂为两个各占M/2的结点；删除结点时，需将两个不足M/2的兄弟结点合并；</p><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+树"></a>B+树</h3><p>B+树是B-树的变体，也是一种多路搜索树：</p><ol><li><p>其定义基本与B-树同，除了：</p></li><li><p>非叶子结点的子树指针与关键字个数相同；</p></li><li><p>非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树（B-树是开区间）；</p></li><li><p>为所有叶子结点增加一个链指针；</p></li><li><p>所有关键字都在叶子结点出现；</p></li></ol><p>如：（M=3）</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java6-1584537211.jpeg" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><p>B+的搜索与B-树也基本相同，区别是B+树只有达到叶子结点才命中（B-树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找；</p><p><strong>B+的特性：</strong></p><ol><li><p>所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；</p></li><li><p>不可能在非叶子结点命中；</p></li><li><p>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；</p></li><li><p>更适合文件索引系统；</p></li></ol><h2 id="三、建索引的几大原则"><a href="#三、建索引的几大原则" class="headerlink" title="三、建索引的几大原则"></a>三、建索引的几大原则</h2><p>1.最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><p>2.=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p><p>3.尽量选择区分度高的列作为索引,区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录</p><p>4.索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);</p><p>5.尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可</p><p><em>来源：blog.csdn.net/u013142781/article/details/51706790</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MYSQL一直了解得都不多，之前写sql准备提交生产环境之前的时候，老员工帮我检查了下sql，让修改了一下存储引擎，当时我使用的是Myisam，后面改成InnoDB了。为什么要改成这样，之前都没有听过存储引擎，于是网上查了一下。&lt;/p&gt;
&lt;p&gt;事实上使用不同的存储引擎也是有
      
    
    </summary>
    
    
    
      <category term="MYSQL" scheme="https://kanchai.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>【58期】盘点那些面试中最常问的MySQL问题，第一弹！</title>
    <link href="https://kanchai.club/2020/03/25/%E3%80%9058%E6%9C%9F%E3%80%91%E7%9B%98%E7%82%B9%E9%82%A3%E4%BA%9B%E9%9D%A2%E8%AF%95%E4%B8%AD%E6%9C%80%E5%B8%B8%E9%97%AE%E7%9A%84MySQL%E9%97%AE%E9%A2%98%EF%BC%8C%E7%AC%AC%E4%B8%80%E5%BC%B9%EF%BC%81/"/>
    <id>https://kanchai.club/2020/03/25/%E3%80%9058%E6%9C%9F%E3%80%91%E7%9B%98%E7%82%B9%E9%82%A3%E4%BA%9B%E9%9D%A2%E8%AF%95%E4%B8%AD%E6%9C%80%E5%B8%B8%E9%97%AE%E7%9A%84MySQL%E9%97%AE%E9%A2%98%EF%BC%8C%E7%AC%AC%E4%B8%80%E5%BC%B9%EF%BC%81/</id>
    <published>2020-03-25T03:41:02.744Z</published>
    <updated>2020-03-25T03:40:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">1、MySQL中myisam与innodb的区别</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">MyISAM：</strong></p><ul class=" list-paddingleft-2" style="list-style-type: square;">    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">不支持事务，但是每次查询都是原子的；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">支持表级锁，即每次操作对整个表加锁；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">存储表的总行数；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">一个MYISAM表有三个文件：索引文件、表结构文件、数据文件；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;"><span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">采用</span>非<span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">聚集索引，索引文件的数据域存储指向数据文件的指针。</span><span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">辅索引与主索引基本一致，但是辅索引不用保证唯一性。</span></span>        </p>    </li></ul><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">InnoDb：</strong></p><ul class=" list-paddingleft-2" style="list-style-type: square;">    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">支持ACID的事务，支持事务的四种隔离级别；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">支持行级锁及外键约束：因此可以支持写并发；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">不存储总行数；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">一个InnoDb引擎存储在一个文件空间（共享表空间，表大小不受操作系统控制，一个表可能分布在多个文件里），也有可能为多个（设置为独立表空，表大小受操作系统文件大小限制，一般为2G），受操作系统文件大小的限制；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">主键索引采用聚集索引（索引的数据域存储数据文件本身），辅索引的数据域存储主键的值；因此从辅索引查找数据，需要先通过辅索引找到主键值，再访问辅索引；最好使用自增主键，防止插入数据时，为维持B+树结构，文件的大调整。</span>        </p>    </li></ul><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">两者的适用场景：</strong></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    因为MyISAM相对简单所以在效率上要优于InnoDB.如果系统读多，写少。对原子性要求低。那么MyISAM最好的选择。且MyISAM恢复速度快。可直接用备份覆盖恢复。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    如果系统读少，写多的时候，尤其是并发写入高的时候。InnoDB就是首选了。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box;"><em style="box-sizing: border-box;"><span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; color: rgb(255, 0, 0);">扩展问题：myisam与innodb引擎下select count(*)哪个更快，为什么？</span></em></strong></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    知道的童鞋，欢迎留言说出正确答案~</p><h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">2、MySQL INT和CHAR隐式类型转换需要注意什么？</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    主要需要记住下面两点：</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    1、当查询字段是INT类型，如果查询条件为CHAR，将查询条件转换为INT，如果是字符串前导都是数字，将截取前导数字用来比较，如果没有前导数字，则转换为0。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">2.、当查询字段是CHAR/VARCHAR类型，如果查询条件为INT，将查询字段</span>转<span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">换为INT再进行比较，可能会造成全表扫描。</span></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">答案解析</strong></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    有如下一张测试表product，id为int类型，name为varchar类型。</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">+----+----------+| id | name   |+----+----------+|  1 | apple   ||  2 | banana ||  3 | 99cat   |+----+----------+</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    情况1:</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">// 查询条件转化为数字1再比较mysql&gt; select * from product where id = &#39;1abc23&#39;;+----+---------+| id | name  |+----+---------+|  1 | apple  |+----+---------+</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    情况2:</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">// 查询字段全部转化成数字，id:1和id:2字段值转化为0，id:3转化成99，再比较mysql&gt; select * from product where name=0;+----+----------+| id | name   |+----+----------+|  1 | apple   ||  2 | banana |+----+----------+</pre><h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">3、MySQL 如何高效率随机获取N条数据？</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    假设表叫做mm_account。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    ID连续的情况下（注意不能带where，否则结果不好）：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT *FROM `mm_account` AS t1 JOIN (SELECT ROUND(RAND() * (SELECT MAX(id) FROM `mm_account`)) AS id) AS t2WHERE t1.id &gt;= t2.idORDER BY t1.id ASC LIMIT 4;</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    ID不连续的情况下：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT * FROM `mm_account` WHERE id &gt;= (SELECT floor(RAND() * (SELECT MAX(id) FROM `mm_account`)))  and city=&quot;city_91&quot; and showSex=1ORDER BY id LIMIT 4;</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    如果有一个字段叫id，最快的方法如下（随机获取5条）：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT * FROM mm_account WHERE id &gt;= ((SELECT MAX(id) FROM mm_account)-(SELECT MIN(id) FROM mm_account)) * RAND() + (SELECT MIN(id) FROM mm_account)limit 5;</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    如果带where语句，上面就不适合了，带where语句请看下面：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT *FROM `mm_account` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `mm_account` where id&lt;1000 )-(SELECT MIN(id) FROM `mm_account` where id&lt;1000 ))+(SELECT MIN(id) FROM `mm_account` where id&lt;1000 )) AS id) AS t2WHERE t1.id &gt;= t2.idORDER BY t1.id LIMIT 5;</pre><h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">4、说说你知道的MySQL的索引类型，并分别简述一下各自的场景。</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">普通索引：</strong>没有任何限制条件的索引，该索引可以在任何数据类型中创建。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">唯一索引：</strong>使用UNIQUE参数可以设置唯一索引。创建该索引时，索引列的值必须唯一，但允许有空值。通过唯一索引，用户可以快速地定位某条记录，主键索引是一种特殊的唯一索引。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">全文索引：</strong>仅可用于 MyISAM 表，针对较大的数据，生成全文索引耗时耗空间。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">空间索引：</strong>只能建立在空间数据类型上。这样可以提高系统获取空间数据类型的效率。仅可用于 MyISAM 表，索引的字段不能为空值。使用SPATIAL参数可以设置索引为空间索引。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">单列索引：</strong>只对应一个字段的索引。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">多列索引：</strong>在表的多个字段上创建一个索引。该索引指向创建时对应的多个字段，用户可以通过这几个字段进行查询，想使用该索引，用户必须使用这些字段中的一个字段。</p><p>    <br/></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 style=&quot;margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text
      
    
    </summary>
    
    
    
      <category term="MYSQL" scheme="https://kanchai.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>POI-Excel的导出导入</title>
    <link href="https://kanchai.club/2020/03/17/excel/"/>
    <id>https://kanchai.club/2020/03/17/excel/</id>
    <published>2020-03-17T15:36:46.688Z</published>
    <updated>2020-03-17T15:33:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://996.icu" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/link-996.icu-red.svg" alt="996.icu"></a><br><a href="https://github.com/996icu/996.ICU/blob/master/LICENSE" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/license-Anti%20996-blue.svg" alt="LICENSE"></a></p><h1 id="excel-poi"><a href="#excel-poi" class="headerlink" title="excel-poi"></a>excel-poi</h1><h4 id="maven使用方式"><a href="#maven使用方式" class="headerlink" title="maven使用方式"></a>maven使用方式</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- excel导入导出 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.stupdit1t&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-excel&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>本工程并没有使用注解方式实现，完全是编码方式。个人觉得注解方式对代码侵入比较大。不如纯编码方便，请以maven版本为主，此源码可能不是最新版本。环境为，POI4.0.1 ，JDK1.8</p></blockquote><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><ol><li>支持严格的单元格校验</li><li>支持数据行的图片导入</li><li>3支持数据回调处理</li><li>03和07都支持</li></ol><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><ol><li>动态表头+表尾</li><li>支持List<Map>数据</li><li>支持图片导出，</li><li>支持复杂对象的导出</li><li>支持回调处理数据后再导出</li><li>支持单元格的样式设置</li><li>支持模板导出</li><li>导出03和07都支持，默认为03，具体看以下使用方式</li><li>支持多sheet导出</li></ol><h3 id="选择03还是07？"><a href="#选择03还是07？" class="headerlink" title="选择03还是07？"></a>选择03还是07？</h3><ol><li>03速度较快，单sheet最大65535行，体积大</li><li>07速度慢，单sheet最大1048576行，体积小</li></ol><h2 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h2><h3 id="导入-1"><a href="#导入-1" class="headerlink" title="导入"></a>导入</h3><p>1.简单的导入:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.获取源文件</span></span><br><span class="line">Workbook wb = WorkbookFactory.create(<span class="keyword">new</span> FileInputStream(<span class="string">"src\\test\\java\\excel\\imports\\import.xlsx"</span>));</span><br><span class="line"><span class="comment">// 2.获取sheet0导入</span></span><br><span class="line">Sheet sheet = wb.getSheetAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 3.生成VO数据</span></span><br><span class="line"><span class="comment">//参数：1.生成VO的class类型;2.校验规则;3.导入的sheet;3.从第几行导入;4.尾部非数据行数量</span></span><br><span class="line">ImportRspInfo&lt;ProjectEvaluate&gt; list = ExcelUtils.parseSheet(ProjectEvaluate<span class="class">.<span class="keyword">class</span>, <span class="title">EvaluateVerifyBuilder</span>.<span class="title">getInstance</span>(), <span class="title">sheet</span>, 3, 2)</span>;</span><br><span class="line"><span class="keyword">if</span> (list.isSuccess()) &#123;</span><br><span class="line"><span class="comment">// 导入没有错误，打印数据</span></span><br><span class="line">System.out.println(JSON.toJSONString(list.getData()));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 导入有错误，打印输出错误</span></span><br><span class="line">System.out.println(list.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.复杂导入，带图片导入，带回调处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.获取源文件</span></span><br><span class="line">Workbook wb = WorkbookFactory.create(<span class="keyword">new</span> FileInputStream(<span class="string">"src\\test\\java\\excel\\imports\\import.xlsx"</span>));</span><br><span class="line"><span class="comment">// 2.获取sheet0导入</span></span><br><span class="line">Sheet sheet = wb.getSheetAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 3.生成VO数据</span></span><br><span class="line"><span class="comment">//参数：1.生成VO的class类型;2.校验规则;3.导入的sheet;3.从第几行导入;4.尾部非数据行数量;5.导入每条数据的回调</span></span><br><span class="line">ImportRspInfo&lt;ProjectEvaluate&gt; list = ExcelUtils.parseSheet(ProjectEvaluate<span class="class">.<span class="keyword">class</span>, <span class="title">ProjectVerifyBuilder</span>.<span class="title">getInstance</span>(), <span class="title">sheet</span>, 3, 2, (<span class="title">row</span>, <span class="title">rowNum</span>) -&gt; </span>&#123;</span><br><span class="line"><span class="comment">//1.此处可以完成更多的校验</span></span><br><span class="line"><span class="keyword">if</span>(row.getAreaName() == <span class="string">"中青旅"</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> POIException(<span class="string">"第"</span>+rowNum+<span class="string">"行，区域名字不能为中青旅！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.图片导入，再ProjectEvaluate定义类型为byte[]的属性就可以，ProjectVerifyBuilder定义ImgVerfiy校验列.就OK了</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (list.isSuccess()) &#123;</span><br><span class="line"><span class="comment">// 导入没有错误，打印数据</span></span><br><span class="line">System.out.println(JSON.toJSONString(list.getData()));</span><br><span class="line"><span class="comment">//打印图片byte数组长度</span></span><br><span class="line"><span class="keyword">byte</span>[] img = list.getData().get(<span class="number">0</span>).getImg();</span><br><span class="line">System.out.println(img);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 导入有错误，打印输出错误</span></span><br><span class="line">System.out.println(list.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.自定义校验器，导入需要校验字段,必须继承AbstractVerifyBuidler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProjectVerifyBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractVerifyBuidler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ProjectVerifyBuilder builder = <span class="keyword">new</span> ProjectVerifyBuilder();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProjectVerifyBuilder <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义列校验实体：提取的字段、提取列、校验规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ProjectVerifyBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"projectName"</span>, <span class="string">"B"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"项目名称"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"areaName"</span>, <span class="string">"C"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"所属区域"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"province"</span>, <span class="string">"D"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"省份"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"city"</span>, <span class="string">"E"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"市"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"people"</span>, <span class="string">"F"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"项目所属人"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"leader"</span>, <span class="string">"G"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"项目领导人"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"scount"</span>, <span class="string">"H"</span>, <span class="keyword">new</span> IntegerVerify(<span class="string">"总分"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"avg"</span>, <span class="string">"I"</span>, <span class="keyword">new</span> DoubleVerify(<span class="string">"历史平均分"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"createTime"</span>, <span class="string">"J"</span>, <span class="keyword">new</span> DateTimeVerify(<span class="string">"创建时间"</span>, <span class="string">"yyyy-MM-dd HH:mm"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"img"</span>, <span class="string">"K"</span>, <span class="keyword">new</span> ImgVerify(<span class="string">"图片"</span>, <span class="keyword">false</span>)));</span><br><span class="line"><span class="comment">// 必须调用</span></span><br><span class="line"><span class="keyword">super</span>.init();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导入示例图"><a href="#导入示例图" class="headerlink" title="导入示例图"></a>导入示例图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1118/104015_a439ba1a_1215820.png" alt="输入图片说明" title="QQ截图20181118104004.png"></p><h3 id="导出-1"><a href="#导出-1" class="headerlink" title="导出"></a>导出</h3><p>0.基础数据构建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单sheet数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> List&lt;ProjectEvaluate&gt; sheetData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * map型数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; mapData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复杂对象数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> List&lt;Student&gt; complexData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多sheet数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> List&lt;List&lt;?&gt;&gt; moreSheetData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.单sheet数据填充</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        ProjectEvaluate obj = <span class="keyword">new</span> ProjectEvaluate();</span><br><span class="line">        obj.setProjectName(<span class="string">"中青旅"</span> + i);</span><br><span class="line">        obj.setAreaName(<span class="string">"华东长三角"</span>);</span><br><span class="line">        obj.setProvince(<span class="string">"河北省"</span>);</span><br><span class="line">        obj.setCity(<span class="string">"保定市"</span>);</span><br><span class="line">        obj.setPeople(<span class="string">"张三"</span> + i);</span><br><span class="line">        obj.setLeader(<span class="string">"李四"</span> + i);</span><br><span class="line">        obj.setScount(<span class="number">50</span>);</span><br><span class="line">        obj.setAvg(<span class="number">60.0</span>);</span><br><span class="line">        obj.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        obj.setImg(ImageParseBytes(<span class="keyword">new</span> File(<span class="string">"src/test/java/excel/export/1.png"</span>)));</span><br><span class="line">        sheetData.add(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.map型数据填充</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; obj = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        obj.put(<span class="string">"name"</span>, <span class="string">"张三"</span> + i);</span><br><span class="line">        obj.put(<span class="string">"age"</span>, <span class="number">5</span> + i);</span><br><span class="line">        mapData.add(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.复杂对象数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 學生</span></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">// 學生所在的班級，用對象</span></span><br><span class="line">        stu.setClassRoom(<span class="keyword">new</span> ClassRoom(<span class="string">"六班"</span>));</span><br><span class="line">        <span class="comment">// 學生的更多信息，用map</span></span><br><span class="line">        Map&lt;String, Object&gt; moreInfo = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        moreInfo.put(<span class="string">"parent"</span>, <span class="keyword">new</span> Parent(<span class="string">"張無忌"</span>));</span><br><span class="line">        stu.setMoreInfo(moreInfo);</span><br><span class="line">        stu.setName(<span class="string">"张三"</span>);</span><br><span class="line">        complexData.add(stu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.多sheet数据填充</span></span><br><span class="line">    moreSheetData.add(sheetData);</span><br><span class="line">    moreSheetData.add(mapData);</span><br><span class="line">    moreSheetData.add(complexData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.简单导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.获取导出的数据体</span></span><br><span class="line"> <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">String[] hearder = &#123;<span class="string">"序号"</span>, <span class="string">"项目名称"</span>, <span class="string">"所属区域"</span>, <span class="string">"省份"</span>, <span class="string">"市"</span>, <span class="string">"项目所属人"</span>, <span class="string">"项目领导人"</span>, <span class="string">"得分"</span>, <span class="string">"平均分"</span>, <span class="string">"创建时间"</span>, <span class="string">"项目图片"</span>&#125;;</span><br><span class="line"><span class="comment">// 2.导出hearder对应的字段设置</span></span><br><span class="line">Column[] column = &#123;Column.field(<span class="string">"projectName"</span>), Column.field(<span class="string">"areaName"</span>), Column.field(<span class="string">"province"</span>),</span><br><span class="line">        Column.field(<span class="string">"city"</span>), Column.field(<span class="string">"people"</span>), Column.field(<span class="string">"leader"</span>), Column.field(<span class="string">"scount"</span>),</span><br><span class="line">        Column.field(<span class="string">"avg"</span>), Column.field(<span class="string">"createTime"</span>),</span><br><span class="line">        <span class="comment">// 项目图片</span></span><br><span class="line">        Column.field(<span class="string">"img"</span>)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(sheetData, ExportRules.simpleRule(column, hearder).title(<span class="string">"项目资源统计"</span>).sheetName(<span class="string">"mysheet1"</span>).autoNum(<span class="keyword">true</span>), <span class="keyword">true</span>,</span><br><span class="line">        (feildName, value, t, customStyle) -&gt; &#123;</span><br><span class="line">            <span class="comment">//此处指向回调逻辑，可以修改写入excel的值,以及单元格样式，如颜色等</span></span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export1.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="1导出图"><a href="#1导出图" class="headerlink" title="1导出图"></a>1导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1215/161804_3ddf0b6b_1215820.png" alt="输入图片说明" title="1.png"></p><p>2.复杂表格导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.表头设置,可以对应excel设计表头，一看就懂</span></span><br><span class="line">HashMap&lt;String, String&gt; headerRules = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">headerRules.put(<span class="string">"1,1,A,K"</span>, <span class="string">"项目资源统计"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,A,A"</span>, <span class="string">"序号"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,2,B,E"</span>, <span class="string">"基本信息"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,B,B"</span>, <span class="string">"项目名称"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,C,C"</span>, <span class="string">"所属区域"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,D,D"</span>, <span class="string">"省份"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,E,E"</span>, <span class="string">"市"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,F,F"</span>, <span class="string">"项目所属人"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,G,G"</span>, <span class="string">"市项目领导人"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,2,H,I"</span>, <span class="string">"分值"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,H,H"</span>, <span class="string">"得分"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,I,I"</span>, <span class="string">"平均分"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,J,J"</span>, <span class="string">"创建时间"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,K,K"</span>, <span class="string">"项目图片"</span>);</span><br><span class="line"><span class="comment">// 2.尾部设置，一般可以用来设计合计栏</span></span><br><span class="line">HashMap&lt;String, String&gt; footerRules = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">footerRules.put(<span class="string">"1,2,A,C"</span>, <span class="string">"注释:"</span>);</span><br><span class="line">footerRules.put(<span class="string">"1,2,D,K"</span>, <span class="string">"导出参考代码！"</span>);</span><br><span class="line"><span class="comment">// 3.导出hearder对应的字段设置</span></span><br><span class="line">Column[] column = &#123;</span><br><span class="line">        Column.field(<span class="string">"projectName"</span>),</span><br><span class="line">        <span class="comment">// 4.1设置此列宽度为10</span></span><br><span class="line">        Column.field(<span class="string">"areaName"</span>).width(<span class="number">10</span>),</span><br><span class="line">        <span class="comment">// 4.2设置此列下拉框数据</span></span><br><span class="line">        Column.field(<span class="string">"province"</span>).width(<span class="number">5</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"陕西省"</span>, <span class="string">"山西省"</span>, <span class="string">"辽宁省"</span>&#125;),</span><br><span class="line">        <span class="comment">// 4.3设置此列水平居右</span></span><br><span class="line">        Column.field(<span class="string">"city"</span>).align(HorizontalAlignment.RIGHT),</span><br><span class="line">        <span class="comment">// 4.4 设置此列垂直居上</span></span><br><span class="line">        Column.field(<span class="string">"people"</span>).valign(VerticalAlignment.TOP),</span><br><span class="line">        <span class="comment">// 4.5 设置此列单元格 自定义校验 只能输入文本</span></span><br><span class="line">        Column.field(<span class="string">"leader"</span>).width(<span class="number">4</span>).verifyCustom(<span class="string">"VALUE(F3:F500)"</span>, <span class="string">"我是提示"</span>),</span><br><span class="line">        <span class="comment">// 4.6设置此列单元格 整数 数据校验 ，同时设置背景色为棕色</span></span><br><span class="line">        Column.field(<span class="string">"scount"</span>).verifyIntNum(<span class="string">"10~20"</span>).backColor(IndexedColors.BROWN),</span><br><span class="line">        <span class="comment">// 4.7设置此列单元格 浮点数 数据校验， 同时设置字体颜色红色</span></span><br><span class="line">        Column.field(<span class="string">"avg"</span>).verifyFloatNum(<span class="string">"10.0~20.0"</span>).color(IndexedColors.RED),</span><br><span class="line">        <span class="comment">// 4.8设置此列单元格 日期 数据校验 ，同时宽度为20、限制用户表格输入、水平居中、垂直居中、背景色、字体颜色</span></span><br><span class="line">        Column.field(<span class="string">"createTime"</span>).width(<span class="number">20</span>).verifyDate(<span class="string">"2000-01-03 12:35~3000-05-06 23:23"</span>)</span><br><span class="line">                .align(HorizontalAlignment.LEFT).valign(VerticalAlignment.CENTER)</span><br><span class="line">                .backColor(IndexedColors.YELLOW).color(IndexedColors.GOLD),</span><br><span class="line">        <span class="comment">// 4.9项目图片</span></span><br><span class="line">        Column.field(<span class="string">"img"</span>)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 4.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(</span><br><span class="line">        sheetData,</span><br><span class="line">        ExportRules.complexRule(column, headerRules).autoNum(<span class="keyword">true</span>).footerRules(footerRules).sheetName(<span class="string">"mysheet2"</span>),</span><br><span class="line">        <span class="keyword">true</span>,</span><br><span class="line">        (fieldName, value, row, col) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"projectName"</span>.equals(fieldName) &amp;&amp; row.getProjectName().equals(<span class="string">"中青旅23"</span>)) &#123;</span><br><span class="line">                col.align(HorizontalAlignment.LEFT);</span><br><span class="line">                col.valign(VerticalAlignment.CENTER);</span><br><span class="line">                col.height(<span class="number">2</span>);</span><br><span class="line">                col.backColor(IndexedColors.RED);</span><br><span class="line">                col.color(IndexedColors.YELLOW);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">// 5.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export2.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="2导出图"><a href="#2导出图" class="headerlink" title="2导出图"></a>2导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1215/161814_61f83ff1_1215820.png" alt="输入图片说明" title="2.png"></p><p>3.复杂的对象级联导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">String[] hearder = &#123;<span class="string">"學生姓名"</span>, <span class="string">"所在班級"</span>, <span class="string">"所在學校"</span>, <span class="string">"更多父母姓名"</span>&#125;;</span><br><span class="line"><span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">Column[] column = &#123;Column.field(<span class="string">"name"</span>), Column.field(<span class="string">"classRoom.name"</span>), Column.field(<span class="string">"classRoom.school.name"</span>),</span><br><span class="line">        Column.field(<span class="string">"moreInfo.parent.name"</span>),&#125;;</span><br><span class="line"><span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(complexData, ExportRules.simpleRule(column, hearder).title(<span class="string">"學生基本信息"</span>), <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export3.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="3导出图"><a href="#3导出图" class="headerlink" title="3导出图"></a>3导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1209/193615_b483f034_1215820.png" alt="输入图片说明" title="4.png"></p><p>4.map对象的简单导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">String[] hearder = &#123;<span class="string">"姓名"</span>, <span class="string">"年龄"</span>&#125;;</span><br><span class="line"><span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">Column[] column = &#123;Column.field(<span class="string">"name"</span>),</span><br><span class="line">        Column.field(<span class="string">"age"</span>),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(mapData, ExportRules.simpleRule(column, hearder), <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export4.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="4导出图"><a href="#4导出图" class="headerlink" title="4导出图"></a>4导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1209/193608_c75b81ee_1215820.png" alt="输入图片说明" title="4.png"></p><p>5.模板导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">String[] hearder = &#123;<span class="string">"宝宝姓名"</span>, <span class="string">"宝宝昵称"</span>, <span class="string">"家长姓名"</span>, <span class="string">"手机号码"</span>, <span class="string">"宝宝生日"</span>, <span class="string">"月龄"</span>, <span class="string">"宝宝性别"</span>, <span class="string">"来源渠道"</span>, <span class="string">"市场人员"</span>, <span class="string">"咨询顾问"</span>, <span class="string">"客服顾问"</span>,</span><br><span class="line">    <span class="string">"分配校区"</span>, <span class="string">"备注"</span>&#125;;</span><br><span class="line"><span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">Column[] column = &#123;Column.field(<span class="string">"宝宝姓名"</span>), Column.field(<span class="string">"宝宝昵称"</span>), Column.field(<span class="string">"家长姓名"</span>),</span><br><span class="line">    Column.field(<span class="string">"手机号码"</span>).verifyText(<span class="string">"11~11"</span>, <span class="string">"请输入11位的手机号码！"</span>),</span><br><span class="line">    Column.field(<span class="string">"宝宝生日"</span>).verifyDate(<span class="string">"2000-01-01~3000-12-31"</span>),</span><br><span class="line">    Column.field(<span class="string">"月龄"</span>).width(<span class="number">4</span>).verifyCustom(<span class="string">"VALUE(F3:F6000)"</span>, <span class="string">"月齡格式：如1年2个月则输入14"</span>),</span><br><span class="line">    Column.field(<span class="string">"宝宝性别"</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"男"</span>, <span class="string">"女"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"来源渠道"</span>).width(<span class="number">12</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"品推"</span>, <span class="string">"市场"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"市场人员"</span>).width(<span class="number">6</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"张三"</span>, <span class="string">"李四"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"咨询顾问"</span>).width(<span class="number">6</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"张三"</span>, <span class="string">"李四"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"客服顾问"</span>).width(<span class="number">6</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"大唐"</span>, <span class="string">"银泰"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"分配校区"</span>).width(<span class="number">6</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"大唐"</span>, <span class="string">"银泰"</span>&#125;), Column.field(<span class="string">"备注"</span>)&#125;;</span><br><span class="line"><span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(Collections.emptyList(), ExportRules.simpleRule(column, hearder), <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export5.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="5导出图"><a href="#5导出图" class="headerlink" title="5导出图"></a>5导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1215/180646_50cc4004_1215820.png" alt="输入图片说明" title="5.png"></p><p>6.多sheet合并导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">Workbook emptyWorkbook = ExcelUtils.createEmptyWorkbook(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 2.执行导出到工作簿.1.项目数据2.map数据3.复杂对象数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; moreSheetData.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">        List&lt;ProjectEvaluate&gt; data1 = (ArrayList&lt;ProjectEvaluate&gt;) moreSheetData.get(i);</span><br><span class="line">        <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">        String[] hearder = &#123;<span class="string">"序号"</span>, <span class="string">"项目名称"</span>, <span class="string">"所属区域"</span>, <span class="string">"省份"</span>, <span class="string">"市"</span>, <span class="string">"项目所属人"</span>, <span class="string">"项目领导人"</span>, <span class="string">"得分"</span>, <span class="string">"平均分"</span>, <span class="string">"创建时间"</span>, <span class="string">"项目图片"</span>&#125;;</span><br><span class="line">        <span class="comment">// 2.导出hearder对应的字段设置</span></span><br><span class="line">        Column[] column = &#123;Column.field(<span class="string">"projectName"</span>), Column.field(<span class="string">"areaName"</span>), Column.field(<span class="string">"province"</span>),</span><br><span class="line">                Column.field(<span class="string">"city"</span>), Column.field(<span class="string">"people"</span>), Column.field(<span class="string">"leader"</span>), Column.field(<span class="string">"scount"</span>),</span><br><span class="line">                Column.field(<span class="string">"avg"</span>), Column.field(<span class="string">"createTime"</span>),</span><br><span class="line">                <span class="comment">// 项目图片</span></span><br><span class="line">                Column.field(<span class="string">"img"</span>)</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        ExcelUtils.fillBook(emptyWorkbook, data1, ExportRules.simpleRule(column, hearder).title(<span class="string">"项目资源统计"</span>).sheetName(<span class="string">"mysheet1"</span>).autoNum(<span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; data2 = (ArrayList&lt;Map&lt;String, Object&gt;&gt;) moreSheetData.get(i);</span><br><span class="line">        <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">        String[] hearder = &#123;<span class="string">"姓名"</span>, <span class="string">"年龄"</span>&#125;;</span><br><span class="line">        <span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">        Column[] column = &#123;Column.field(<span class="string">"name"</span>),</span><br><span class="line">                Column.field(<span class="string">"age"</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        ExcelUtils.fillBook(emptyWorkbook, data2, ExportRules.simpleRule(column, hearder).sheetName(<span class="string">"mysheet2"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">        List&lt;Student&gt; data3 = (ArrayList&lt;Student&gt;) moreSheetData.get(i);</span><br><span class="line">        <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">        String[] hearder = &#123;<span class="string">"學生姓名"</span>, <span class="string">"所在班級"</span>, <span class="string">"所在學校"</span>, <span class="string">"更多父母姓名"</span>&#125;;</span><br><span class="line">        <span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">        Column[] column = &#123;Column.field(<span class="string">"name"</span>), Column.field(<span class="string">"classRoom.name"</span>), Column.field(<span class="string">"classRoom.school.name"</span>),</span><br><span class="line">                Column.field(<span class="string">"moreInfo.parent.name"</span>),&#125;;</span><br><span class="line">        <span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">        ExcelUtils.fillBook(emptyWorkbook, data3, ExportRules.simpleRule(column, hearder).title(<span class="string">"學生基本信息"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">emptyWorkbook.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export6.xlsx"</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://996.icu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/link-996.icu-red.svg&quot; alt=&quot;996.icu&quot;&gt;&lt;/a&gt;&lt;
      
    
    </summary>
    
    
      <category term="Java" scheme="https://kanchai.club/categories/Java/"/>
    
    
      <category term="轮子工具" scheme="https://kanchai.club/tags/%E8%BD%AE%E5%AD%90%E5%B7%A5%E5%85%B7/"/>
    
      <category term="POI" scheme="https://kanchai.club/tags/POI/"/>
    
      <category term="Excel" scheme="https://kanchai.club/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>RedisKey设计类</title>
    <link href="https://kanchai.club/2020/03/17/RedisKey%E8%AE%BE%E8%AE%A1%E7%B1%BB/"/>
    <id>https://kanchai.club/2020/03/17/RedisKey%E8%AE%BE%E8%AE%A1%E7%B1%BB/</id>
    <published>2020-03-17T15:36:46.510Z</published>
    <updated>2020-03-17T15:34:22.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.common.utils.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成RedisKey工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年05月07日 15:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisKeyUtil</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主数据系统标识</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX = <span class="string">"ym"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分割字符，默认[:]，使用:可用于rdm分组查看</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_SPLIT_CHAR = <span class="string">":"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> module 模块名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> func   方法名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args   参数..</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(String <span class="keyword">module</span>, String func, String... args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keyBuilder(<span class="keyword">null</span>, <span class="keyword">module</span>, func, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> module 模块名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> func   方法名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> objStr 对象.toString()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(String <span class="keyword">module</span>, String func, String objStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keyBuilder(<span class="keyword">null</span>, <span class="keyword">module</span>, func, <span class="keyword">new</span> String[]&#123;objStr&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix 项目前缀</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> module 模块名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> func   方法名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> objStr 对象.toString()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(String prefix, String <span class="keyword">module</span>, String func, String objStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keyBuilder(prefix, <span class="keyword">module</span>, func, <span class="keyword">new</span> String[]&#123;objStr&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix 项目前缀</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> module 模块名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> func   方法名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args   参数..</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(String prefix, String <span class="keyword">module</span>, String func, String... args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 项目前缀</span></span><br><span class="line"><span class="keyword">if</span> (prefix == <span class="keyword">null</span>) &#123;</span><br><span class="line">prefix = KEY_PREFIX;</span><br><span class="line">&#125;</span><br><span class="line">StringBuilder key = <span class="keyword">new</span> StringBuilder(prefix);</span><br><span class="line"><span class="comment">// KEY_SPLIT_CHAR 为分割字符</span></span><br><span class="line">key.append(KEY_SPLIT_CHAR).append(<span class="keyword">module</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(func)) &#123;</span><br><span class="line">key.append(KEY_SPLIT_CHAR).append(func);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">key.append(KEY_SPLIT_CHAR).append(arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> key.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> redisKeyEnum 枚举对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> objStr       对象.toString()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(RedisKeyEnum redisKeyEnum, String... objStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keyBuilder(redisKeyEnum.getKeyPrefix(), redisKeyEnum.getModule(), redisKeyEnum.getFunc(), objStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>短信发送模板</title>
    <link href="https://kanchai.club/2020/03/17/%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81%E6%A8%A1%E6%9D%BF/"/>
    <id>https://kanchai.club/2020/03/17/%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-03-17T15:36:46.400Z</published>
    <updated>2020-03-17T15:34:27.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.enums.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里云短信模板</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年05月17日 17:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SmsTemplateEnum &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:通用验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">UNIVERSAL_VERIFICATION_CODE(<span class="string">"SMS_173141326"</span>, <span class="string">"您的验证码$&#123;code&#125;，该验证码5分钟内有效，请勿泄漏于他人！"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:身份验证验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">AUTHENTICATION_CODE(<span class="string">"SMS_173191624"</span>, <span class="string">"验证码$&#123;code&#125;，您正在进行身份验证，打死不要告诉别人哦！"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:登录确认验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LOGON_CONFIRMATION_AUTHENTICATION_CODE(<span class="string">"SMS_173191623"</span>, <span class="string">"验证码$&#123;code&#125;，您正在登录，若非本人操作，请勿泄露。"</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:登录异常验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LOGON_EXCEPTION_AUTHENTICATION_CODE(<span class="string">"SMS_173191622"</span>, <span class="string">"验证码$&#123;code&#125;，您正尝试异地登录，若非本人操作，请勿泄露。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:用户注册验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">USER_REGISTRATION_AUTHENTICATION_CODE(<span class="string">"SMS_173191621"</span>, <span class="string">"验证码$&#123;code&#125;，您正在注册成为新用户，感谢您的支持！"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:修改密码验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MODIFY_PASSWORD_AUTHENTICATION_CODE(<span class="string">"SMS_173191620"</span>, <span class="string">"验证码$&#123;code&#125;，您正在尝试修改登录密码，请妥善保管账户信息。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:信息变更验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">INFORMATION_CHANGE_VERIFICATION_CODE(<span class="string">"SMS_173191619"</span>, <span class="string">"验证码$&#123;code&#125;，您正在尝试变更重要信息，请妥善保管账户信息。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:医生资料审核不通过</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：用户资料审核不通过，发送短信告诉用户！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DATA_AUDIT_FAILED(<span class="string">"SMS_174986989"</span>, <span class="string">"抱歉，您暂未通过资质审核，未通过原因：$&#123;p2&#125;。客服电话：$&#123;p3&#125;"</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:医生资料审核通过</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-金额；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：用户资料审核通过，发送短信通知用户！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DATA_AUDIT_SUCCESS(<span class="string">"SMS_174986992"</span>, <span class="string">"恭喜，您已通过资质审核，请登录APP开启您的个人诊所之旅吧，完成首单可获得$&#123;p2&#125;元奖励哦！"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:用户注册通知</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-电话号码；p4-其他号码；p5-金额；p6-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：注册我方亚米健康产品后，发送此短信通知用户注册成功！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">USER_REGISTRATION_NOTICE(<span class="string">"SMS_174986988"</span>, <span class="string">"您已成功注册$&#123;p2&#125;，账号$&#123;p3&#125; ，初始密码 $&#123;p4&#125;。快去亚米健康完成医疗资质认证开启您的线上诊所赢取 $&#123;p5&#125; 元奖励。客服电话：$&#123;p6&#125;。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:电话预约成功</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-其他；p4-时间；p5-时间；p6-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：用户电话预约成功后，发送短信通知用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SUCCESSFUL_TELEPHONE_RESERVATION(<span class="string">"SMS_174991908"</span>, <span class="string">"您预约了$&#123;p2&#125;医生的$&#123;p3&#125;，时间$&#123;p4&#125;，共$&#123;p5&#125;分钟，到时您会接到$&#123;p6&#125;的来电，请保持电话畅通。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:图文问诊支付成功</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-金额；p3-其他；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：图文问诊支付成功后，向用户发送短信通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SUCCESSFUL_PAYMENT_FOR_CONSULTATION(<span class="string">"SMS_174991905"</span>, <span class="string">"您刚支付了$&#123;p2&#125;元向$&#123;p3&#125;医生医生提问。可在我的问诊/当前问诊中找到该问题，查看医生回复。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:图问问诊医生首次回复</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-其他号码；p4-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：图问问诊医生首次回复后，需要发送短信告诉用户，让用户及时查看订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DOCTOR_FIRST_REPLY(<span class="string">"SMS_174986972"</span>, <span class="string">"医生$&#123;p2&#125;回复了您的问题，请您及时查看并进行后续交流。问题将在$&#123;p3&#125;小时后关闭。 有疑问请联系客服 $&#123;p4&#125;。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:问诊电话开始短信提醒</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-其他；p4-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：问诊电话服务快要开始的时候，向患者发送短信提醒。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">INQUIRY_TELEPHONE_START_SHORT_MESSAGE_REMINDER(<span class="string">"SMS_174991891"</span>, <span class="string">"您预约了$&#123;p2&#125;医生的$&#123;p3&#125;服务即将开始，请您合理按排时间，注意接听。到时您会接到$&#123;p4&#125;的来电，请保持电话畅通。"</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:患者预约成功推送</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p0-其他；p1-其他；p2-时间；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：患者预约成功推送短信给医生，让医生及时联系患者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SUCCESSFUL_PUSH_OF_PATIENT_APPOINTMENT(<span class="string">"SMS_175245305"</span>, <span class="string">"$&#123;p0&#125;医生您好，$&#123;p1&#125;患者预约了电话问诊服务，请于$&#123;p2&#125;在亚米医疗APP端拨打电话"</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:医生电话问诊即将开始通知</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p0-其他；p1-其他；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：医生电话问诊即将开始通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DOCTOR_S_TELEPHONE_CONSULTATION_IS_ABOUT_TO_START(<span class="string">"SMS_175240289"</span>, <span class="string">"$&#123;p0&#125;医生您好，$&#123;p1&#125;患者预约的电话问诊服务即将开始，请及时拨打电话。"</span>),</span><br><span class="line">;</span><br><span class="line"><span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SmsTemplateEnum<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SmsTemplateEnum</span><span class="params">(String code, String content)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.code = code;</span><br><span class="line"><span class="keyword">this</span>.content = content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输入对应模板的参数，生成JSON格式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prams</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buildParams</span><span class="params">(Object... prams)</span> </span>&#123;</span><br><span class="line">JSONObject buildParams = <span class="keyword">new</span> JSONObject();</span><br><span class="line">String content = <span class="keyword">this</span>.content;</span><br><span class="line">Pattern pattern = Pattern.compile(<span class="string">"\\$\\&#123;[^&#125;]*\\&#125;"</span>);</span><br><span class="line">Matcher matcher = pattern.matcher(content);</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">List&lt;String&gt; logs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">String group = matcher.group(<span class="number">0</span>);</span><br><span class="line">logs.add(group);</span><br><span class="line">String key = group.replaceAll(<span class="string">"\\$|\\&#123;|\\&#125;"</span>, <span class="string">""</span>);</span><br><span class="line">buildParams.put(key, prams[index]);</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; logs.size(); i++) &#123;</span><br><span class="line">content = content.replace(logs.get(i), String.valueOf(prams[i]));</span><br><span class="line">&#125;</span><br><span class="line">String result = buildParams.toJSONString();</span><br><span class="line">LOGGER.info(<span class="string">"发送SMS内容为：&#123;&#125;"</span>, content);</span><br><span class="line">LOGGER.info(<span class="string">"发送SMS参数为：&#123;&#125;"</span>, result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据code获取验证码发送模板</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SmsTemplateEnum <span class="title">getCodeTemp</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">SmsTemplateEnum codeTemp = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">switch</span> (code) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"01"</span>:</span><br><span class="line"><span class="comment">//身份验证</span></span><br><span class="line">codeTemp = SmsTemplateEnum.AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"02"</span>:</span><br><span class="line"><span class="comment">//正常登录</span></span><br><span class="line">codeTemp = SmsTemplateEnum.LOGON_CONFIRMATION_AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"03"</span>:</span><br><span class="line"><span class="comment">//登录异常</span></span><br><span class="line">codeTemp = SmsTemplateEnum.LOGON_EXCEPTION_AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"04"</span>:</span><br><span class="line"><span class="comment">//用户注册</span></span><br><span class="line">codeTemp = SmsTemplateEnum.USER_REGISTRATION_AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"05"</span>:</span><br><span class="line"><span class="comment">//修改密码</span></span><br><span class="line">codeTemp = SmsTemplateEnum.MODIFY_PASSWORD_AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"06"</span>:</span><br><span class="line"><span class="comment">//信息变更</span></span><br><span class="line">codeTemp = SmsTemplateEnum.INFORMATION_CHANGE_VERIFICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">codeTemp = SmsTemplateEnum.UNIVERSAL_VERIFICATION_CODE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> codeTemp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq实现延时队列任务</title>
    <link href="https://kanchai.club/2020/03/17/rabbitmq%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1/"/>
    <id>https://kanchai.club/2020/03/17/rabbitmq%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1/</id>
    <published>2020-03-17T15:36:46.276Z</published>
    <updated>2020-03-17T15:34:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>此前实现过一个基于redis和jvm的延时队列任务执行，有个弊端就是吞吐量和可靠性上得不到保障，比如系统重启队列任务丢失，需要人工的加载等等。所以此次利用rabbitmq来实现一个延时。</p><a id="more"></a><p>此前实现过一个基于redis和jvm的延时队列任务执行，有个弊端就是吞吐量和可靠性上得不到保障，比如系统重启队列任务丢失，需要人工的加载等等。所以此次利用rabbitmq来实现一个延时…</p><h4 id="要开发肯定先安装MQ-MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。"><a href="#要开发肯定先安装MQ-MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。" class="headerlink" title="要开发肯定先安装MQ,MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。"></a>要开发肯定先安装MQ,MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#### 1.更新yum源</span><br><span class="line">&gt; yum update</span><br><span class="line"></span><br><span class="line">#### 2.安装docker</span><br><span class="line">&gt; yum install -y docker</span><br><span class="line"></span><br><span class="line">#### 3拉取镜像</span><br><span class="line">&gt; docker pull rabbitmq:management</span><br><span class="line"></span><br><span class="line">#### 4启动容器</span><br><span class="line">&gt; docker run -d --name rabbitmq --privileged=true -p 9158:5672 -p 9159:15672  -v /home/rabbit/data:/var/lib/rabbitmq -v /home/rabbit/log:/var/log/rabbitmq </span><br><span class="line">-v /home/rabbit/plugins:/plugins </span><br><span class="line">--hostname ymRabbit -e RABBITMQ_DEFAULT_VHOST=/ -e RABBITMQ_DEFAULT_USER=ym_rabbit -e RABBITMQ_DEFAULT_PASS=ym_rabbit d8f707718f06</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 5进入容器方式</span><br><span class="line">&gt; docker exec -it 容器ID /bin/bash</span><br><span class="line"></span><br><span class="line">#### 6退出容器</span><br><span class="line">&gt; exit 或者 Ctrl+p+q</span><br><span class="line"></span><br><span class="line">#### 7向容器发送命令</span><br><span class="line">&gt; docker exec -d 13dc7c8ce0bd rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><h4 id="两种延时方式"><a href="#两种延时方式" class="headerlink" title="两种延时方式"></a>两种延时方式</h4><ol><li>死信+普通交换器，依靠消息过期自动进入死信队列，然后消费死信队列的数据这个思路，但是由于这种方式不管设置队列过期时间还是消息过期时间，都不能达到单个队列消息灵活过期的目的。<br>比如，先放入队列10s过期消息，再放入2s过期。mq会检测头部10s是否过期，10s不过期的情况下，2s就算过去也不会跑到死信。</li><li>使用插件rabbitmq_delayed_message_exchange。这个可以很好的解决消息不能灵活过期的问题，但是有个弊端就是很难查看消息堆积的情况，因为他把要发送的延时消息存在本地的分布式mnesia 数据库中，其次过期时间为最大int值，超过这个值得代码判定重复过期设置。</li></ol><h4 id="延时插件的使用方式"><a href="#延时插件的使用方式" class="headerlink" title="延时插件的使用方式"></a>延时插件的使用方式</h4><ol><li>去MQ官网下载插件 ++<a href="https://www.rabbitmq.com/community-plugins.html++(rabbitmq_delayed_message_exchange)" target="_blank" rel="noopener">https://www.rabbitmq.com/community-plugins.html++(rabbitmq_delayed_message_exchange)</a></li><li>把插件放到MQ的安装目录的plugins下</li><li>然后执行rabbitmq-plugins enable rabbitmq_delayed_message_exchange 命令启用插件</li><li>然后就也可以在web页面查看新的交换器x-delayed-message（其实并不是真正意义上的，真正的只有4个）</li><li>然后上代码实现延时任务，配置文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">   rabbitmq:</span><br><span class="line">    host: 192.168.0.245</span><br><span class="line">    port: 9158</span><br><span class="line">    username: ym_rabbit</span><br><span class="line">    password: ym_rabbit</span><br><span class="line">    listener:</span><br><span class="line">      simple:</span><br><span class="line">        acknowledge-mode: manual #手动应答</span><br><span class="line">        retry:</span><br><span class="line">          enabled: true</span><br><span class="line"></span><br><span class="line"># 用户自定义配置</span><br><span class="line">config-center:</span><br><span class="line">  rabbitRuleConfig:</span><br><span class="line">    # 系统标志</span><br><span class="line">    systemMark: local</span><br><span class="line">    # 普通消息</span><br><span class="line">    normalExchange: topic.normal</span><br><span class="line">    # 延时消息</span><br><span class="line">    delayExchange: topic.delay</span><br><span class="line">    # 普通和延时消息死信</span><br><span class="line">    deadExchange: topic.dead</span><br></pre></td></tr></table></figure></li><li>spring中MQ的配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQConfig 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年05月07日 14:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------常量定义-----------------------</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String POINT = <span class="string">"."</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NORMAL = <span class="string">"nml"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAY = <span class="string">"dly"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE = <span class="string">"que"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------交换器定义----------------------------</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通交换器名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String NORMAL_EXCHANGE = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死信交换器名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DEAD_EXCHANGE = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时交换器名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DELAY_EXCHANGE = <span class="string">""</span>;</span><br><span class="line"><span class="comment">//-------------------------队列定义--------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String NORMAL_QUEUE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时队列存放任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DELAY_QUEUE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通死信队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DEAD_NORMAL_QUEUE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时死信队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DEAD_DELAY_QUEUE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ConfigCenterProperties configCenterProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">rabbitTemplate</span><span class="params">(CachingConnectionFactory rabbitListenerContainerFactory)</span> </span>&#123;</span><br><span class="line">RabbitTemplate rabbitTemplate = <span class="keyword">new</span> RabbitTemplate(rabbitListenerContainerFactory);</span><br><span class="line">rabbitTemplate.setUsePublisherConnection(<span class="keyword">true</span>);</span><br><span class="line">rabbitTemplate.setChannelTransacted(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RabbitRuleConfig rabbitRuleConfig = configCenterProperties.getRabbitRuleConfig();</span><br><span class="line">NORMAL_EXCHANGE = rabbitRuleConfig.getNormalExchange() + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DEAD_EXCHANGE = rabbitRuleConfig.getDeadExchange() + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DELAY_EXCHANGE = rabbitRuleConfig.getDelayExchange() + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">NORMAL_QUEUE = rabbitRuleConfig.getNormalExchange() + POINT + QUEUE + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DELAY_QUEUE = rabbitRuleConfig.getDelayExchange() + POINT + QUEUE + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DEAD_NORMAL_QUEUE = rabbitRuleConfig.getDeadExchange() + POINT + QUEUE + POINT + NORMAL + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DEAD_DELAY_QUEUE = rabbitRuleConfig.getDeadExchange() + POINT + QUEUE + POINT + DELAY + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory(ConnectionFactory connectionFactory) &#123;</span><br><span class="line">SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">factory.setConnectionFactory(connectionFactory);</span><br><span class="line">factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">factory.setMessageConverter(<span class="keyword">new</span> Jackson2JsonMessageConverter());</span><br><span class="line">factory.setChannelTransacted(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory2(ConnectionFactory connectionFactory) &#123;</span><br><span class="line">SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">factory.setConnectionFactory(connectionFactory);</span><br><span class="line">factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">factory.setMessageConverter(<span class="keyword">new</span> SerializerMessageConverter());</span><br><span class="line">factory.setChannelTransacted(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------交换器声明start---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TopicExchange <span class="title">normalExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(NORMAL_EXCHANGE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TopicExchange <span class="title">deadExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(DEAD_EXCHANGE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CustomExchange <span class="title">delayExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">args.put(<span class="string">"x-delayed-type"</span>, <span class="string">"topic"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> CustomExchange(DELAY_EXCHANGE, <span class="string">"x-delayed-message"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------交换器声明end---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------队列start---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">deadNormalQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(DEAD_NORMAL_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">deadDelayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(DEAD_DELAY_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">normalQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">params.put(<span class="string">"x-dead-letter-exchange"</span>, DEAD_EXCHANGE);</span><br><span class="line">params.put(<span class="string">"x-dead-letter-routing-key"</span>, DEAD_NORMAL_QUEUE);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(NORMAL_QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">delayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">params.put(<span class="string">"x-dead-letter-exchange"</span>, DEAD_EXCHANGE);</span><br><span class="line">params.put(<span class="string">"x-dead-letter-routing-key"</span>, DEAD_DELAY_QUEUE);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(DELAY_QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, params);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------队列end---------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------绑定start---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingNormalExchange</span><span class="params">(Queue normalQueue, TopicExchange normalExchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(normalQueue).to(normalExchange).with(NORMAL_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingNormalDeadExchange</span><span class="params">(Queue deadNormalQueue, TopicExchange deadExchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(deadNormalQueue).to(deadExchange).with(DEAD_NORMAL_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDelayExchange</span><span class="params">(Queue delayQueue, CustomExchange delayExchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(delayQueue).to(delayExchange).with(DELAY_QUEUE).noargs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDelayDeadExchange</span><span class="params">(Queue deadDelayQueue, TopicExchange deadExchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(deadDelayQueue).to(deadExchange).with(DEAD_DELAY_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------绑定end------------------------------------------</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>7.生产者代码开发,我这里将延时任务和普通消息分开了，所以有2个发送方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息给MQ</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年09月19日 11:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IMessageSenderSV</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(IMessageSenderSV<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送云信消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> messageTask 消息内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(NormalMessageTask messageTask)</span> </span>&#123;</span><br><span class="line">LOG.info(<span class="string">"发送[ &#123;&#125; ]消息到MQ"</span>, messageTask.getMessageTypeEnum().getDescribe());</span><br><span class="line">rabbitTemplate.setMessageConverter(<span class="keyword">new</span> Jackson2JsonMessageConverter());</span><br><span class="line">rabbitTemplate.convertAndSend(RabbitMQConfig.NORMAL_EXCHANGE, RabbitMQConfig.NORMAL_QUEUE, messageTask, (message) -&gt; &#123;</span><br><span class="line">MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">messageProperties.setMessageId(messageTask.getUuid());</span><br><span class="line">messageProperties.setType(messageTask.getMessageTypeEnum().getDescribe());</span><br><span class="line">messageProperties.setContentType(MessageProperties.CONTENT_TYPE_JSON);</span><br><span class="line">String sendTime = DateKit.parseDateToStr(DateKit.YYYY_MM_DD_HH_MM_SS, <span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">// 发送时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"send_time"</span>, sendTime);</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送延时任务给队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> task 任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendDelayTask</span><span class="params">(AbstractDelayedTask task)</span> </span>&#123;</span><br><span class="line">LOG.info(<span class="string">"发送延时任务 [ &#123;&#125;:&#123;&#125; ] 到MQ"</span>, task.getDescribe(), task.getDelay());</span><br><span class="line">rabbitTemplate.setMessageConverter(<span class="keyword">new</span> SerializerMessageConverter());</span><br><span class="line">rabbitTemplate.convertAndSend(RabbitMQConfig.DELAY_EXCHANGE, RabbitMQConfig.DELAY_QUEUE, task, (message) -&gt; &#123;</span><br><span class="line">MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line"><span class="keyword">long</span> nextDelay = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (task.getDelay() &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line"><span class="comment">//如果延时时间大于erlang最大数值，多次延时</span></span><br><span class="line">messageProperties.setDelay(Integer.MAX_VALUE);</span><br><span class="line">nextDelay = task.getDelay() - Integer.MAX_VALUE;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">messageProperties.setDelay(task.getDelay().intValue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下次延时的时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"next_delay"</span>, nextDelay);</span><br><span class="line">messageProperties.setMessageId(task.getUuid());</span><br><span class="line">messageProperties.setType(task.getDescribe());</span><br><span class="line">messageProperties.setContentType(MessageProperties.CONTENT_TYPE_SERIALIZED_OBJECT);</span><br><span class="line">String sendTime = DateKit.parseDateToStr(DateKit.YYYY_MM_DD_HH_MM_SS, <span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">// 发送时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"send_time"</span>, sendTime);</span><br><span class="line">String expirationTime = DateKit.parseDateToStr(DateKit.YYYY_MM_DD_HH_MM_SS, <span class="keyword">new</span> Date(System.currentTimeMillis() + task.getDelay()));</span><br><span class="line"><span class="comment">// 过期时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"expiration_time"</span>, expirationTime);</span><br><span class="line"><span class="comment">// 任务的入参</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"params"</span>, task.getParams().toString());</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多次延时，再次发送任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> task 任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nextDelay 下次延时时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAgain</span><span class="params">(Message task, <span class="keyword">final</span> <span class="keyword">long</span> nextDelay)</span> </span>&#123;</span><br><span class="line">rabbitTemplate.setMessageConverter(<span class="keyword">new</span> SerializerMessageConverter());</span><br><span class="line">rabbitTemplate.convertAndSend(RabbitMQConfig.DELAY_EXCHANGE, RabbitMQConfig.DELAY_QUEUE, task, (message) -&gt; &#123;</span><br><span class="line">MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line"><span class="keyword">long</span> nextDelayNew = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (nextDelay &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line"><span class="comment">//如果延时时间大于erlang最大数值，多次延时</span></span><br><span class="line">messageProperties.setDelay(Integer.MAX_VALUE);</span><br><span class="line">nextDelayNew = nextDelay - Integer.MAX_VALUE;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">messageProperties.setDelay((<span class="keyword">int</span>) nextDelay);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下次延时的时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"next_delay"</span>, nextDelayNew);</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.消费者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费MQ消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年09月18日 10:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@EnableRabbit</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IMessageReceiveSV</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(IMessageReceiveSV<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IMessageSenderSV messageSenderSV;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IYunxinUserSV yunxinUserSV;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;config-center.rabbitRuleConfig.deadExchange&#125;.que.nml.$&#123;config-center.rabbitRuleConfig.systemMark&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String normalDeadQueue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;config-center.rabbitRuleConfig.deadExchange&#125;.que.dly.$&#123;config-center.rabbitRuleConfig.systemMark&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String delayDeadQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"$&#123;config-center.rabbitRuleConfig.normalExchange&#125;.que.$&#123;config-center.rabbitRuleConfig.systemMark&#125;"</span>, containerFactory = <span class="string">"rabbitListenerContainerFactory"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">autoNormalMsg</span><span class="params">(@Payload NormalMessageTask messageTask, @Headers Map&lt;String, Object&gt; headers, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">channel.txSelect();</span><br><span class="line"><span class="keyword">boolean</span> success = normalHandle(messageTask);</span><br><span class="line"><span class="keyword">if</span> (success) &#123;</span><br><span class="line">channel.basicAck((<span class="keyword">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="keyword">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">channel.basicReject((<span class="keyword">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">channel.txCommit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动消费普通消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manualConsumptionNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rabbitTemplate.receiveAndReply(normalDeadQueue, (payload) -&gt; &#123;</span><br><span class="line">NormalMessageTask normalMessageTask = (NormalMessageTask) payload;</span><br><span class="line"><span class="keyword">boolean</span> success = normalHandle(normalMessageTask);</span><br><span class="line"><span class="keyword">if</span> (!success) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AmqpException(<span class="string">"普通消息消费异常"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费普通消息方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> messageTask</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">normalHandle</span><span class="params">(NormalMessageTask messageTask)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">MessageTypeEnum messageTypeEnum = messageTask.getMessageTypeEnum();</span><br><span class="line">Object msg = messageTask.getMsg();</span><br><span class="line">LOG.info(<span class="string">"消费消息 [ &#123;&#125; ],消息ID为[ &#123;&#125; ]"</span>, messageTypeEnum.getDescribe(), messageTask.getUuid());</span><br><span class="line"><span class="keyword">switch</span> (messageTypeEnum) &#123;</span><br><span class="line"><span class="keyword">case</span> YUN_XIN: &#123;</span><br><span class="line">yunxinUserSV.syncMessages((String) msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="comment">// do</span></span><br><span class="line">LOG.info(<span class="string">"未知消息:&#123;&#125;"</span>, (String) msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span> (e <span class="keyword">instanceof</span> BusinessException) &#123;</span><br><span class="line">LOG.info(e.getMessage());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">LOG.error(<span class="string">"消费异常:&#123;&#125;"</span>, ExceptionUtil.getExceptionMessage(e));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时消息,执行策略</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 能收到说明已经到时间了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"$&#123;config-center.rabbitRuleConfig.delayExchange&#125;.que.$&#123;config-center.rabbitRuleConfig.systemMark&#125;"</span>, containerFactory = <span class="string">"rabbitListenerContainerFactory2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">autoDelayMsg</span><span class="params">(@Payload Message message, @Headers Map&lt;String, Object&gt; headers, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">channel.txSelect();</span><br><span class="line"><span class="keyword">boolean</span> success = delayHandle(message);</span><br><span class="line"><span class="keyword">if</span> (success) &#123;</span><br><span class="line">channel.basicAck((<span class="keyword">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="keyword">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">channel.basicReject((<span class="keyword">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">channel.txCommit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费延时消息方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">delayHandle</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">Map&lt;String, Object&gt; headers = messageProperties.getHeaders();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 判定是否要多次延时</span></span><br><span class="line"><span class="keyword">long</span> nextDelay = (<span class="keyword">long</span>) headers.get(<span class="string">"next_delay"</span>);</span><br><span class="line"><span class="keyword">if</span> (nextDelay &gt; <span class="number">0</span>) &#123;</span><br><span class="line">messageSenderSV.sendAgain(message, nextDelay);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">byte</span>[] body = message.getBody();</span><br><span class="line"><span class="keyword">if</span> (body != <span class="keyword">null</span> &amp;&amp; body.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//判定为一个有效消息，进行执行</span></span><br><span class="line"><span class="keyword">try</span> (ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(body));) &#123;</span><br><span class="line">AbstractDelayedTask abstractDelayedTask = (AbstractDelayedTask) ois.readObject();</span><br><span class="line">LOG.info(<span class="string">"执行延时任务 [ &#123;&#125; ],消息ID为[ &#123;&#125; ],参数为:&#123;&#125;"</span>, abstractDelayedTask.getDescribe(), abstractDelayedTask.getUuid(), JSONObject.toJSONString(headers));</span><br><span class="line">abstractDelayedTask.excute();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line"><span class="keyword">if</span> (e <span class="keyword">instanceof</span> BusinessException) &#123;</span><br><span class="line">LOG.info(e.getMessage());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">LOG.error(<span class="string">"消费异常:&#123;&#125;"</span>, ExceptionUtil.getExceptionMessage(e));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动消费延时消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manualConsumptionDelay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rabbitTemplate.receiveAndReply(delayDeadQueue, (payload) -&gt; &#123;</span><br><span class="line">AbstractDelayedTask abstractDelayedTask = (AbstractDelayedTask) payload;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">abstractDelayedTask.excute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">LOG.error(ExceptionUtil.getExceptionMessage(e));</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AmqpException(<span class="string">"延时消息异常"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9.延时任务抽象类定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时队列Task</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 创建时间：2018年6月16日 下午3:34:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDelayedTask</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(AbstractDelayedTask<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务唯一性标志</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String uuid = UUID.uuid();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String describe;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多久后执行，单位毫秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Long delay;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法需要执行的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> JSONObject params;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractDelayedTask</span><span class="params">(String describe, <span class="keyword">long</span> delay, JSONObject params)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.describe = describe;</span><br><span class="line"><span class="keyword">this</span>.delay = delay;</span><br><span class="line"><span class="keyword">this</span>.params = params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">LOG.info(<span class="string">"执行延时任务开始===========》&#123;&#125;"</span>, describe);</span><br><span class="line"><span class="keyword">this</span>.run();</span><br><span class="line">LOG.info(<span class="string">"执行延时任务结束===========》&#123;&#125;"</span>, describe);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>使用方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//15分钟未支付取消订单操作</span></span><br><span class="line">JSONObject params = <span class="keyword">new</span> JSONObject();</span><br><span class="line">params.put(<span class="string">"id"</span>,<span class="string">"订单ID"</span>);</span><br><span class="line">UnPayCancelOrderTask unPayCancelOrderTask = <span class="keyword">new</span> UnPayCancelOrderTask(<span class="string">"下单后不支付自动取消订单"</span>, TimeUnit.MINUTES.toMillis(<span class="number">15</span>), params);</span><br><span class="line">messageSenderSV.sendDelayTask(unPayCancelOrderTask);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此前实现过一个基于redis和jvm的延时队列任务执行，有个弊端就是吞吐量和可靠性上得不到保障，比如系统重启队列任务丢失，需要人工的加载等等。所以此次利用rabbitmq来实现一个延时。&lt;/p&gt;
    
    </summary>
    
    
      <category term="轮子" scheme="https://kanchai.club/categories/%E8%BD%AE%E5%AD%90/"/>
    
    
      <category term="rabbitMQ" scheme="https://kanchai.club/tags/rabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>基于注解的Redis分布式锁</title>
    <link href="https://kanchai.club/2020/03/17/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://kanchai.club/2020/03/17/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2020-03-17T15:36:46.103Z</published>
    <updated>2020-03-17T15:34:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于之前用redis的lua脚本来实现安全的分布式锁,发现代码是加锁虽然灵活，但是非常的不便捷。每次需要加锁的时候，都要写出非常多的重复性代码。遂…………</p><a id="more"></a><ul><li>为什么使用基于注解的方式？</li></ul><p>基于之前用redis的lua脚本来实现安全的分布式锁,发现代码是加锁虽然灵活，但是非常的不便捷。每次需要加锁的时候，都要写出非常多的重复性代码。遂考虑利用AOP的方式，完成这一重复性的工作。<br>在没利用注解之前加锁方式如下,基本每次都要这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会话ID</span></span><br><span class="line">String uuid = UUID.uuid();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> getLock = RedisLockUtil.tryGetDistributedLock(key, uuid, <span class="number">5000</span>);</span><br><span class="line"><span class="keyword">if</span> (getLock) &#123;</span><br><span class="line">    <span class="comment">//如果获取锁，执行业务代码</span></span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">RedisLockUtil.releaseDistributedLock(key, uuid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于注解的使用放入如下，比较便捷</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Locker(key &#x3D; RedisKeyEnum.POOL_ORDER_LOCK, paramExp &#x3D; &quot;0&quot;, noGetMsg &#x3D; &quot;老铁来晚了!&quot;)</span><br><span class="line">public GrabAndAnswerVo grabOrderAnswer(String orderId, RedisKeyEnum poolType, User currentUser) &#123;</span><br><span class="line">Long workId &#x3D; orderExist(poolType, orderId);</span><br><span class="line">return doctorGrabOrderAnswer(poolType, orderId, currentUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下面介绍以下代码</li></ul><ol><li>首先AOP的使用方式我定义为利用注解来判断是否需要加锁，类似事务的方式，我们定义一个Locker注解,这个注解的功能可以看代码;</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 锁注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 625</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Locker &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要锁定的Key</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">RedisKeyEnum <span class="title">key</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要锁定的参数</span></span><br><span class="line"><span class="comment"> * 格式:</span></span><br><span class="line"><span class="comment"> * 0    表示一个参数toString</span></span><br><span class="line"><span class="comment"> * 0?payOrder    表示一个参数toString，且额外拼接锁定的Key为payOrder</span></span><br><span class="line"><span class="comment"> * 0#name 表示第一个参数的name字段</span></span><br><span class="line"><span class="comment"> * 0#name?payOrder  表示第一个参数的name字段，且额外拼接锁定的Key为payOrder</span></span><br><span class="line"><span class="comment"> * 0#name+1#name?payOrder表示第一个参数的name字段+第二个参数的name字段，且额外拼接锁定的Key为payOrder</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">paramExp</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务超时自动释放锁的时间,应该大于正常业务执行时间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">expireTime</span><span class="params">()</span> <span class="keyword">default</span> 10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最小持有锁的时间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">limitTime</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否持续竞争锁，是则阻塞方法直至获取锁，或者达到最大竞争次数释放锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">continueGet</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最大竞争次数。默认0不限次</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxGetNum</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拿不到锁，异常返回信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">noGetMsg</span><span class="params">()</span> <span class="keyword">default</span> "未获取锁"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现AOP的拦截规则</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 锁AOP拦截规则</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">public class LockerAspect &#123;</span><br><span class="line"></span><br><span class="line">private static Logger LOGGER &#x3D; LoggerFactory.getLogger(LockerAspect.class);</span><br><span class="line"></span><br><span class="line">@Pointcut(&quot;@annotation(com.ym.common.utils.annotation.Locker)&quot;)</span><br><span class="line">public void pointcut() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Around(&quot;pointcut()&quot;)</span><br><span class="line">public Object around(ProceedingJoinPoint joinPoint) &#123;</span><br><span class="line">Object proceed &#x3D; null;</span><br><span class="line">long startTime &#x3D; System.currentTimeMillis();</span><br><span class="line">Locker locker &#x3D; getAnnotation(joinPoint, Locker.class);</span><br><span class="line">Object[] args &#x3D; joinPoint.getArgs();</span><br><span class="line">&#x2F;&#x2F; 最大尝试次数</span><br><span class="line">int maxGetNum &#x3D; locker.maxGetNum();</span><br><span class="line">&#x2F;&#x2F; 会话标志</span><br><span class="line">String uuid &#x3D; UUID.uuid();</span><br><span class="line">&#x2F;&#x2F; 锁key</span><br><span class="line">String lockFiled &#x3D; getLockFiled(args, locker.paramExp());</span><br><span class="line">String lockKey &#x3D; RedisKeyUtil.keyBuilder(locker.key(), lockFiled);</span><br><span class="line">&#x2F;&#x2F; 过期时间</span><br><span class="line">long expireTime &#x3D; locker.expireTime();</span><br><span class="line">boolean lock &#x3D; RedisLockUtil.tryGetDistributedLock(lockKey, uuid, expireTime);</span><br><span class="line">int getNum &#x3D; 0;</span><br><span class="line">while (!lock &amp;&amp; locker.continueGet() &amp;&amp; (maxGetNum &#x3D;&#x3D; 0 || getNum &lt; maxGetNum)) &#123;</span><br><span class="line">&#x2F;&#x2F; 如果获取失败，且持续获取，且尝试次数小于最大次数</span><br><span class="line">Threads.sleep(100);</span><br><span class="line">lock &#x3D; RedisLockUtil.tryGetDistributedLock(lockKey, uuid, expireTime);</span><br><span class="line">&#125;</span><br><span class="line">if (!lock) &#123;</span><br><span class="line">throw new BusinessException(locker.noGetMsg());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; -------------------------------before-------------------------</span><br><span class="line">try &#123;</span><br><span class="line">proceed &#x3D; joinPoint.proceed();</span><br><span class="line">&#x2F;&#x2F; -------------------------------after-------------------------</span><br><span class="line">&#x2F;&#x2F; 如果业务时间小于最小持有锁时间，休眠一会</span><br><span class="line">long sleepTime &#x3D; locker.limitTime() - (System.currentTimeMillis() - startTime);</span><br><span class="line">if (sleepTime &gt; 0) &#123;</span><br><span class="line">Threads.sleep(sleepTime);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Throwable throwable) &#123;</span><br><span class="line">throwable.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">&#x2F;&#x2F; 释放锁</span><br><span class="line">RedisLockUtil.releaseDistributedLock(lockKey, uuid);</span><br><span class="line">&#125;</span><br><span class="line">return proceed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 根据表达式获取要锁的字段</span><br><span class="line"> *</span><br><span class="line"> * @param args</span><br><span class="line"> * @param expression 表达式</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">private String getLockFiled(Object[] args, String expression) &#123;</span><br><span class="line">if (args &#x3D;&#x3D; null || args.length &#x3D;&#x3D; 0 || StringUtils.isBlank(expression)) &#123;</span><br><span class="line">throw new UnsupportedOperationException(&quot;Locker所在方法参数为空! 请使用代码锁&quot;);</span><br><span class="line">&#125;</span><br><span class="line">String[] extraParams &#x3D; expression.split(&quot;\\?&quot;);</span><br><span class="line">String extraKey &#x3D; null;</span><br><span class="line">if (extraParams.length &gt; 1) &#123;</span><br><span class="line">extraKey &#x3D; extraParams[1];</span><br><span class="line">expression &#x3D; extraParams[0];</span><br><span class="line">&#125;</span><br><span class="line">String[] commboExpression &#x3D; expression.split(&quot;\\+&quot;);</span><br><span class="line">StringBuilder field &#x3D; new StringBuilder();</span><br><span class="line">for (String commbo : commboExpression) &#123;</span><br><span class="line">String[] split &#x3D; commbo.split(&quot;#&quot;);</span><br><span class="line">int argsNum &#x3D; 0;</span><br><span class="line">try &#123;</span><br><span class="line">if (split.length &#x3D;&#x3D; 1) &#123;</span><br><span class="line">argsNum &#x3D; Integer.parseInt(split[0]);</span><br><span class="line">field.append(String.valueOf(args[argsNum]));</span><br><span class="line">&#125; else &#123;</span><br><span class="line">argsNum &#x3D; Integer.parseInt(split[0]);</span><br><span class="line">Object fieldValue &#x3D; ReflectUtils.getFieldValue(args[argsNum], split[1]);</span><br><span class="line">field.append(String.valueOf(fieldValue));</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">throw new UnsupportedOperationException(&quot;Locker表达式paramExp不正确！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (extraKey !&#x3D; null) &#123;</span><br><span class="line">field.append(extraKey);</span><br><span class="line">&#125;</span><br><span class="line">return field.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 是否存在注解，如果存在就获取</span><br><span class="line"> *&#x2F;</span><br><span class="line">private &lt;T&gt; T getAnnotation(JoinPoint joinPoint, Class&lt;? extends Annotation&gt; t) &#123;</span><br><span class="line">Signature signature &#x3D; joinPoint.getSignature();</span><br><span class="line">MethodSignature methodSignature &#x3D; (MethodSignature) signature;</span><br><span class="line">Method method &#x3D; methodSignature.getMethod();</span><br><span class="line">if (method !&#x3D; null) &#123;</span><br><span class="line">return (T) method.getAnnotation(t);</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于之前用redis的lua脚本来实现安全的分布式锁,发现代码是加锁虽然灵活，但是非常的不便捷。每次需要加锁的时候，都要写出非常多的重复性代码。遂…………&lt;/p&gt;
    
    </summary>
    
    
      <category term="分布式锁" scheme="https://kanchai.club/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
    
      <category term="Redis锁" scheme="https://kanchai.club/tags/Redis%E9%94%81/"/>
    
      <category term="分布式" scheme="https://kanchai.club/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java根据文件流准确判定文件类型</title>
    <link href="https://kanchai.club/2020/03/17/Java%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E6%B5%81%E5%87%86%E7%A1%AE%E5%88%A4%E5%AE%9A%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/"/>
    <id>https://kanchai.club/2020/03/17/Java%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E6%B5%81%E5%87%86%E7%A1%AE%E5%88%A4%E5%AE%9A%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-03-17T15:36:45.980Z</published>
    <updated>2020-03-17T15:34:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>判断文件类型通常可以简单的通过文件的后缀判定，如123.MP3,则判定文件的格式是MP3可播放文件。但是到底能不能播放，其实并不是通过后缀…..</p><a id="more"></a><p>判断文件类型通常可以简单的通过文件的后缀判定，如123.MP3,则判定文件的格式是MP3可播放文件。但是到底能不能播放，其实并不是通过后缀判断的。而是通过文件本身的二进制数据，软件来解析到底一定的目的。话不多说上代码，通过判断文件流的前几个字节，来判断文件的类型。可以自己添加新的类型，类型不一定对，可以自己调试调整一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.common.utils.qiniu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTypeHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;String, String&gt; FILE_TYPE_MAP = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">FileTypeHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">//初始化文件类型信息</span></span><br><span class="line">getAllFileType();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2010-7-1</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Discription:[getAllFileType,常见文件头信息]&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:[shixing_11@sina.com]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFileType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"jpg"</span>, <span class="string">"FFD8FF"</span>); <span class="comment">//JPEG (jpg)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"png"</span>, <span class="string">"89504E47"</span>);  <span class="comment">//PNG (png)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"gif"</span>, <span class="string">"47494638"</span>);  <span class="comment">//GIF (gif)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"tif"</span>, <span class="string">"49492A00"</span>);  <span class="comment">//TIFF (tif)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"bmp"</span>, <span class="string">"424D"</span>); <span class="comment">//Windows Bitmap (bmp)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"dwg"</span>, <span class="string">"41433130"</span>); <span class="comment">//CAD (dwg)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"html"</span>, <span class="string">"68746D6C3E"</span>);  <span class="comment">//HTML (html)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"rtf"</span>, <span class="string">"7B5C727466"</span>);  <span class="comment">//Rich Text Format (rtf)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"xml"</span>, <span class="string">"3C3F786D6C"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"zip"</span>, <span class="string">"504B03041400000008005959104FFE4A759FF1"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"rar"</span>, <span class="string">"52617221"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"psd"</span>, <span class="string">"38425053"</span>);  <span class="comment">//Photoshop (psd)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"eml"</span>, <span class="string">"44656C69766572792D646174653A"</span>);  <span class="comment">//Email [thorough only] (eml)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"dbx"</span>, <span class="string">"CFAD12FEC5FD746F"</span>);  <span class="comment">//Outlook Express (dbx)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"pst"</span>, <span class="string">"2142444E"</span>);  <span class="comment">//Outlook (pst)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"xls"</span>, <span class="string">"D0CF11E0A1B11AE1000000000000000000000000000000003B"</span>);  <span class="comment">//MS Word</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"xlsx"</span>, <span class="string">"504B03041400060008000000210097454E26A"</span>);  <span class="comment">//MS Word</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"docx"</span>, <span class="string">"504B030414000600080000002100DFA4D26C5A"</span>);  <span class="comment">//MS Excel 注意：word 和 excel的文件头一样</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"pptx"</span>, <span class="string">"504B030414000600080000002100DFCC18F5AD"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"doc"</span>, <span class="string">"D0CF11E0A1B11AE1000000000000000000000000000000003E000300FEFF090006000000000000000000000001"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"ppt"</span>, <span class="string">"D0CF11E0A1B11AE1000000000000000000000000000000003E000300FEFF090006000000000000000000000003"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mdb"</span>, <span class="string">"5374616E64617264204A"</span>);  <span class="comment">//MS Access (mdb)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"wpd"</span>, <span class="string">"FF575043"</span>); <span class="comment">//WordPerfect (wpd)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"eps"</span>, <span class="string">"252150532D41646F6265"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"ps"</span>, <span class="string">"252150532D41646F6265"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"pdf"</span>, <span class="string">"255044462D312E"</span>);  <span class="comment">//Adobe Acrobat (pdf)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"qdf"</span>, <span class="string">"AC9EBD8F"</span>);  <span class="comment">//Quicken (qdf)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"pwl"</span>, <span class="string">"E3828596"</span>);  <span class="comment">//Windows Password (pwl)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"wav"</span>, <span class="string">"57415645,52494646"</span>);  <span class="comment">//Wave (wav)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"avi"</span>, <span class="string">"41564920"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"ram"</span>, <span class="string">"2E7261FD"</span>);  <span class="comment">//Real Audio (ram)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"rm"</span>, <span class="string">"2E524D46"</span>);  <span class="comment">//Real Media (rm)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mpg"</span>, <span class="string">"000001BA"</span>);  <span class="comment">//</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mov"</span>, <span class="string">"6D6F6F76"</span>);  <span class="comment">//Quicktime (mov)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"asf"</span>, <span class="string">"3026B2758E66CF11"</span>); <span class="comment">//Windows Media (asf)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mid"</span>, <span class="string">"4D546864"</span>);  <span class="comment">//MIDI (mid)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"aac"</span>, <span class="string">"FFF15C4013"</span>);  <span class="comment">//aac语音</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mp3"</span>, <span class="string">"FFE368"</span>);  <span class="comment">//mp3</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"webm"</span>, <span class="string">"1A45DFA39F42868101"</span>);  <span class="comment">//webm</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"m4a"</span>, <span class="string">"0000001C667479704D344120000000004D3441206D70"</span>);  <span class="comment">//webm</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据文件判定流类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getFileTypeByFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">InputStream is = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> getFileTypeByStream(is);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据流判定文件类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> is</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getFileTypeByStream</span><span class="params">(InputStream is)</span> </span>&#123;</span><br><span class="line">String filetype = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is.read(b);</span><br><span class="line">filetype = getFileTypeByByte(b);</span><br><span class="line">is.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> filetype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2010-7-1</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Discription:[getFileTypeByStream]&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> fileType</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:[shixing_11@sina.com]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getFileTypeByByte</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">String filetypeHex = String.valueOf(getFileHexString(b));</span><br><span class="line">Iterator&lt;Entry&lt;String, String&gt;&gt; entryiterator = FILE_TYPE_MAP.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (entryiterator.hasNext()) &#123;</span><br><span class="line">Entry&lt;String, String&gt; entry = entryiterator.next();</span><br><span class="line">String fileTypeHexValue = entry.getValue();</span><br><span class="line">String[] split = fileTypeHexValue.split(<span class="string">","</span>);</span><br><span class="line"><span class="keyword">for</span> (String sufix : split) &#123;</span><br><span class="line"><span class="keyword">if</span> (filetypeHex.toUpperCase().startsWith(sufix)) &#123;</span><br><span class="line"><span class="keyword">return</span> entry.getKey();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"txt"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2010-7-1</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Discription:[getFileHexString]&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> fileTypeHex</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:[shixing_11@sina.com]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getFileHexString</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">int</span> byteLength = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="keyword">null</span> || b.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b.length &lt; byteLength) &#123;</span><br><span class="line">byteLength = b.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteLength; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> v = b[i] &amp; <span class="number">0xFF</span>;</span><br><span class="line">String hv = Integer.toHexString(v);</span><br><span class="line"><span class="keyword">if</span> (hv.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">stringBuilder.append(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">stringBuilder.append(hv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;判断文件类型通常可以简单的通过文件的后缀判定，如123.MP3,则判定文件的格式是MP3可播放文件。但是到底能不能播放，其实并不是通过后缀…..&lt;/p&gt;
    
    </summary>
    
    
      <category term="轮子" scheme="https://kanchai.club/categories/%E8%BD%AE%E5%AD%90/"/>
    
    
      <category term="文件类型判断" scheme="https://kanchai.club/tags/%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>一些常用的linux基础命令</title>
    <link href="https://kanchai.club/2020/03/17/Linux%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://kanchai.club/2020/03/17/Linux%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2020-03-17T15:36:45.859Z</published>
    <updated>2020-03-17T15:34:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些日常用到的基础命令,防止重复去百度搜索,主要是Centos中,个人记不住的一些命令,ls什么的肯定没有记录</p><a id="more"></a><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><ul><li><p>端口占用情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; lsof -i tcp:8000 </span><br><span class="line">&gt; netstat -tunlp |grep 8000</span><br></pre></td></tr></table></figure></li><li><p>列出所有端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; netstat -ntlp</span><br></pre></td></tr></table></figure></li><li><p>根据程序名找进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ps axu |grep 程序名&#x2F;端口号&#x2F;IP等等</span><br></pre></td></tr></table></figure></li><li><p>查询指定端口是否已开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; firewall-cmd --query-port&#x3D;666&#x2F;tcp</span><br></pre></td></tr></table></figure></li><li><p>查看所有开放的端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; iptables -t filter -L INPUT</span><br></pre></td></tr></table></figure></li></ul><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><ul><li><p>查看防火墙状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; systemctl status firewalld</span><br></pre></td></tr></table></figure></li><li><p>开启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; systemctl start firewalld</span><br><span class="line">&gt; service firewalld start </span><br><span class="line">&gt; ##若遇到无法开启,先用：</span><br><span class="line">&gt; systemctl unmask firewalld.service </span><br><span class="line">&gt; 然后：</span><br><span class="line">&gt; systemctl start firewalld.service</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; systemctl stop firewalld</span><br></pre></td></tr></table></figure></li><li><p>对外开放端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; firewall-cmd --zone&#x3D;public --add-port&#x3D;8080&#x2F;tcp --permanent</span><br><span class="line">&gt;  iptables -I INPUT -p tcp --dport 9150 -j ACCEPT</span><br><span class="line">&gt; ##或者</span><br><span class="line">&gt; sudo vi sysconfig&#x2F;iptables</span><br><span class="line">&gt; ##然后</span><br><span class="line">&gt; -A INPUT -m state --state NEW -m tcp -p tcp --dport 9150 -j ACCEPT</span><br></pre></td></tr></table></figure></li><li><p>查看对外开放的端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; iptables -t filter -L INPUT</span><br></pre></td></tr></table></figure></li><li><p>重启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; firewall-cmd --reload systemctl </span><br><span class="line">&gt; restart firewalld.service；</span><br></pre></td></tr></table></figure></li><li><p>关闭指定端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; firewall-cmd --permanent --remove-port&#x3D;123&#x2F;tcp</span><br></pre></td></tr></table></figure></li></ul><h4 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h4><ul><li><p>关键词查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ##执行的是返回的内容 </span><br><span class="line">&gt; grep 正则 文件目录</span><br></pre></td></tr></table></figure></li><li><p>关键词查找及随后的目录中搜索字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; grep -R 正则 文件目录</span><br></pre></td></tr></table></figure></li></ul><h4 id="jvm相关"><a href="#jvm相关" class="headerlink" title="jvm相关"></a>jvm相关</h4><ul><li>查看JAVA进程并输出JVM参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jps -v</span><br></pre></td></tr></table></figure><ul><li><p>dump堆到文件,format指定输出格式，live指明是活着的对象,file指定文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jmap -dump:live,format&#x3D;b,file&#x3D;dump.hprof 28920</span><br></pre></td></tr></table></figure></li><li><p>查看堆的使用情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jmap -heap 28920</span><br></pre></td></tr></table></figure></li><li><p>查看堆中的对象信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jmap -histo:live 28920 | more</span><br></pre></td></tr></table></figure></li><li><p>查看当前程序的线程快照</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;  jstack -l 11494|more</span><br></pre></td></tr></table></figure></li><li><p>实时查看调整Jvm参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jinfo -flag 11494</span><br></pre></td></tr></table></figure></li></ul><h4 id="系统信息查看"><a href="#系统信息查看" class="headerlink" title="系统信息查看"></a>系统信息查看</h4><ul><li>显示电脑以及操作系统的相关信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; uname -a</span><br></pre></td></tr></table></figure></li><li>正在运行的内核版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat &#x2F;proc&#x2F;version</span><br></pre></td></tr></table></figure></li><li>发行版本信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat &#x2F;etc&#x2F;issue</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些日常用到的基础命令,防止重复去百度搜索,主要是Centos中,个人记不住的一些命令,ls什么的肯定没有记录&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://kanchai.club/categories/Linux/"/>
    
    
      <category term="基础命令" scheme="https://kanchai.club/tags/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Jvm" scheme="https://kanchai.club/tags/Jvm/"/>
    
  </entry>
  
</feed>
