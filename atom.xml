<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>每天拾柴火</title>
  
  <subtitle>砍柴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kanchai.club/"/>
  <updated>2020-04-01T03:37:59.000Z</updated>
  <id>https://kanchai.club/</id>
  
  <author>
    <name>625</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>GitHub 第三方登录示例教程！</title>
    <link href="https://kanchai.club/2020/04/01/FFmpeg_%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/"/>
    <id>https://kanchai.club/2020/04/01/FFmpeg_%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86%E5%85%A5%E9%97%A8%E6%95%99%E7%A8%8B/</id>
    <published>2020-04-01T03:38:20.484Z</published>
    <updated>2020-04-01T03:37:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2020/01/" target="_blank" rel="noopener">2020年1月14日</a></p><p><a href="https://www.ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a> 是视频处理最常用的开源软件。</p><p>它功能强大，用途广泛，大量用于视频网站和商业软件（比如 Youtube 和 iTunes），也是许多音频和视频格式的标准编码/解码实现。</p><p><img src="https://www.wangbase.com/blogimg/asset/202001/bg2020011401.jpg" alt=""></p><p>FFmpeg 本身是一个庞大的项目，包含许多组件和库文件，最常用的是它的命令行工具。本文介绍 FFmpeg 命令行如何处理视频，比桌面视频处理软件更简洁高效。</p><p>如果你还没安装，可以根据<a href="https://www.ffmpeg.org/download.html" target="_blank" rel="noopener">官方文档</a> 先完成安装。</p><h2 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h2><p>介绍 FFmpeg 用法之前，需要了解一些视频处理的基本概念。</p><h3 id="1-1-容器"><a href="#1-1-容器" class="headerlink" title="1.1 容器"></a>1.1 容器</h3><p>视频文件本身其实是一个容器（container），里面包括了视频和音频，也可能有字幕等其他内容。</p><p>常见的容器格式有以下几种。一般来说，视频文件的后缀名反映了它的容器格式。</p><blockquote><ul><li><p>MP4</p></li><li><p>MKV</p></li><li><p>WebM</p></li><li><p>AVI</p></li></ul></blockquote><p>下面的命令查看 FFmpeg 支持的容器。</p><blockquote><p>$ ffmpeg -formats</p></blockquote><h3 id="1-2-编码格式"><a href="#1-2-编码格式" class="headerlink" title="1.2 编码格式"></a>1.2 编码格式</h3><p>视频和音频都需要经过编码，才能保存成文件。不同的编码格式（CODEC），有不同的压缩率，会导致文件大小和清晰度的差异。</p><p>常用的视频编码格式如下。</p><blockquote><ul><li><p>H.262</p></li><li><p>H.264</p></li><li><p>H.265</p></li></ul></blockquote><p>上面的编码格式都是有版权的，但是可以免费使用。此外，还有几种无版权的视频编码格式。</p><blockquote><ul><li><p>VP8</p></li><li><p>VP9</p></li><li><p>AV1</p></li></ul></blockquote><p>常用的音频编码格式如下。</p><blockquote><ul><li><p>MP3</p></li><li><p>AAC</p></li></ul></blockquote><p>上面所有这些都是有损的编码格式，编码后会损失一些细节，以换取压缩后较小的文件体积。无损的编码格式压缩出来的文件体积较大，这里就不介绍了。</p><p>下面的命令可以查看 FFmpeg 支持的编码格式，视频编码和音频编码都在内。</p><blockquote><p>$ ffmpeg -codecs</p></blockquote><h3 id="1-3-编码器"><a href="#1-3-编码器" class="headerlink" title="1.3 编码器"></a>1.3 编码器</h3><p>编码器（encoders）是实现某种编码格式的库文件。只有安装了某种格式的编码器，才能实现该格式视频/音频的编码和解码。</p><p>以下是一些 FFmpeg 内置的视频编码器。</p><blockquote><ul><li><p>libx264：最流行的开源 H.264 编码器</p></li><li><p>NVENC：基于 NVIDIA GPU 的 H.264 编码器</p></li><li><p>libx265：开源的 HEVC 编码器</p></li><li><p>libvpx：谷歌的 VP8 和 VP9 编码器</p></li><li><p>libaom：AV1 编码器</p></li></ul></blockquote><p>音频编码器如下。</p><blockquote><ul><li><p>libfdk-aac</p></li><li><p>aac</p></li></ul></blockquote><p>下面的命令可以查看 FFmpeg 已安装的编码器。</p><blockquote><p>$ ffmpeg -encoders</p></blockquote><h2 id="二、FFmpeg-的使用格式"><a href="#二、FFmpeg-的使用格式" class="headerlink" title="二、FFmpeg 的使用格式"></a>二、FFmpeg 的使用格式</h2><p>FFmpeg 的命令行参数非常多，可以分成五个部分。</p><blockquote><p>$ ffmpeg {1} {2} -i {3} {4} {5}</p></blockquote><p>上面命令中，五个部分的参数依次如下。</p><blockquote><ol><li><p>全局参数</p></li><li><p>输入文件参数</p></li><li><p>输入文件</p></li><li><p>输出文件参数</p></li><li><p>输出文件</p></li></ol></blockquote><p>参数太多的时候，为了便于查看，ffmpeg 命令可以写成多行。</p><blockquote><p>$ ffmpeg \[全局参数] \[输入文件参数] \-i [输入文件] \[输出文件参数] \[输出文件]</p></blockquote><p>下面是一个例子。</p><blockquote><p>$ ffmpeg \-y \ # 全局参数-c:a libfdk_aac -c:v libx264 \ # 输入文件参数-i input.mp4 \ # 输入文件-c:v libvpx-vp9 -c:a libvorbis \ # 输出文件参数output.webm # 输出文件</p></blockquote><p>上面的命令将 mp4 文件转成 webm 文件，这两个都是容器格式。输入的 mp4 文件的音频编码格式是 aac，视频编码格式是 H.264；输出的 webm 文件的视频编码格式是 VP9，音频格式是 Vorbis。</p><p>如果不指明编码格式，FFmpeg 会自己判断输入文件的编码。因此，上面的命令可以简单写成下面的样子。</p><blockquote><p>$ ffmpeg -i input.avi output.mp4</p></blockquote><h2 id="三、常用命令行参数"><a href="#三、常用命令行参数" class="headerlink" title="三、常用命令行参数"></a>三、常用命令行参数</h2><p>FFmpeg 常用的命令行参数如下。</p><blockquote><ul><li><p><code>-c</code>：指定编码器</p></li><li><p><code>-c copy</code>：直接复制，不经过重新编码（这样比较快）</p></li><li><p><code>-c:v</code>：指定视频编码器</p></li><li><p><code>-c:a</code>：指定音频编码器</p></li><li><p><code>-i</code>：指定输入文件</p></li><li><p><code>-an</code>：去除音频流</p></li><li><p><code>-vn</code>： 去除视频流</p></li><li><p><code>-preset</code>：指定输出的视频质量，会影响文件的生成速度，有以下几个可用的值 ultrafast, superfast, veryfast, faster, fast, medium, slow, slower, veryslow。</p></li><li><p><code>-y</code>：不经过确认，输出时直接覆盖同名文件。</p></li></ul></blockquote><h2 id="四、常见用法"><a href="#四、常见用法" class="headerlink" title="四、常见用法"></a>四、常见用法</h2><p>下面介绍 FFmpeg 几种常见用法。</p><h3 id="4-1-查看文件信息"><a href="#4-1-查看文件信息" class="headerlink" title="4.1 查看文件信息"></a>4.1 查看文件信息</h3><p>查看视频文件的元信息，比如编码格式和比特率，可以只使用<code>-i</code>参数。</p><blockquote><p>$ ffmpeg -i input.mp4</p></blockquote><p>上面命令会输出很多冗余信息，加上<code>-hide_banner</code>参数，可以只显示元信息。</p><blockquote><p>$ ffmpeg -i input.mp4 -hide_banner</p></blockquote><h3 id="4-2-转换编码格式"><a href="#4-2-转换编码格式" class="headerlink" title="4.2 转换编码格式"></a>4.2 转换编码格式</h3><p>转换编码格式（transcoding）指的是， 将视频文件从一种编码转成另一种编码。比如转成 H.264 编码，一般使用编码器<code>libx264</code>，所以只需指定输出文件的视频编码器即可。</p><blockquote><p>$ ffmpeg -i [input.file] -c:v libx264 output.mp4</p></blockquote><p>下面是转成 H.265 编码的写法。</p><blockquote><p>$ ffmpeg -i [input.file] -c:v libx265 output.mp4</p></blockquote><h3 id="4-3-转换容器格式"><a href="#4-3-转换容器格式" class="headerlink" title="4.3 转换容器格式"></a>4.3 转换容器格式</h3><p>转换容器格式（transmuxing）指的是，将视频文件从一种容器转到另一种容器。下面是 mp4 转 webm 的写法。</p><blockquote><p>$ ffmpeg -i input.mp4 -c copy output.webm</p></blockquote><p>上面例子中，只是转一下容器，内部的编码格式不变，所以使用<code>-c copy</code>指定直接拷贝，不经过转码，这样比较快。</p><h3 id="4-4-调整码率"><a href="#4-4-调整码率" class="headerlink" title="4.4 调整码率"></a>4.4 调整码率</h3><p>调整码率（transrating）指的是，改变编码的比特率，一般用来将视频文件的体积变小。下面的例子指定码率最小为964K，最大为3856K，缓冲区大小为 2000K。</p><blockquote><p>$ ffmpeg \-i input.mp4 \-minrate 964K -maxrate 3856K -bufsize 2000K <br>output.mp4</p></blockquote><h3 id="4-5-改变分辨率（transsizing）"><a href="#4-5-改变分辨率（transsizing）" class="headerlink" title="4.5 改变分辨率（transsizing）"></a>4.5 改变分辨率（transsizing）</h3><p>下面是改变视频分辨率（transsizing）的例子，从 1080p 转为 480p 。</p><blockquote><p>$ ffmpeg \-i input.mp4 \-vf scale=480:-1 <br>output.mp4</p></blockquote><h3 id="4-6-提取音频"><a href="#4-6-提取音频" class="headerlink" title="4.6 提取音频"></a>4.6 提取音频</h3><p>有时，需要从视频里面提取音频（demuxing），可以像下面这样写。</p><blockquote><p>$ ffmpeg \-i input.mp4 \-vn -c:a copy <br>output.aac</p></blockquote><p>上面例子中，<code>-vn</code>表示去掉视频，<code>-c:a copy</code>表示不改变音频编码，直接拷贝。</p><h3 id="4-7-添加音轨"><a href="#4-7-添加音轨" class="headerlink" title="4.7 添加音轨"></a>4.7 添加音轨</h3><p>添加音轨（muxing）指的是，将外部音频加入视频，比如添加背景音乐或旁白。</p><blockquote><p>$ ffmpeg \-i input.aac -i input.mp4 <br>output.mp4</p></blockquote><p>上面例子中，有音频和视频两个输入文件，FFmpeg 会将它们合成为一个文件。</p><h3 id="4-8-截图"><a href="#4-8-截图" class="headerlink" title="4.8 截图"></a>4.8 截图</h3><p>下面的例子是从指定时间开始，连续对1秒钟的视频进行截图。</p><blockquote><p>$ ffmpeg \-y \-i input.mp4 \-ss 00:01:24 -t 00:00:01 <br>output_%3d.jpg</p></blockquote><p>如果只需要截一张图，可以指定只截取一帧。</p><blockquote><p>$ ffmpeg \-ss 01:23:45 \-i input \-vframes 1 -q:v 2 <br>output.jpg</p></blockquote><p>上面例子中，<code>-vframes 1</code>指定只截取一帧，<code>-q:v 2</code>表示输出的图片质量，一般是1到5之间（1 为质量最高）。</p><h3 id="4-9-裁剪"><a href="#4-9-裁剪" class="headerlink" title="4.9 裁剪"></a>4.9 裁剪</h3><p>裁剪（cutting）指的是，截取原始视频里面的一个片段，输出为一个新视频。可以指定开始时间（start）和持续时间（duration），也可以指定结束时间（end）。</p><blockquote><p>$ ffmpeg -ss [start] -i [input] -t [duration] -c copy [output]$ ffmpeg -ss [start] -i [input] -to [end] -c copy [output]</p></blockquote><p>下面是实际的例子。</p><blockquote><p>$ ffmpeg -ss 00:01:50 -i [input] -t 10.5 -c copy [output]$ ffmpeg -ss 2.5 -i [input] -to 10 -c copy [output]</p></blockquote><p>上面例子中，<code>-c copy</code>表示不改变音频和视频的编码格式，直接拷贝，这样会快很多。</p><h3 id="4-10-为音频添加封面"><a href="#4-10-为音频添加封面" class="headerlink" title="4.10 为音频添加封面"></a>4.10 为音频添加封面</h3><p>有些视频网站只允许上传视频文件。如果要上传音频文件，必须为音频添加封面，将其转为视频，然后上传。</p><p>下面命令可以将音频文件，转为带封面的视频文件。</p><blockquote><p>$ ffmpeg \-loop 1 \-i cover.jpg -i input.mp3 \-c:v libx264 -c:a aac -b:a 192k -shortest <br>output.mp4</p></blockquote><p>上面命令中，有两个输入文件，一个是封面图片<code>cover.jpg</code>，另一个是音频文件<code>input.mp3</code>。<code>-loop 1</code>参数表示图片无限循环，<code>-shortest</code>参数表示音频文件结束，输出视频就结束。</p><h2 id="五、参考链接"><a href="#五、参考链接" class="headerlink" title="五、参考链接"></a>五、参考链接</h2><ul><li><p><a href="https://github.com/leandromoreira/ffmpeg-libav-tutorial#chapter-3---transcoding" target="_blank" rel="noopener">FFmpeg libav tutorial</a></p></li><li><p><a href="https://github.com/leandromoreira/digital_video_introduction/blob/master/encoding_pratical_examples.md#split-and-merge-smoothly" target="_blank" rel="noopener">Digital video introduction</a></p></li><li><p><a href="http://slhck.info/ffmpeg-encoding-course/" target="_blank" rel="noopener">FFmpeg encoding and editing course</a></p></li><li><p><a href="http://dragonquest64.blogspot.com/2019/10/making-slideshows-wffmpeg.html" target="_blank" rel="noopener">Making Slideshows w/FFMpeg</a></p></li><li><p><a href="https://itsfoss.com/ffmpeg/" target="_blank" rel="noopener">The Complete Guide for Using ffmpeg in Linux</a></p></li></ul><p>（完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者： &lt;a href=&quot;http://www.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;日期： &lt;a href=&quot;http://www.ruanyifeng.com/blog/2020/0
      
    
    </summary>
    
    
    
      <category term="视频处理" scheme="https://kanchai.club/tags/%E8%A7%86%E9%A2%91%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>OAuth 2.0 的四种方式！</title>
    <link href="https://kanchai.club/2020/04/01/OAuth_2.0_%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://kanchai.club/2020/04/01/OAuth_2.0_%E7%9A%84%E5%9B%9B%E7%A7%8D%E6%96%B9%E5%BC%8F/</id>
    <published>2020-04-01T03:34:33.238Z</published>
    <updated>2020-04-01T03:31:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2019/04/" target="_blank" rel="noopener">2019年4月 9日</a></p><p><a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html" target="_blank" rel="noopener">上一篇文章</a>介绍了 OAuth 2.0 是一种授权机制，主要用来颁发令牌（token）。本文接着介绍颁发令牌的实务操作。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040901.jpg" alt=""></p><p>下面我假定，你已经理解了 OAuth 2.0 的含义和设计思想，否则请先阅读这个系列的<a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html" target="_blank" rel="noopener">上一篇文章</a>。</p><blockquote><p>进入正文之前，插播一则活动消息。</p><p>4月22日（周一）到4月29日（下周一），每天晚上八点都有两小时的免费直播课，体系化介绍高级前端开发知识，网易云课堂主办。<a href="http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html#support" target="_blank" rel="noopener">详细介绍</a>请看本文结尾，欢迎关注。</p></blockquote><h2 id="RFC-6749"><a href="#RFC-6749" class="headerlink" title="RFC 6749"></a>RFC 6749</h2><p>OAuth 2.0 的标准是 <a href="https://tools.ietf.org/html/rfc6749" target="_blank" rel="noopener">RFC 6749</a> 文件。该文件先解释了 OAuth 是什么。</p><blockquote><p>OAuth 引入了一个授权层，用来分离两种不同的角色：客户端和资源所有者。……资源所有者同意以后，资源服务器可以向客户端颁发令牌。客户端通过令牌，去请求数据。</p></blockquote><p>这段话的意思就是，OAuth 的核心就是向第三方应用颁发令牌。然后，RFC 6749 接着写道：</p><blockquote><p>（由于互联网有多种场景，）本标准定义了获得令牌的四种授权方式（authorization grant ）。</p></blockquote><p>也就是说，OAuth 2.0 规定了四种获得令牌的流程。你可以选择最适合自己的那一种，向第三方应用颁发令牌。下面就是这四种授权方式。</p><blockquote><ul><li><p>授权码（authorization-code）</p></li><li><p>隐藏式（implicit）</p></li><li><p>密码式（password）：</p></li><li><p>客户端凭证（client credentials）</p></li></ul></blockquote><p>注意，不管哪一种授权方式，第三方应用申请令牌之前，都必须先到系统备案，说明自己的身份，然后会拿到两个身份识别码：客户端 ID（client ID）和客户端密钥（client secret）。这是为了防止令牌被滥用，没有备案过的第三方应用，是不会拿到令牌的。</p><h2 id="第一种授权方式：授权码"><a href="#第一种授权方式：授权码" class="headerlink" title="第一种授权方式：授权码"></a>第一种授权方式：授权码</h2><p>授权码（authorization code）方式，指的是第三方应用先申请一个授权码，然后再用该码获取令牌。</p><p>这种方式是最常用的流程，安全性也最高，它适用于那些有后端的 Web 应用。授权码通过前端传送，令牌则是储存在后端，而且所有与资源服务器的通信都在后端完成。这样的前后端分离，可以避免令牌泄漏。</p><p>第一步，A 网站提供一个链接，用户点击后就会跳转到 B 网站，授权用户数据给 A 网站使用。下面就是 A 网站跳转 B 网站的一个示意链接。</p><blockquote><p><a href="https://b.com/oauth/authorize" target="_blank" rel="noopener">https://b.com/oauth/authorize</a>?<br>  response_type=code&amp;<br>  client_id=CLIENT_ID&amp;<br>  redirect_uri=CALLBACK_URL&amp;<br>  scope=read</p></blockquote><p>上面 URL 中，<code>response_type</code>参数表示要求返回授权码（<code>code</code>），<code>client_id</code>参数让 B 知道是谁在请求，<code>redirect_uri</code>参数是 B 接受或拒绝请求后的跳转网址，<code>scope</code>参数表示要求的授权范围（这里是只读）。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040902.jpg" alt=""></p><p>第二步，用户跳转后，B 网站会要求用户登录，然后询问是否同意给予 A 网站授权。用户表示同意，这时 B 网站就会跳回<code>redirect_uri</code>参数指定的网址。跳转时，会传回一个授权码，就像下面这样。</p><blockquote><p><a href="https://a.com/callback?code=AUTHORIZATION_CODE" target="_blank" rel="noopener">https://a.com/callback?code=AUTHORIZATION_CODE</a></p></blockquote><p>上面 URL 中，<code>code</code>参数就是授权码。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040907.jpg" alt=""></p><p>第三步，A 网站拿到授权码以后，就可以在后端，向 B 网站请求令牌。</p><blockquote><p><a href="https://b.com/oauth/token" target="_blank" rel="noopener">https://b.com/oauth/token</a>?<br> client_id=CLIENT_ID&amp;<br> client_secret=CLIENT_SECRET&amp;<br> grant_type=authorization_code&amp;<br> code=AUTHORIZATION_CODE&amp;<br> redirect_uri=CALLBACK_URL</p></blockquote><p>上面 URL 中，<code>client_id</code>参数和<code>client_secret</code>参数用来让 B 确认 A 的身份（<code>client_secret</code>参数是保密的，因此只能在后端发请求），<code>grant_type</code>参数的值是<code>AUTHORIZATION_CODE</code>，表示采用的授权方式是授权码，<code>code</code>参数是上一步拿到的授权码，<code>redirect_uri</code>参数是令牌颁发后的回调网址。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040904.jpg" alt=""></p><p>第四步，B 网站收到请求以后，就会颁发令牌。具体做法是向<code>redirect_uri</code>指定的网址，发送一段 JSON 数据。</p><blockquote><p>{<br>  “access_token”:”ACCESS_TOKEN”,<br>  “token_type”:”bearer”,<br>  “expires_in”:2592000,<br>  “refresh_token”:”REFRESH_TOKEN”,<br>  “scope”:”read”,<br>  “uid”:100101,<br>  “info”:{…}}</p></blockquote><p>上面 JSON 数据中，<code>access_token</code>字段就是令牌，A 网站在后端拿到了。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040905.jpg" alt=""></p><h2 id="第二种方式：隐藏式"><a href="#第二种方式：隐藏式" class="headerlink" title="第二种方式：隐藏式"></a>第二种方式：隐藏式</h2><p>有些 Web 应用是纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌储存在前端。RFC 6749 就规定了第二种方式，允许直接向前端颁发令牌。这种方式没有授权码这个中间步骤，所以称为（授权码）”隐藏式”（implicit）。</p><p>第一步，A 网站提供一个链接，要求用户跳转到 B 网站，授权用户数据给 A 网站使用。</p><blockquote><p><a href="https://b.com/oauth/authorize" target="_blank" rel="noopener">https://b.com/oauth/authorize</a>?<br>  response_type=token&amp;<br>  client_id=CLIENT_ID&amp;<br>  redirect_uri=CALLBACK_URL&amp;<br>  scope=read</p></blockquote><p>上面 URL 中，<code>response_type</code>参数为<code>token</code>，表示要求直接返回令牌。</p><p>第二步，用户跳转到 B 网站，登录后同意给予 A 网站授权。这时，B 网站就会跳回<code>redirect_uri</code>参数指定的跳转网址，并且把令牌作为 URL 参数，传给 A 网站。</p><blockquote><p><a href="https://a.com/callback#token=ACCESS_TOKEN" target="_blank" rel="noopener">https://a.com/callback#token=ACCESS_TOKEN</a></p></blockquote><p>上面 URL 中，<code>token</code>参数就是令牌，A 网站因此直接在前端拿到令牌。</p><p>注意，令牌的位置是 URL 锚点（fragment），而不是查询字符串（querystring），这是因为 OAuth 2.0 允许跳转网址是 HTTP 协议，因此存在”中间人攻击”的风险，而浏览器跳转时，锚点不会发到服务器，就减少了泄漏令牌的风险。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040906.jpg" alt=""></p><p>这种方式把令牌直接传给前端，是很不安全的。因此，只能用于一些安全要求不高的场景，并且令牌的有效期必须非常短，通常就是会话期间（session）有效，浏览器关掉，令牌就失效了。</p><h2 id="第三种方式：密码式"><a href="#第三种方式：密码式" class="headerlink" title="第三种方式：密码式"></a>第三种方式：密码式</h2><p>如果你高度信任某个应用，RFC 6749 也允许用户把用户名和密码，直接告诉该应用。该应用就使用你的密码，申请令牌，这种方式称为”密码式”（password）。</p><p>第一步，A 网站要求用户提供 B 网站的用户名和密码。拿到以后，A 就直接向 B 请求令牌。</p><blockquote><p><a href="https://oauth.b.com/token" target="_blank" rel="noopener">https://oauth.b.com/token</a>?<br>  grant_type=password&amp;<br>  username=USERNAME&amp;<br>  password=PASSWORD&amp;<br>  client_id=CLIENT_ID</p></blockquote><p>上面 URL 中，<code>grant_type</code>参数是授权方式，这里的<code>password</code>表示”密码式”，<code>username</code>和<code>password</code>是 B 的用户名和密码。</p><p>第二步，B 网站验证身份通过后，直接给出令牌。注意，这时不需要跳转，而是把令牌放在 JSON 数据里面，作为 HTTP 回应，A 因此拿到令牌。</p><p>这种方式需要用户给出自己的用户名/密码，显然风险很大，因此只适用于其他授权方式都无法采用的情况，而且必须是用户高度信任的应用。</p><h2 id="第四种方式：凭证式"><a href="#第四种方式：凭证式" class="headerlink" title="第四种方式：凭证式"></a>第四种方式：凭证式</h2><p>最后一种方式是凭证式（client credentials），适用于没有前端的命令行应用，即在命令行下请求令牌。</p><p>第一步，A 应用在命令行向 B 发出请求。</p><blockquote><p><a href="https://oauth.b.com/token" target="_blank" rel="noopener">https://oauth.b.com/token</a>?<br>  grant_type=client_credentials&amp;<br>  client_id=CLIENT_ID&amp;<br>  client_secret=CLIENT_SECRET</p></blockquote><p>上面 URL 中，<code>grant_type</code>参数等于<code>client_credentials</code>表示采用凭证式，<code>client_id</code>和<code>client_secret</code>用来让 B 确认 A 的身份。</p><p>第二步，B 网站验证通过以后，直接返回令牌。</p><p>这种方式给出的令牌，是针对第三方应用的，而不是针对用户的，即有可能多个用户共享同一个令牌。</p><h2 id="令牌的使用"><a href="#令牌的使用" class="headerlink" title="令牌的使用"></a>令牌的使用</h2><p>A 网站拿到令牌以后，就可以向 B 网站的 API 请求数据了。</p><p>此时，每个发到 API 的请求，都必须带有令牌。具体做法是在请求的头信息，加上一个<code>Authorization</code>字段，令牌就放在这个字段里面。</p><blockquote><p>curl -H “Authorization: Bearer ACCESS_TOKEN” \“<a href="https://api.b.com&quot;" target="_blank" rel="noopener">https://api.b.com&quot;</a></p></blockquote><p>上面命令中，<code>ACCESS_TOKEN</code>就是拿到的令牌。</p><h2 id="更新令牌"><a href="#更新令牌" class="headerlink" title="更新令牌"></a>更新令牌</h2><p>令牌的有效期到了，如果让用户重新走一遍上面的流程，再申请一个新的令牌，很可能体验不好，而且也没有必要。OAuth 2.0 允许用户自动更新令牌。</p><p>具体方法是，B 网站颁发令牌的时候，一次性颁发两个令牌，一个用于获取数据，另一个用于获取新的令牌（refresh token 字段）。令牌到期前，用户使用 refresh token 发一个请求，去更新令牌。</p><blockquote><p><a href="https://b.com/oauth/token" target="_blank" rel="noopener">https://b.com/oauth/token</a>?<br>  grant_type=refresh_token&amp;<br>  client_id=CLIENT_ID&amp;<br>  client_secret=CLIENT_SECRET&amp;<br>  refresh_token=REFRESH_TOKEN</p></blockquote><p>上面 URL 中，<code>grant_type</code>参数为<code>refresh_token</code>表示要求更新令牌，<code>client_id</code>参数和<code>client_secret</code>参数用于确认身份，<code>refresh_token</code>参数就是用于更新令牌的令牌。</p><p>B 网站验证通过以后，就会颁发新的令牌。</p><p>写到这里，颁发令牌的四种方式就介绍完了。<a href="http://www.ruanyifeng.com/blog/2019/04/github-oauth.html" target="_blank" rel="noopener">下一篇文章</a>会编写一个真实的 Demo，演示如何通过 OAuth 2.0 向 GitHub 的 API 申请令牌，然后再用令牌获取数据。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者： &lt;a href=&quot;http://www.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;日期： &lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/0
      
    
    </summary>
    
    
    
      <category term="认证授权" scheme="https://kanchai.club/tags/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>GitHub 第三方登录示例教程！</title>
    <link href="https://kanchai.club/2020/04/01/GitHub_OAuth_%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E7%A4%BA%E4%BE%8B%E6%95%99%E7%A8%8B/"/>
    <id>https://kanchai.club/2020/04/01/GitHub_OAuth_%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E7%A4%BA%E4%BE%8B%E6%95%99%E7%A8%8B/</id>
    <published>2020-04-01T03:34:33.147Z</published>
    <updated>2020-04-01T03:34:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2019/04/" target="_blank" rel="noopener">2019年4月21日</a></p><p>这组 OAuth 系列教程，<a href="http://www.ruanyifeng.com/blog/2019/04/oauth_design.html" target="_blank" rel="noopener">第一篇</a>介绍了基本概念，<a href="http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html" target="_blank" rel="noopener">第二篇</a>介绍了获取令牌的四种方式，今天演示一个实例，如何通过 OAuth 获取 API 数据。</p><p>很多网站登录时，允许使用第三方网站的身份，这称为”第三方登录”。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019042101.jpg" alt=""></p><p>下面就以 GitHub 为例，写一个最简单的应用，演示第三方登录。</p><h2 id="一、第三方登录的原理"><a href="#一、第三方登录的原理" class="headerlink" title="一、第三方登录的原理"></a>一、第三方登录的原理</h2><p>所谓第三方登录，实质就是 OAuth 授权。用户想要登录 A 网站，A 网站让用户提供第三方网站的数据，证明自己的身份。获取第三方网站的身份数据，就需要 OAuth 授权。</p><p>举例来说，A 网站允许 GitHub 登录，背后就是下面的流程。</p><blockquote><ol><li><p>A 网站让用户跳转到 GitHub。</p></li><li><p>GitHub 要求用户登录，然后询问”A 网站要求获得 xx 权限，你是否同意？”</p></li><li><p>用户同意，GitHub 就会重定向回 A 网站，同时发回一个授权码。</p></li><li><p>A 网站使用授权码，向 GitHub 请求令牌。</p></li><li><p>GitHub 返回令牌.</p></li><li><p>A 网站使用令牌，向 GitHub 请求用户数据。</p></li></ol></blockquote><p>下面就是这个流程的代码实现。</p><h2 id="二、应用登记"><a href="#二、应用登记" class="headerlink" title="二、应用登记"></a>二、应用登记</h2><p>一个应用要求 OAuth 授权，必须先到对方网站登记，让对方知道是谁在请求。</p><p>所以，你要先去 GitHub 登记一下。当然，我已经登记过了，你使用我的登记信息也可以，但为了完整走一遍流程，还是建议大家自己登记。这是免费的。</p><p>访问这个<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">网址</a>，填写登记表。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019042102.jpg" alt=""></p><p>应用的名称随便填，主页 URL 填写<code>http://localhost:8080</code>，跳转网址填写 <code>http://localhost:8080/oauth/redirect</code>。</p><p>提交表单以后，GitHub 应该会返回客户端 ID（client ID）和客户端密钥（client secret），这就是应用的身份识别码。</p><h2 id="三、示例仓库"><a href="#三、示例仓库" class="headerlink" title="三、示例仓库"></a>三、示例仓库</h2><p>我写了一个<a href="https://github.com/ruanyf/node-oauth-demo" target="_blank" rel="noopener">代码仓库</a>，请将它克隆到本地。</p><blockquote><p>$ git clone <a href="mailto:git@github.com">git@github.com</a>:ruanyf/node-oauth-demo.git<br>$ cd node-oauth-demo</p></blockquote><p>两个配置项要改一下，写入上一步的身份识别码。</p><blockquote><ul><li><p><a href="https://github.com/ruanyf/node-oauth-demo/blob/master/index.js#L3" target="_blank" rel="noopener"><code>index.js</code></a>：改掉变量<code>clientID</code> and <code>clientSecret</code></p></li><li><p><a href="https://github.com/ruanyf/node-oauth-demo/blob/master/public/index.html#L16" target="_blank" rel="noopener"><code>public/index.html</code></a>：改掉变量<code>client_id</code></p></li></ul></blockquote><p>然后，安装依赖。</p><blockquote><p>$ npm install</p></blockquote><p>启动服务。</p><blockquote><p>$ node index.js</p></blockquote><p>浏览器访问<code>http://localhost:8080</code>，就可以看到这个示例了。</p><h2 id="四、浏览器跳转-GitHub"><a href="#四、浏览器跳转-GitHub" class="headerlink" title="四、浏览器跳转 GitHub"></a>四、浏览器跳转 GitHub</h2><p>示例的首页很简单，就是一个链接，让用户跳转到 GitHub。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019042103.jpg" alt=""></p><p>跳转的 URL 如下。</p><blockquote><p><a href="https://github.com/login/oauth/authorize" target="_blank" rel="noopener">https://github.com/login/oauth/authorize</a>?<br>  client_id=7e015d8ce32370079895&amp;<br>  redirect_uri=<a href="http://localhost:8080/oauth/redirect" target="_blank" rel="noopener">http://localhost:8080/oauth/redirect</a></p></blockquote><p>这个 URL 指向 GitHub 的 OAuth 授权网址，带有两个参数：<code>client_id</code>告诉 GitHub 谁在请求，<code>redirect_uri</code>是稍后跳转回来的网址。</p><p>用户点击到了 GitHub，GitHub 会要求用户登录，确保是本人在操作。</p><h2 id="五、授权码"><a href="#五、授权码" class="headerlink" title="五、授权码"></a>五、授权码</h2><p>登录后，GitHub 询问用户，该应用正在请求数据，你是否同意授权。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019042104.png" alt=""></p><p>用户同意授权， GitHub 就会跳转到<code>redirect_uri</code>指定的跳转网址，并且带上授权码，跳转回来的 URL 就是下面的样子。</p><blockquote><p><a href="http://localhost:8080/oauth/redirect" target="_blank" rel="noopener">http://localhost:8080/oauth/redirect</a>?<br>  code=859310e7cecc9196f4af</p></blockquote><p>后端收到这个请求以后，就拿到了授权码（<code>code</code>参数）。</p><h2 id="六、后端实现"><a href="#六、后端实现" class="headerlink" title="六、后端实现"></a>六、后端实现</h2><p>示例的<a href="https://github.com/ruanyf/node-oauth-demo/blob/master/index.js" target="_blank" rel="noopener">后端</a>采用 Koa 框架编写，具体语法请看<a href="http://www.ruanyifeng.com/blog/2017/08/koa.html" target="_blank" rel="noopener">教程</a>。</p><p>这里的关键是针对<code>/oauth/redirect</code>的请求，编写一个<a href="https://github.com/ruanyf/node-oauth-demo/blob/master/index.js#L16" target="_blank" rel="noopener">路由</a>，完成 OAuth 认证。</p><blockquote><p>const oauth = async ctx =&gt; {<br>  // …};app.use(route.get(‘/oauth/redirect’, oauth));</p></blockquote><p>上面代码中，<code>oauth</code>函数就是路由的处理函数。下面的代码都写在这个函数里面。</p><p>路由函数的第一件事，是从 URL 取出授权码。</p><blockquote><p>const requestToken = ctx.request.query.code;</p></blockquote><h2 id="七、令牌"><a href="#七、令牌" class="headerlink" title="七、令牌"></a>七、令牌</h2><p>后端使用这个授权码，向 GitHub 请求令牌。</p><blockquote><p>const tokenResponse = await axios({<br>  method: ‘post’,<br>  url: ‘<a href="https://github.com/login/oauth/access_token?&#39;" target="_blank" rel="noopener">https://github.com/login/oauth/access_token?&#39;</a> +<br>    `client_id=${clientID}&amp;` +<br>    `client_secret=${clientSecret}&amp;` +<br>    `code=${requestToken}`,<br>  headers: {<br>    accept: ‘application/json’<br>  }});</p></blockquote><p>上面代码中，GitHub 的令牌接口<code>https://github.com/login/oauth/access_token</code>需要提供三个参数。</p><blockquote><ul><li><p><code>client_id</code>：客户端的 ID</p></li><li><p><code>client_secret</code>：客户端的密钥</p></li><li><p><code>code</code>：授权码</p></li></ul></blockquote><p>作为回应，GitHub 会返回一段 JSON 数据，里面包含了令牌<code>accessToken</code>。</p><blockquote><p>const accessToken = tokenResponse.data.access_token;</p></blockquote><h2 id="八、API-数据"><a href="#八、API-数据" class="headerlink" title="八、API 数据"></a>八、API 数据</h2><p>有了令牌以后，就可以向 API 请求数据了。</p><blockquote><p>const result = await axios({<br>  method: ‘get’,<br>  url: `<a href="https://api.github.com/user\`" target="_blank" rel="noopener">https://api.github.com/user\`</a>,<br>  headers: {<br>    accept: ‘application/json’,<br>    Authorization: `token ${accessToken}`  }});</p></blockquote><p>上面代码中，GitHub API 的地址是<code>https://api.github.com/user</code>，请求的时候必须在 HTTP 头信息里面带上令牌<code>Authorization: token 361507da</code>。</p><p>然后，就可以拿到用户数据，得到用户的身份。</p><blockquote><p>const name = result.data.name;ctx.response.redirect(<code>/welcome.html?name=${name}</code>);</p></blockquote><p>（完）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者： &lt;a href=&quot;http://www.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;日期： &lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/0
      
    
    </summary>
    
    
    
      <category term="认证授权" scheme="https://kanchai.club/tags/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>OAuth 2.0 的一个简单解释！</title>
    <link href="https://kanchai.club/2020/04/01/OAuth_2.0_%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/"/>
    <id>https://kanchai.club/2020/04/01/OAuth_2.0_%E7%9A%84%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%A7%A3%E9%87%8A/</id>
    <published>2020-04-01T03:27:48.218Z</published>
    <updated>2020-04-01T03:26:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>作者： <a href="http://www.ruanyifeng.com/" target="_blank" rel="noopener">阮一峰</a></p><p>日期： <a href="http://www.ruanyifeng.com/blog/2019/04/" target="_blank" rel="noopener">2019年4月 4日</a></p><p><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">OAuth 2.0</a> 是目前最流行的授权机制，用来授权第三方应用，获取用户数据。</p><p>这个标准比较抽象，使用了很多术语，初学者不容易理解。其实说起来并不复杂，下面我就通过一个简单的类比，帮助大家轻松理解，OAuth 2.0 到底是什么。</p><h2 id="一、快递员问题"><a href="#一、快递员问题" class="headerlink" title="一、快递员问题"></a>一、快递员问题</h2><p>我住在一个大型的居民小区。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040401.jpg" alt=""></p><p>小区有门禁系统。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040402.jpg" alt=""></p><p>进入的时候需要输入密码。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040403.jpg" alt=""></p><p>我经常网购和外卖，每天都有快递员来送货。我必须找到一个办法，让快递员通过门禁系统，进入小区。</p><p><img src="https://www.wangbase.com/blogimg/asset/201904/bg2019040404.jpg" alt=""></p><p>如果我把自己的密码，告诉快递员，他就拥有了与我同样的权限，这样好像不太合适。万一我想取消他进入小区的权力，也很麻烦，我自己的密码也得跟着改了，还得通知其他的快递员。</p><p>有没有一种办法，让快递员能够自由进入小区，又不必知道小区居民的密码，而且他的唯一权限就是送货，其他需要密码的场合，他都没有权限？</p><h2 id="二、授权机制的设计"><a href="#二、授权机制的设计" class="headerlink" title="二、授权机制的设计"></a>二、授权机制的设计</h2><p>于是，我设计了一套授权机制。</p><p>第一步，门禁系统的密码输入器下面，增加一个按钮，叫做”获取授权”。快递员需要首先按这个按钮，去申请授权。</p><p>第二步，他按下按钮以后，屋主（也就是我）的手机就会跳出对话框：有人正在要求授权。系统还会显示该快递员的姓名、工号和所属的快递公司。</p><p>我确认请求属实，就点击按钮，告诉门禁系统，我同意给予他进入小区的授权。</p><p>第三步，门禁系统得到我的确认以后，向快递员显示一个进入小区的令牌（access token）。令牌就是类似密码的一串数字，只在短期内（比如七天）有效。</p><p>第四步，快递员向门禁系统输入令牌，进入小区。</p><p>有人可能会问，为什么不是远程为快递员开门，而要为他单独生成一个令牌？这是因为快递员可能每天都会来送货，第二天他还可以复用这个令牌。另外，有的小区有多重门禁，快递员可以使用同一个令牌通过它们。</p><h2 id="三、互联网场景"><a href="#三、互联网场景" class="headerlink" title="三、互联网场景"></a>三、互联网场景</h2><p>我们把上面的例子搬到互联网，就是 OAuth 的设计了。</p><p>首先，居民小区就是储存用户数据的网络服务。比如，微信储存了我的好友信息，获取这些信息，就必须经过微信的”门禁系统”。</p><p>其次，快递员（或者说快递公司）就是第三方应用，想要穿过门禁系统，进入小区。</p><p>最后，我就是用户本人，同意授权第三方应用进入小区，获取我的数据。</p><p>简单说，OAuth 就是一种授权机制。数据的所有者告诉系统，同意授权第三方应用进入系统，获取这些数据。系统从而产生一个短期的进入令牌（token），用来代替密码，供第三方应用使用。</p><h2 id="四、令牌与密码"><a href="#四、令牌与密码" class="headerlink" title="四、令牌与密码"></a>四、令牌与密码</h2><p>令牌（token）与密码（password）的作用是一样的，都可以进入系统，但是有三点差异。</p><p>（1）令牌是短期的，到期会自动失效，用户自己无法修改。密码一般长期有效，用户不修改，就不会发生变化。</p><p>（2）令牌可以被数据所有者撤销，会立即失效。以上例而言，屋主可以随时取消快递员的令牌。密码一般不允许被他人撤销。</p><p>（3）令牌有权限范围（scope），比如只能进小区的二号门。对于网络服务来说，只读令牌就比读写令牌更安全。密码一般是完整权限。</p><p>上面这些设计，保证了令牌既可以让第三方应用获得权限，同时又随时可控，不会危及系统安全。这就是 OAuth 2.0 的优点。</p><p>注意，只要知道了令牌，就能进入系统。系统一般不会再次确认身份，所以令牌必须保密，泄漏令牌与泄漏密码的后果是一样的。 这也是为什么令牌的有效期，一般都设置得很短的原因。</p><p>OAuth 2.0 对于如何颁发令牌的细节，规定得非常详细。具体来说，一共分成四种授权类型（authorization grant），即四种颁发令牌的方式，适用于不同的互联网场景。<a href="http://www.ruanyifeng.com/blog/2019/04/oauth-grant-types.html" target="_blank" rel="noopener">下一篇文章</a>，我就来介绍这四种类型，并给出代码实例。</p><p>（完）</p><h3 id="文档信息"><a href="#文档信息" class="headerlink" title="文档信息"></a>文档信息</h3><ul><li><p>版权声明：自由转载-非商用-非衍生-保持署名（<a href="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh" target="_blank" rel="noopener">创意共享3.0许可证</a>）</p></li><li><p>发表日期： 2019年4月 4日</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;作者： &lt;a href=&quot;http://www.ruanyifeng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;阮一峰&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;日期： &lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/0
      
    
    </summary>
    
    
    
      <category term="认证授权" scheme="https://kanchai.club/tags/%E8%AE%A4%E8%AF%81%E6%8E%88%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>【57期】面试官问，MySQL建索引需要遵循哪些原则呢？</title>
    <link href="https://kanchai.club/2020/03/25/%E3%80%9057%E6%9C%9F%E3%80%91%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%EF%BC%8CMySQL%E5%BB%BA%E7%B4%A2%E5%BC%95%E9%9C%80%E8%A6%81%E9%81%B5%E5%BE%AA%E5%93%AA%E4%BA%9B%E5%8E%9F%E5%88%99%E5%91%A2%EF%BC%9F/"/>
    <id>https://kanchai.club/2020/03/25/%E3%80%9057%E6%9C%9F%E3%80%91%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%EF%BC%8CMySQL%E5%BB%BA%E7%B4%A2%E5%BC%95%E9%9C%80%E8%A6%81%E9%81%B5%E5%BE%AA%E5%93%AA%E4%BA%9B%E5%8E%9F%E5%88%99%E5%91%A2%EF%BC%9F/</id>
    <published>2020-03-25T03:41:06.399Z</published>
    <updated>2020-03-25T03:35:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-选择唯一性索引"><a href="#1-选择唯一性索引" class="headerlink" title="1.选择唯一性索引"></a>1.选择唯一性索引</h2><p>唯一性索引的值是唯一的，可以更快速的通过该索引来确定某条记录。例如，学生表中学号是具有唯一性的字段。为该字段建立唯一性索引可以很快的确定某个学生的信息。如果使用姓名的话，可能存在同名现象，从而降低查询速度。</p><h2 id="2-为经常需要排序、分组和联合操作的字段建立索引"><a href="#2-为经常需要排序、分组和联合操作的字段建立索引" class="headerlink" title="2.为经常需要排序、分组和联合操作的字段建立索引"></a>2.为经常需要排序、分组和联合操作的字段建立索引</h2><p>经常需要ORDER BY、GROUP BY、DISTINCT和UNION等操作的字段，排序操作会浪费很多时间。如果为其建立索引，可以有效地避免排序操作。</p><h2 id="3-为常作为查询条件的字段建立索引"><a href="#3-为常作为查询条件的字段建立索引" class="headerlink" title="3.为常作为查询条件的字段建立索引"></a>3.为常作为查询条件的字段建立索引</h2><p>如果某个字段经常用来做查询条件，那么该字段的查询速度会影响整个表的查询速度。因此，为这样的字段建立索引，可以提高整个表的查询速度。</p><h2 id="4-限制索引的数目"><a href="#4-限制索引的数目" class="headerlink" title="4.限制索引的数目"></a>4.限制索引的数目</h2><p>索引的数目不是越多越好。每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。修改表时，对索引的重构和更新很麻烦。越多的索引，会使更新表变得很浪费时间。</p><h2 id="5-尽量使用数据量少的索引"><a href="#5-尽量使用数据量少的索引" class="headerlink" title="5.尽量使用数据量少的索引"></a>5.尽量使用数据量少的索引</h2><p>如果索引的值很长，那么查询的速度会受到影响。例如，对一个CHAR(100)类型的字段进行全文检索需要的时间肯定要比对CHAR(10)类型的字段需要的时间要多。</p><h2 id="6-尽量使用前缀来索引"><a href="#6-尽量使用前缀来索引" class="headerlink" title="6.尽量使用前缀来索引"></a>6.尽量使用前缀来索引</h2><p>如果索引字段的值很长，最好使用值的前缀来索引。例如，TEXT和BLOG类型的字段，进行全文检索会很浪费时间。如果只检索字段的前面的若干个字符，这样可以提高检索速度。</p><h2 id="7-删除不再使用或者很少使用的索引"><a href="#7-删除不再使用或者很少使用的索引" class="headerlink" title="7.删除不再使用或者很少使用的索引"></a>7.删除不再使用或者很少使用的索引</h2><p>表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。数据库管理员应当定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</p><h2 id="8-最左前缀匹配原则，非常重要的原则。"><a href="#8-最左前缀匹配原则，非常重要的原则。" class="headerlink" title="8.最左前缀匹配原则，非常重要的原则。"></a>8.最左前缀匹配原则，非常重要的原则。</h2><p>mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a 1=”” and=”” b=”2” c=”“&gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><h2 id="9-和in可以乱序。"><a href="#9-和in可以乱序。" class="headerlink" title="9.=和in可以乱序。"></a>9.=和in可以乱序。</h2><p>比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p><h2 id="10-尽量选择区分度高的列作为索引。"><a href="#10-尽量选择区分度高的列作为索引。" class="headerlink" title="10.尽量选择区分度高的列作为索引。"></a>10.尽量选择区分度高的列作为索引。</h2><p>区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就 是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条 记录</p><h2 id="11-索引列不能参与计算，保持列“干净”。"><a href="#11-索引列不能参与计算，保持列“干净”。" class="headerlink" title="11.索引列不能参与计算，保持列“干净”。"></a>11.索引列不能参与计算，保持列“干净”。</h2><p>比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本 太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);</p><h2 id="12-尽量的扩展索引，不要新建索引。"><a href="#12-尽量的扩展索引，不要新建索引。" class="headerlink" title="12.尽量的扩展索引，不要新建索引。"></a>12.尽量的扩展索引，不要新建索引。</h2><p>比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可</p><p>注意：选择索引的最终目的是为了使查询的速度变快。上面给出的原则是最基本的准则，但不能拘泥于上面的准则。读者要在以后的学习和工作中进行不断的实践。根据应用的实际情况进行分析和判断，选择最合适的索引方式。## 目标</p><p>去除 iconfinder 上 icon 的水印</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>利用水印像素点和原图像素点颜色合并的原理，如果拥有加过水印的图片和水印图片，就可以反向推出原图原像素点的颜色；前提是你得拥有他的水印图片</p><p>来源：<a href="https://blog.csdn.net/u013412790/" target="_blank" rel="noopener">https://blog.csdn.net/u013412790/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-选择唯一性索引&quot;&gt;&lt;a href=&quot;#1-选择唯一性索引&quot; class=&quot;headerlink&quot; title=&quot;1.选择唯一性索引&quot;&gt;&lt;/a&gt;1.选择唯一性索引&lt;/h2&gt;&lt;p&gt;唯一性索引的值是唯一的，可以更快速的通过该索引来确定某条记录。例如，学生表中学号是具
      
    
    </summary>
    
    
    
      <category term="MYSQL" scheme="https://kanchai.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）</title>
    <link href="https://kanchai.club/2020/03/25/%E3%80%9063%E6%9C%9F%E3%80%91%E8%B0%88%E8%B0%88MySQL_%E7%B4%A2%E5%BC%95%EF%BC%8CB+%E6%A0%91%E5%8E%9F%E7%90%86%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%BB%BA%E7%B4%A2%E5%BC%95%E7%9A%84%E5%87%A0%E5%A4%A7%E5%8E%9F%E5%88%99%EF%BC%88MySQL%E9%9D%A2%E8%AF%95%E7%AC%AC%E5%85%AD%E5%BC%B9%EF%BC%89/"/>
    <id>https://kanchai.club/2020/03/25/%E3%80%9063%E6%9C%9F%E3%80%91%E8%B0%88%E8%B0%88MySQL_%E7%B4%A2%E5%BC%95%EF%BC%8CB+%E6%A0%91%E5%8E%9F%E7%90%86%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%BB%BA%E7%B4%A2%E5%BC%95%E7%9A%84%E5%87%A0%E5%A4%A7%E5%8E%9F%E5%88%99%EF%BC%88MySQL%E9%9D%A2%E8%AF%95%E7%AC%AC%E5%85%AD%E5%BC%B9%EF%BC%89/</id>
    <published>2020-03-25T03:41:04.566Z</published>
    <updated>2020-03-25T03:34:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>MYSQL一直了解得都不多，之前写sql准备提交生产环境之前的时候，老员工帮我检查了下sql，让修改了一下存储引擎，当时我使用的是Myisam，后面改成InnoDB了。为什么要改成这样，之前都没有听过存储引擎，于是网上查了一下。</p><p>事实上使用不同的存储引擎也是有很大区别的，下面猿友们可以了解一下。</p><h2 id="一、存储引擎的比较"><a href="#一、存储引擎的比较" class="headerlink" title="一、存储引擎的比较"></a>一、存储引擎的比较</h2><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java1-1584537211.png" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><blockquote><p>注：上面提到的B树索引并没有指出是B-Tree和B+Tree索引，但是B-树和B+树的定义是有区别的。</p></blockquote><p>在 MySQL 中，主要有四种类型的索引，分别为：B-Tree 索引， Hash 索引， Fulltext 索引和 R-Tree 索引。</p><p>B-Tree 索引是 MySQL 数据库中使用最为频繁的索引类型，除了 Archive 存储引擎之外的其他所有的存储引擎都支持 B-Tree 索引。Archive 引擎直到 MySQL 5.1 才支持索引，而且只支持索引单个 AUTO_INCREMENT 列。</p><p>不仅仅在 MySQL 中是如此，实际上在其他的很多数据库管理系统中B-Tree 索引也同样是作为最主要的索引类型，这主要是因为 B-Tree 索引的存储结构在数据库的数据检索中有非常优异的表现。</p><p>一般来说， MySQL 中的 B-Tree 索引的物理文件大多都是以 Balance Tree 的结构来存储的，也就是所有实际需要的数据都存放于 Tree 的 Leaf Node(叶子节点) ，而且到任何一个 Leaf Node 的最短路径的长度都是完全相同的，所以我们大家都称之为 B-Tree 索引。</p><p>当然，可能各种数据库（或 MySQL 的各种存储引擎）在存放自己的 B-Tree 索引的时候会对存储结构稍作改造。如 Innodb 存储引擎的 B-Tree 索引实际使用的存储结构实际上是 B+Tree，也就是在 B-Tree 数据结构的基础上做了很小的改造，在每一个Leaf Node 上面出了存放索引键的相关信息之外，还存储了指向与该 Leaf Node 相邻的后一个 LeafNode 的指针信息（增加了顺序访问指针），这主要是为了加快检索多个相邻 Leaf Node 的效率考虑。</p><p>InnoDB是Mysql的默认存储引擎(Mysql5.5.5之前是MyISAM）</p><p>可能对于没有了解过索引的猿友这样看这篇文章十分吃力，这类猿友有必要先对Mysql索引有个大体的了解。</p><p>接下来我们先看看B-树、B+树的概念。弄清楚，为什么加了索引查询速度会加快？</p><h2 id="二、B-树、B-树概念"><a href="#二、B-树、B-树概念" class="headerlink" title="二、B-树、B+树概念"></a>二、B-树、B+树概念</h2><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p>即二叉搜索树：</p><ol><li><p>所有非叶子结点至多拥有两个儿子（Left和Right）；</p></li><li><p>所有结点存储一个关键字；</p></li><li><p>非叶子结点的左指针指向小于其关键字的子树，右指针指向大于其关键字的子树；</p></li></ol><p>如：</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java8-1584537211.jpeg" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h3><p>是一种多路搜索树（并不是二叉的）：</p><ol><li><p>定义任意非叶子结点最多只有M个儿子；且M&gt;2；</p></li><li><p>根结点的儿子数为[2, M]；</p></li><li><p>除根结点以外的非叶子结点的儿子数为[M/2, M]；</p></li><li><p>每个结点存放至少M/2-1（取上整）和至多M-1个关键字；（至少2个关键字）</p></li><li><p>非叶子结点的关键字个数=指向儿子的指针个数-1；</p></li><li><p>非叶子结点的关键字：K[1], K[2], …, K[M-1]；且K[i] &lt; K[i+1]；</p></li><li><p>非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树；</p></li><li><p>所有叶子结点位于同一层；</p></li></ol><p>如：（M=3）</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java7-1584537211.jpeg" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><p>B-树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点；</p><p><strong>B-树的特性：</strong></p><ol><li><p>关键字集合分布在整颗树中；</p></li><li><p>任何一个关键字出现且只出现在一个结点中；</p></li><li><p>搜索有可能在非叶子结点结束；</p></li><li><p>其搜索性能等价于在关键字全集内做一次二分查找；</p></li><li><p>自动层次控制；</p></li></ol><p>由于限制了除根结点以外的非叶子结点，至少含有M/2个儿子，确保了结点的至少利用率。</p><p>所以B-树的性能总是等价于二分查找（与M值无关），也就没有B树平衡的问题；</p><p>由于M/2的限制，在插入结点时，如果结点已满，需要将结点分裂为两个各占M/2的结点；删除结点时，需将两个不足M/2的兄弟结点合并；</p><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+树"></a>B+树</h3><p>B+树是B-树的变体，也是一种多路搜索树：</p><ol><li><p>其定义基本与B-树同，除了：</p></li><li><p>非叶子结点的子树指针与关键字个数相同；</p></li><li><p>非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树（B-树是开区间）；</p></li><li><p>为所有叶子结点增加一个链指针；</p></li><li><p>所有关键字都在叶子结点出现；</p></li></ol><p>如：（M=3）</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java6-1584537211.jpeg" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><p>B+的搜索与B-树也基本相同，区别是B+树只有达到叶子结点才命中（B-树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找；</p><p><strong>B+的特性：</strong></p><ol><li><p>所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；</p></li><li><p>不可能在非叶子结点命中；</p></li><li><p>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；</p></li><li><p>更适合文件索引系统；</p></li></ol><h2 id="三、建索引的几大原则"><a href="#三、建索引的几大原则" class="headerlink" title="三、建索引的几大原则"></a>三、建索引的几大原则</h2><p>1.最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><p>2.=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p><p>3.尽量选择区分度高的列作为索引,区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录</p><p>4.索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);</p><p>5.尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可</p><p><em>来源：blog.csdn.net/u013142781/article/details/51706790</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MYSQL一直了解得都不多，之前写sql准备提交生产环境之前的时候，老员工帮我检查了下sql，让修改了一下存储引擎，当时我使用的是Myisam，后面改成InnoDB了。为什么要改成这样，之前都没有听过存储引擎，于是网上查了一下。&lt;/p&gt;
&lt;p&gt;事实上使用不同的存储引擎也是有
      
    
    </summary>
    
    
    
      <category term="MYSQL" scheme="https://kanchai.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>【58期】盘点那些面试中最常问的MySQL问题，第一弹！</title>
    <link href="https://kanchai.club/2020/03/25/%E3%80%9058%E6%9C%9F%E3%80%91%E7%9B%98%E7%82%B9%E9%82%A3%E4%BA%9B%E9%9D%A2%E8%AF%95%E4%B8%AD%E6%9C%80%E5%B8%B8%E9%97%AE%E7%9A%84MySQL%E9%97%AE%E9%A2%98%EF%BC%8C%E7%AC%AC%E4%B8%80%E5%BC%B9%EF%BC%81/"/>
    <id>https://kanchai.club/2020/03/25/%E3%80%9058%E6%9C%9F%E3%80%91%E7%9B%98%E7%82%B9%E9%82%A3%E4%BA%9B%E9%9D%A2%E8%AF%95%E4%B8%AD%E6%9C%80%E5%B8%B8%E9%97%AE%E7%9A%84MySQL%E9%97%AE%E9%A2%98%EF%BC%8C%E7%AC%AC%E4%B8%80%E5%BC%B9%EF%BC%81/</id>
    <published>2020-03-25T03:41:02.744Z</published>
    <updated>2020-03-25T03:40:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">1、MySQL中myisam与innodb的区别</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">MyISAM：</strong></p><ul class=" list-paddingleft-2" style="list-style-type: square;">    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">不支持事务，但是每次查询都是原子的；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">支持表级锁，即每次操作对整个表加锁；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">存储表的总行数；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">一个MYISAM表有三个文件：索引文件、表结构文件、数据文件；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;"><span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">采用</span>非<span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">聚集索引，索引文件的数据域存储指向数据文件的指针。</span><span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">辅索引与主索引基本一致，但是辅索引不用保证唯一性。</span></span>        </p>    </li></ul><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">InnoDb：</strong></p><ul class=" list-paddingleft-2" style="list-style-type: square;">    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">支持ACID的事务，支持事务的四种隔离级别；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">支持行级锁及外键约束：因此可以支持写并发；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">不存储总行数；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">一个InnoDb引擎存储在一个文件空间（共享表空间，表大小不受操作系统控制，一个表可能分布在多个文件里），也有可能为多个（设置为独立表空，表大小受操作系统文件大小限制，一般为2G），受操作系统文件大小的限制；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">主键索引采用聚集索引（索引的数据域存储数据文件本身），辅索引的数据域存储主键的值；因此从辅索引查找数据，需要先通过辅索引找到主键值，再访问辅索引；最好使用自增主键，防止插入数据时，为维持B+树结构，文件的大调整。</span>        </p>    </li></ul><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">两者的适用场景：</strong></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    因为MyISAM相对简单所以在效率上要优于InnoDB.如果系统读多，写少。对原子性要求低。那么MyISAM最好的选择。且MyISAM恢复速度快。可直接用备份覆盖恢复。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    如果系统读少，写多的时候，尤其是并发写入高的时候。InnoDB就是首选了。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box;"><em style="box-sizing: border-box;"><span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; color: rgb(255, 0, 0);">扩展问题：myisam与innodb引擎下select count(*)哪个更快，为什么？</span></em></strong></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    知道的童鞋，欢迎留言说出正确答案~</p><h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">2、MySQL INT和CHAR隐式类型转换需要注意什么？</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    主要需要记住下面两点：</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    1、当查询字段是INT类型，如果查询条件为CHAR，将查询条件转换为INT，如果是字符串前导都是数字，将截取前导数字用来比较，如果没有前导数字，则转换为0。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">2.、当查询字段是CHAR/VARCHAR类型，如果查询条件为INT，将查询字段</span>转<span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">换为INT再进行比较，可能会造成全表扫描。</span></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">答案解析</strong></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    有如下一张测试表product，id为int类型，name为varchar类型。</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">+----+----------+| id | name   |+----+----------+|  1 | apple   ||  2 | banana ||  3 | 99cat   |+----+----------+</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    情况1:</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">// 查询条件转化为数字1再比较mysql&gt; select * from product where id = &#39;1abc23&#39;;+----+---------+| id | name  |+----+---------+|  1 | apple  |+----+---------+</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    情况2:</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">// 查询字段全部转化成数字，id:1和id:2字段值转化为0，id:3转化成99，再比较mysql&gt; select * from product where name=0;+----+----------+| id | name   |+----+----------+|  1 | apple   ||  2 | banana |+----+----------+</pre><h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">3、MySQL 如何高效率随机获取N条数据？</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    假设表叫做mm_account。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    ID连续的情况下（注意不能带where，否则结果不好）：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT *FROM `mm_account` AS t1 JOIN (SELECT ROUND(RAND() * (SELECT MAX(id) FROM `mm_account`)) AS id) AS t2WHERE t1.id &gt;= t2.idORDER BY t1.id ASC LIMIT 4;</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    ID不连续的情况下：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT * FROM `mm_account` WHERE id &gt;= (SELECT floor(RAND() * (SELECT MAX(id) FROM `mm_account`)))  and city=&quot;city_91&quot; and showSex=1ORDER BY id LIMIT 4;</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    如果有一个字段叫id，最快的方法如下（随机获取5条）：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT * FROM mm_account WHERE id &gt;= ((SELECT MAX(id) FROM mm_account)-(SELECT MIN(id) FROM mm_account)) * RAND() + (SELECT MIN(id) FROM mm_account)limit 5;</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    如果带where语句，上面就不适合了，带where语句请看下面：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT *FROM `mm_account` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `mm_account` where id&lt;1000 )-(SELECT MIN(id) FROM `mm_account` where id&lt;1000 ))+(SELECT MIN(id) FROM `mm_account` where id&lt;1000 )) AS id) AS t2WHERE t1.id &gt;= t2.idORDER BY t1.id LIMIT 5;</pre><h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">4、说说你知道的MySQL的索引类型，并分别简述一下各自的场景。</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">普通索引：</strong>没有任何限制条件的索引，该索引可以在任何数据类型中创建。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">唯一索引：</strong>使用UNIQUE参数可以设置唯一索引。创建该索引时，索引列的值必须唯一，但允许有空值。通过唯一索引，用户可以快速地定位某条记录，主键索引是一种特殊的唯一索引。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">全文索引：</strong>仅可用于 MyISAM 表，针对较大的数据，生成全文索引耗时耗空间。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">空间索引：</strong>只能建立在空间数据类型上。这样可以提高系统获取空间数据类型的效率。仅可用于 MyISAM 表，索引的字段不能为空值。使用SPATIAL参数可以设置索引为空间索引。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">单列索引：</strong>只对应一个字段的索引。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">多列索引：</strong>在表的多个字段上创建一个索引。该索引指向创建时对应的多个字段，用户可以通过这几个字段进行查询，想使用该索引，用户必须使用这些字段中的一个字段。</p><p>    <br/></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 style=&quot;margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text
      
    
    </summary>
    
    
    
      <category term="MYSQL" scheme="https://kanchai.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>POI-Excel的导出导入</title>
    <link href="https://kanchai.club/2020/03/17/excel/"/>
    <id>https://kanchai.club/2020/03/17/excel/</id>
    <published>2020-03-17T15:36:46.688Z</published>
    <updated>2020-03-17T15:33:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://996.icu" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/link-996.icu-red.svg" alt="996.icu"></a><br><a href="https://github.com/996icu/996.ICU/blob/master/LICENSE" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/license-Anti%20996-blue.svg" alt="LICENSE"></a></p><h1 id="excel-poi"><a href="#excel-poi" class="headerlink" title="excel-poi"></a>excel-poi</h1><h4 id="maven使用方式"><a href="#maven使用方式" class="headerlink" title="maven使用方式"></a>maven使用方式</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- excel导入导出 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.stupdit1t&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-excel&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>本工程并没有使用注解方式实现，完全是编码方式。个人觉得注解方式对代码侵入比较大。不如纯编码方便，请以maven版本为主，此源码可能不是最新版本。环境为，POI4.0.1 ，JDK1.8</p></blockquote><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><ol><li>支持严格的单元格校验</li><li>支持数据行的图片导入</li><li>3支持数据回调处理</li><li>03和07都支持</li></ol><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><ol><li>动态表头+表尾</li><li>支持List<Map>数据</li><li>支持图片导出，</li><li>支持复杂对象的导出</li><li>支持回调处理数据后再导出</li><li>支持单元格的样式设置</li><li>支持模板导出</li><li>导出03和07都支持，默认为03，具体看以下使用方式</li><li>支持多sheet导出</li></ol><h3 id="选择03还是07？"><a href="#选择03还是07？" class="headerlink" title="选择03还是07？"></a>选择03还是07？</h3><ol><li>03速度较快，单sheet最大65535行，体积大</li><li>07速度慢，单sheet最大1048576行，体积小</li></ol><h2 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h2><h3 id="导入-1"><a href="#导入-1" class="headerlink" title="导入"></a>导入</h3><p>1.简单的导入:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.获取源文件</span></span><br><span class="line">Workbook wb = WorkbookFactory.create(<span class="keyword">new</span> FileInputStream(<span class="string">"src\\test\\java\\excel\\imports\\import.xlsx"</span>));</span><br><span class="line"><span class="comment">// 2.获取sheet0导入</span></span><br><span class="line">Sheet sheet = wb.getSheetAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 3.生成VO数据</span></span><br><span class="line"><span class="comment">//参数：1.生成VO的class类型;2.校验规则;3.导入的sheet;3.从第几行导入;4.尾部非数据行数量</span></span><br><span class="line">ImportRspInfo&lt;ProjectEvaluate&gt; list = ExcelUtils.parseSheet(ProjectEvaluate<span class="class">.<span class="keyword">class</span>, <span class="title">EvaluateVerifyBuilder</span>.<span class="title">getInstance</span>(), <span class="title">sheet</span>, 3, 2)</span>;</span><br><span class="line"><span class="keyword">if</span> (list.isSuccess()) &#123;</span><br><span class="line"><span class="comment">// 导入没有错误，打印数据</span></span><br><span class="line">System.out.println(JSON.toJSONString(list.getData()));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 导入有错误，打印输出错误</span></span><br><span class="line">System.out.println(list.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.复杂导入，带图片导入，带回调处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.获取源文件</span></span><br><span class="line">Workbook wb = WorkbookFactory.create(<span class="keyword">new</span> FileInputStream(<span class="string">"src\\test\\java\\excel\\imports\\import.xlsx"</span>));</span><br><span class="line"><span class="comment">// 2.获取sheet0导入</span></span><br><span class="line">Sheet sheet = wb.getSheetAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 3.生成VO数据</span></span><br><span class="line"><span class="comment">//参数：1.生成VO的class类型;2.校验规则;3.导入的sheet;3.从第几行导入;4.尾部非数据行数量;5.导入每条数据的回调</span></span><br><span class="line">ImportRspInfo&lt;ProjectEvaluate&gt; list = ExcelUtils.parseSheet(ProjectEvaluate<span class="class">.<span class="keyword">class</span>, <span class="title">ProjectVerifyBuilder</span>.<span class="title">getInstance</span>(), <span class="title">sheet</span>, 3, 2, (<span class="title">row</span>, <span class="title">rowNum</span>) -&gt; </span>&#123;</span><br><span class="line"><span class="comment">//1.此处可以完成更多的校验</span></span><br><span class="line"><span class="keyword">if</span>(row.getAreaName() == <span class="string">"中青旅"</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> POIException(<span class="string">"第"</span>+rowNum+<span class="string">"行，区域名字不能为中青旅！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.图片导入，再ProjectEvaluate定义类型为byte[]的属性就可以，ProjectVerifyBuilder定义ImgVerfiy校验列.就OK了</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (list.isSuccess()) &#123;</span><br><span class="line"><span class="comment">// 导入没有错误，打印数据</span></span><br><span class="line">System.out.println(JSON.toJSONString(list.getData()));</span><br><span class="line"><span class="comment">//打印图片byte数组长度</span></span><br><span class="line"><span class="keyword">byte</span>[] img = list.getData().get(<span class="number">0</span>).getImg();</span><br><span class="line">System.out.println(img);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 导入有错误，打印输出错误</span></span><br><span class="line">System.out.println(list.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.自定义校验器，导入需要校验字段,必须继承AbstractVerifyBuidler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProjectVerifyBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractVerifyBuidler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ProjectVerifyBuilder builder = <span class="keyword">new</span> ProjectVerifyBuilder();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProjectVerifyBuilder <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义列校验实体：提取的字段、提取列、校验规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ProjectVerifyBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"projectName"</span>, <span class="string">"B"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"项目名称"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"areaName"</span>, <span class="string">"C"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"所属区域"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"province"</span>, <span class="string">"D"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"省份"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"city"</span>, <span class="string">"E"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"市"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"people"</span>, <span class="string">"F"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"项目所属人"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"leader"</span>, <span class="string">"G"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"项目领导人"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"scount"</span>, <span class="string">"H"</span>, <span class="keyword">new</span> IntegerVerify(<span class="string">"总分"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"avg"</span>, <span class="string">"I"</span>, <span class="keyword">new</span> DoubleVerify(<span class="string">"历史平均分"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"createTime"</span>, <span class="string">"J"</span>, <span class="keyword">new</span> DateTimeVerify(<span class="string">"创建时间"</span>, <span class="string">"yyyy-MM-dd HH:mm"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"img"</span>, <span class="string">"K"</span>, <span class="keyword">new</span> ImgVerify(<span class="string">"图片"</span>, <span class="keyword">false</span>)));</span><br><span class="line"><span class="comment">// 必须调用</span></span><br><span class="line"><span class="keyword">super</span>.init();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导入示例图"><a href="#导入示例图" class="headerlink" title="导入示例图"></a>导入示例图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1118/104015_a439ba1a_1215820.png" alt="输入图片说明" title="QQ截图20181118104004.png"></p><h3 id="导出-1"><a href="#导出-1" class="headerlink" title="导出"></a>导出</h3><p>0.基础数据构建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单sheet数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> List&lt;ProjectEvaluate&gt; sheetData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * map型数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; mapData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复杂对象数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> List&lt;Student&gt; complexData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多sheet数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> List&lt;List&lt;?&gt;&gt; moreSheetData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.单sheet数据填充</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        ProjectEvaluate obj = <span class="keyword">new</span> ProjectEvaluate();</span><br><span class="line">        obj.setProjectName(<span class="string">"中青旅"</span> + i);</span><br><span class="line">        obj.setAreaName(<span class="string">"华东长三角"</span>);</span><br><span class="line">        obj.setProvince(<span class="string">"河北省"</span>);</span><br><span class="line">        obj.setCity(<span class="string">"保定市"</span>);</span><br><span class="line">        obj.setPeople(<span class="string">"张三"</span> + i);</span><br><span class="line">        obj.setLeader(<span class="string">"李四"</span> + i);</span><br><span class="line">        obj.setScount(<span class="number">50</span>);</span><br><span class="line">        obj.setAvg(<span class="number">60.0</span>);</span><br><span class="line">        obj.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        obj.setImg(ImageParseBytes(<span class="keyword">new</span> File(<span class="string">"src/test/java/excel/export/1.png"</span>)));</span><br><span class="line">        sheetData.add(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.map型数据填充</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; obj = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        obj.put(<span class="string">"name"</span>, <span class="string">"张三"</span> + i);</span><br><span class="line">        obj.put(<span class="string">"age"</span>, <span class="number">5</span> + i);</span><br><span class="line">        mapData.add(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.复杂对象数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 學生</span></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">// 學生所在的班級，用對象</span></span><br><span class="line">        stu.setClassRoom(<span class="keyword">new</span> ClassRoom(<span class="string">"六班"</span>));</span><br><span class="line">        <span class="comment">// 學生的更多信息，用map</span></span><br><span class="line">        Map&lt;String, Object&gt; moreInfo = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        moreInfo.put(<span class="string">"parent"</span>, <span class="keyword">new</span> Parent(<span class="string">"張無忌"</span>));</span><br><span class="line">        stu.setMoreInfo(moreInfo);</span><br><span class="line">        stu.setName(<span class="string">"张三"</span>);</span><br><span class="line">        complexData.add(stu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.多sheet数据填充</span></span><br><span class="line">    moreSheetData.add(sheetData);</span><br><span class="line">    moreSheetData.add(mapData);</span><br><span class="line">    moreSheetData.add(complexData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.简单导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.获取导出的数据体</span></span><br><span class="line"> <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">String[] hearder = &#123;<span class="string">"序号"</span>, <span class="string">"项目名称"</span>, <span class="string">"所属区域"</span>, <span class="string">"省份"</span>, <span class="string">"市"</span>, <span class="string">"项目所属人"</span>, <span class="string">"项目领导人"</span>, <span class="string">"得分"</span>, <span class="string">"平均分"</span>, <span class="string">"创建时间"</span>, <span class="string">"项目图片"</span>&#125;;</span><br><span class="line"><span class="comment">// 2.导出hearder对应的字段设置</span></span><br><span class="line">Column[] column = &#123;Column.field(<span class="string">"projectName"</span>), Column.field(<span class="string">"areaName"</span>), Column.field(<span class="string">"province"</span>),</span><br><span class="line">        Column.field(<span class="string">"city"</span>), Column.field(<span class="string">"people"</span>), Column.field(<span class="string">"leader"</span>), Column.field(<span class="string">"scount"</span>),</span><br><span class="line">        Column.field(<span class="string">"avg"</span>), Column.field(<span class="string">"createTime"</span>),</span><br><span class="line">        <span class="comment">// 项目图片</span></span><br><span class="line">        Column.field(<span class="string">"img"</span>)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(sheetData, ExportRules.simpleRule(column, hearder).title(<span class="string">"项目资源统计"</span>).sheetName(<span class="string">"mysheet1"</span>).autoNum(<span class="keyword">true</span>), <span class="keyword">true</span>,</span><br><span class="line">        (feildName, value, t, customStyle) -&gt; &#123;</span><br><span class="line">            <span class="comment">//此处指向回调逻辑，可以修改写入excel的值,以及单元格样式，如颜色等</span></span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export1.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="1导出图"><a href="#1导出图" class="headerlink" title="1导出图"></a>1导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1215/161804_3ddf0b6b_1215820.png" alt="输入图片说明" title="1.png"></p><p>2.复杂表格导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.表头设置,可以对应excel设计表头，一看就懂</span></span><br><span class="line">HashMap&lt;String, String&gt; headerRules = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">headerRules.put(<span class="string">"1,1,A,K"</span>, <span class="string">"项目资源统计"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,A,A"</span>, <span class="string">"序号"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,2,B,E"</span>, <span class="string">"基本信息"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,B,B"</span>, <span class="string">"项目名称"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,C,C"</span>, <span class="string">"所属区域"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,D,D"</span>, <span class="string">"省份"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,E,E"</span>, <span class="string">"市"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,F,F"</span>, <span class="string">"项目所属人"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,G,G"</span>, <span class="string">"市项目领导人"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,2,H,I"</span>, <span class="string">"分值"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,H,H"</span>, <span class="string">"得分"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,I,I"</span>, <span class="string">"平均分"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,J,J"</span>, <span class="string">"创建时间"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,K,K"</span>, <span class="string">"项目图片"</span>);</span><br><span class="line"><span class="comment">// 2.尾部设置，一般可以用来设计合计栏</span></span><br><span class="line">HashMap&lt;String, String&gt; footerRules = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">footerRules.put(<span class="string">"1,2,A,C"</span>, <span class="string">"注释:"</span>);</span><br><span class="line">footerRules.put(<span class="string">"1,2,D,K"</span>, <span class="string">"导出参考代码！"</span>);</span><br><span class="line"><span class="comment">// 3.导出hearder对应的字段设置</span></span><br><span class="line">Column[] column = &#123;</span><br><span class="line">        Column.field(<span class="string">"projectName"</span>),</span><br><span class="line">        <span class="comment">// 4.1设置此列宽度为10</span></span><br><span class="line">        Column.field(<span class="string">"areaName"</span>).width(<span class="number">10</span>),</span><br><span class="line">        <span class="comment">// 4.2设置此列下拉框数据</span></span><br><span class="line">        Column.field(<span class="string">"province"</span>).width(<span class="number">5</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"陕西省"</span>, <span class="string">"山西省"</span>, <span class="string">"辽宁省"</span>&#125;),</span><br><span class="line">        <span class="comment">// 4.3设置此列水平居右</span></span><br><span class="line">        Column.field(<span class="string">"city"</span>).align(HorizontalAlignment.RIGHT),</span><br><span class="line">        <span class="comment">// 4.4 设置此列垂直居上</span></span><br><span class="line">        Column.field(<span class="string">"people"</span>).valign(VerticalAlignment.TOP),</span><br><span class="line">        <span class="comment">// 4.5 设置此列单元格 自定义校验 只能输入文本</span></span><br><span class="line">        Column.field(<span class="string">"leader"</span>).width(<span class="number">4</span>).verifyCustom(<span class="string">"VALUE(F3:F500)"</span>, <span class="string">"我是提示"</span>),</span><br><span class="line">        <span class="comment">// 4.6设置此列单元格 整数 数据校验 ，同时设置背景色为棕色</span></span><br><span class="line">        Column.field(<span class="string">"scount"</span>).verifyIntNum(<span class="string">"10~20"</span>).backColor(IndexedColors.BROWN),</span><br><span class="line">        <span class="comment">// 4.7设置此列单元格 浮点数 数据校验， 同时设置字体颜色红色</span></span><br><span class="line">        Column.field(<span class="string">"avg"</span>).verifyFloatNum(<span class="string">"10.0~20.0"</span>).color(IndexedColors.RED),</span><br><span class="line">        <span class="comment">// 4.8设置此列单元格 日期 数据校验 ，同时宽度为20、限制用户表格输入、水平居中、垂直居中、背景色、字体颜色</span></span><br><span class="line">        Column.field(<span class="string">"createTime"</span>).width(<span class="number">20</span>).verifyDate(<span class="string">"2000-01-03 12:35~3000-05-06 23:23"</span>)</span><br><span class="line">                .align(HorizontalAlignment.LEFT).valign(VerticalAlignment.CENTER)</span><br><span class="line">                .backColor(IndexedColors.YELLOW).color(IndexedColors.GOLD),</span><br><span class="line">        <span class="comment">// 4.9项目图片</span></span><br><span class="line">        Column.field(<span class="string">"img"</span>)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 4.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(</span><br><span class="line">        sheetData,</span><br><span class="line">        ExportRules.complexRule(column, headerRules).autoNum(<span class="keyword">true</span>).footerRules(footerRules).sheetName(<span class="string">"mysheet2"</span>),</span><br><span class="line">        <span class="keyword">true</span>,</span><br><span class="line">        (fieldName, value, row, col) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"projectName"</span>.equals(fieldName) &amp;&amp; row.getProjectName().equals(<span class="string">"中青旅23"</span>)) &#123;</span><br><span class="line">                col.align(HorizontalAlignment.LEFT);</span><br><span class="line">                col.valign(VerticalAlignment.CENTER);</span><br><span class="line">                col.height(<span class="number">2</span>);</span><br><span class="line">                col.backColor(IndexedColors.RED);</span><br><span class="line">                col.color(IndexedColors.YELLOW);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">// 5.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export2.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="2导出图"><a href="#2导出图" class="headerlink" title="2导出图"></a>2导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1215/161814_61f83ff1_1215820.png" alt="输入图片说明" title="2.png"></p><p>3.复杂的对象级联导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">String[] hearder = &#123;<span class="string">"學生姓名"</span>, <span class="string">"所在班級"</span>, <span class="string">"所在學校"</span>, <span class="string">"更多父母姓名"</span>&#125;;</span><br><span class="line"><span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">Column[] column = &#123;Column.field(<span class="string">"name"</span>), Column.field(<span class="string">"classRoom.name"</span>), Column.field(<span class="string">"classRoom.school.name"</span>),</span><br><span class="line">        Column.field(<span class="string">"moreInfo.parent.name"</span>),&#125;;</span><br><span class="line"><span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(complexData, ExportRules.simpleRule(column, hearder).title(<span class="string">"學生基本信息"</span>), <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export3.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="3导出图"><a href="#3导出图" class="headerlink" title="3导出图"></a>3导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1209/193615_b483f034_1215820.png" alt="输入图片说明" title="4.png"></p><p>4.map对象的简单导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">String[] hearder = &#123;<span class="string">"姓名"</span>, <span class="string">"年龄"</span>&#125;;</span><br><span class="line"><span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">Column[] column = &#123;Column.field(<span class="string">"name"</span>),</span><br><span class="line">        Column.field(<span class="string">"age"</span>),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(mapData, ExportRules.simpleRule(column, hearder), <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export4.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="4导出图"><a href="#4导出图" class="headerlink" title="4导出图"></a>4导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1209/193608_c75b81ee_1215820.png" alt="输入图片说明" title="4.png"></p><p>5.模板导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">String[] hearder = &#123;<span class="string">"宝宝姓名"</span>, <span class="string">"宝宝昵称"</span>, <span class="string">"家长姓名"</span>, <span class="string">"手机号码"</span>, <span class="string">"宝宝生日"</span>, <span class="string">"月龄"</span>, <span class="string">"宝宝性别"</span>, <span class="string">"来源渠道"</span>, <span class="string">"市场人员"</span>, <span class="string">"咨询顾问"</span>, <span class="string">"客服顾问"</span>,</span><br><span class="line">    <span class="string">"分配校区"</span>, <span class="string">"备注"</span>&#125;;</span><br><span class="line"><span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">Column[] column = &#123;Column.field(<span class="string">"宝宝姓名"</span>), Column.field(<span class="string">"宝宝昵称"</span>), Column.field(<span class="string">"家长姓名"</span>),</span><br><span class="line">    Column.field(<span class="string">"手机号码"</span>).verifyText(<span class="string">"11~11"</span>, <span class="string">"请输入11位的手机号码！"</span>),</span><br><span class="line">    Column.field(<span class="string">"宝宝生日"</span>).verifyDate(<span class="string">"2000-01-01~3000-12-31"</span>),</span><br><span class="line">    Column.field(<span class="string">"月龄"</span>).width(<span class="number">4</span>).verifyCustom(<span class="string">"VALUE(F3:F6000)"</span>, <span class="string">"月齡格式：如1年2个月则输入14"</span>),</span><br><span class="line">    Column.field(<span class="string">"宝宝性别"</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"男"</span>, <span class="string">"女"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"来源渠道"</span>).width(<span class="number">12</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"品推"</span>, <span class="string">"市场"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"市场人员"</span>).width(<span class="number">6</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"张三"</span>, <span class="string">"李四"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"咨询顾问"</span>).width(<span class="number">6</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"张三"</span>, <span class="string">"李四"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"客服顾问"</span>).width(<span class="number">6</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"大唐"</span>, <span class="string">"银泰"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"分配校区"</span>).width(<span class="number">6</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"大唐"</span>, <span class="string">"银泰"</span>&#125;), Column.field(<span class="string">"备注"</span>)&#125;;</span><br><span class="line"><span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(Collections.emptyList(), ExportRules.simpleRule(column, hearder), <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export5.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="5导出图"><a href="#5导出图" class="headerlink" title="5导出图"></a>5导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1215/180646_50cc4004_1215820.png" alt="输入图片说明" title="5.png"></p><p>6.多sheet合并导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">Workbook emptyWorkbook = ExcelUtils.createEmptyWorkbook(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 2.执行导出到工作簿.1.项目数据2.map数据3.复杂对象数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; moreSheetData.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">        List&lt;ProjectEvaluate&gt; data1 = (ArrayList&lt;ProjectEvaluate&gt;) moreSheetData.get(i);</span><br><span class="line">        <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">        String[] hearder = &#123;<span class="string">"序号"</span>, <span class="string">"项目名称"</span>, <span class="string">"所属区域"</span>, <span class="string">"省份"</span>, <span class="string">"市"</span>, <span class="string">"项目所属人"</span>, <span class="string">"项目领导人"</span>, <span class="string">"得分"</span>, <span class="string">"平均分"</span>, <span class="string">"创建时间"</span>, <span class="string">"项目图片"</span>&#125;;</span><br><span class="line">        <span class="comment">// 2.导出hearder对应的字段设置</span></span><br><span class="line">        Column[] column = &#123;Column.field(<span class="string">"projectName"</span>), Column.field(<span class="string">"areaName"</span>), Column.field(<span class="string">"province"</span>),</span><br><span class="line">                Column.field(<span class="string">"city"</span>), Column.field(<span class="string">"people"</span>), Column.field(<span class="string">"leader"</span>), Column.field(<span class="string">"scount"</span>),</span><br><span class="line">                Column.field(<span class="string">"avg"</span>), Column.field(<span class="string">"createTime"</span>),</span><br><span class="line">                <span class="comment">// 项目图片</span></span><br><span class="line">                Column.field(<span class="string">"img"</span>)</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        ExcelUtils.fillBook(emptyWorkbook, data1, ExportRules.simpleRule(column, hearder).title(<span class="string">"项目资源统计"</span>).sheetName(<span class="string">"mysheet1"</span>).autoNum(<span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; data2 = (ArrayList&lt;Map&lt;String, Object&gt;&gt;) moreSheetData.get(i);</span><br><span class="line">        <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">        String[] hearder = &#123;<span class="string">"姓名"</span>, <span class="string">"年龄"</span>&#125;;</span><br><span class="line">        <span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">        Column[] column = &#123;Column.field(<span class="string">"name"</span>),</span><br><span class="line">                Column.field(<span class="string">"age"</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        ExcelUtils.fillBook(emptyWorkbook, data2, ExportRules.simpleRule(column, hearder).sheetName(<span class="string">"mysheet2"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">        List&lt;Student&gt; data3 = (ArrayList&lt;Student&gt;) moreSheetData.get(i);</span><br><span class="line">        <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">        String[] hearder = &#123;<span class="string">"學生姓名"</span>, <span class="string">"所在班級"</span>, <span class="string">"所在學校"</span>, <span class="string">"更多父母姓名"</span>&#125;;</span><br><span class="line">        <span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">        Column[] column = &#123;Column.field(<span class="string">"name"</span>), Column.field(<span class="string">"classRoom.name"</span>), Column.field(<span class="string">"classRoom.school.name"</span>),</span><br><span class="line">                Column.field(<span class="string">"moreInfo.parent.name"</span>),&#125;;</span><br><span class="line">        <span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">        ExcelUtils.fillBook(emptyWorkbook, data3, ExportRules.simpleRule(column, hearder).title(<span class="string">"學生基本信息"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">emptyWorkbook.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export6.xlsx"</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://996.icu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/link-996.icu-red.svg&quot; alt=&quot;996.icu&quot;&gt;&lt;/a&gt;&lt;
      
    
    </summary>
    
    
      <category term="Java" scheme="https://kanchai.club/categories/Java/"/>
    
    
      <category term="轮子工具" scheme="https://kanchai.club/tags/%E8%BD%AE%E5%AD%90%E5%B7%A5%E5%85%B7/"/>
    
      <category term="POI" scheme="https://kanchai.club/tags/POI/"/>
    
      <category term="Excel" scheme="https://kanchai.club/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>RedisKey设计类</title>
    <link href="https://kanchai.club/2020/03/17/RedisKey%E8%AE%BE%E8%AE%A1%E7%B1%BB/"/>
    <id>https://kanchai.club/2020/03/17/RedisKey%E8%AE%BE%E8%AE%A1%E7%B1%BB/</id>
    <published>2020-03-17T15:36:46.510Z</published>
    <updated>2020-03-17T15:34:22.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.common.utils.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成RedisKey工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年05月07日 15:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisKeyUtil</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主数据系统标识</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX = <span class="string">"ym"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分割字符，默认[:]，使用:可用于rdm分组查看</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_SPLIT_CHAR = <span class="string">":"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> module 模块名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> func   方法名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args   参数..</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(String <span class="keyword">module</span>, String func, String... args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keyBuilder(<span class="keyword">null</span>, <span class="keyword">module</span>, func, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> module 模块名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> func   方法名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> objStr 对象.toString()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(String <span class="keyword">module</span>, String func, String objStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keyBuilder(<span class="keyword">null</span>, <span class="keyword">module</span>, func, <span class="keyword">new</span> String[]&#123;objStr&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix 项目前缀</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> module 模块名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> func   方法名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> objStr 对象.toString()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(String prefix, String <span class="keyword">module</span>, String func, String objStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keyBuilder(prefix, <span class="keyword">module</span>, func, <span class="keyword">new</span> String[]&#123;objStr&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix 项目前缀</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> module 模块名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> func   方法名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args   参数..</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(String prefix, String <span class="keyword">module</span>, String func, String... args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 项目前缀</span></span><br><span class="line"><span class="keyword">if</span> (prefix == <span class="keyword">null</span>) &#123;</span><br><span class="line">prefix = KEY_PREFIX;</span><br><span class="line">&#125;</span><br><span class="line">StringBuilder key = <span class="keyword">new</span> StringBuilder(prefix);</span><br><span class="line"><span class="comment">// KEY_SPLIT_CHAR 为分割字符</span></span><br><span class="line">key.append(KEY_SPLIT_CHAR).append(<span class="keyword">module</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(func)) &#123;</span><br><span class="line">key.append(KEY_SPLIT_CHAR).append(func);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">key.append(KEY_SPLIT_CHAR).append(arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> key.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> redisKeyEnum 枚举对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> objStr       对象.toString()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(RedisKeyEnum redisKeyEnum, String... objStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keyBuilder(redisKeyEnum.getKeyPrefix(), redisKeyEnum.getModule(), redisKeyEnum.getFunc(), objStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>短信发送模板</title>
    <link href="https://kanchai.club/2020/03/17/%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81%E6%A8%A1%E6%9D%BF/"/>
    <id>https://kanchai.club/2020/03/17/%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-03-17T15:36:46.400Z</published>
    <updated>2020-03-17T15:34:27.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.enums.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里云短信模板</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年05月17日 17:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SmsTemplateEnum &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:通用验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">UNIVERSAL_VERIFICATION_CODE(<span class="string">"SMS_173141326"</span>, <span class="string">"您的验证码$&#123;code&#125;，该验证码5分钟内有效，请勿泄漏于他人！"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:身份验证验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">AUTHENTICATION_CODE(<span class="string">"SMS_173191624"</span>, <span class="string">"验证码$&#123;code&#125;，您正在进行身份验证，打死不要告诉别人哦！"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:登录确认验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LOGON_CONFIRMATION_AUTHENTICATION_CODE(<span class="string">"SMS_173191623"</span>, <span class="string">"验证码$&#123;code&#125;，您正在登录，若非本人操作，请勿泄露。"</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:登录异常验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LOGON_EXCEPTION_AUTHENTICATION_CODE(<span class="string">"SMS_173191622"</span>, <span class="string">"验证码$&#123;code&#125;，您正尝试异地登录，若非本人操作，请勿泄露。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:用户注册验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">USER_REGISTRATION_AUTHENTICATION_CODE(<span class="string">"SMS_173191621"</span>, <span class="string">"验证码$&#123;code&#125;，您正在注册成为新用户，感谢您的支持！"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:修改密码验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MODIFY_PASSWORD_AUTHENTICATION_CODE(<span class="string">"SMS_173191620"</span>, <span class="string">"验证码$&#123;code&#125;，您正在尝试修改登录密码，请妥善保管账户信息。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:信息变更验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">INFORMATION_CHANGE_VERIFICATION_CODE(<span class="string">"SMS_173191619"</span>, <span class="string">"验证码$&#123;code&#125;，您正在尝试变更重要信息，请妥善保管账户信息。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:医生资料审核不通过</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：用户资料审核不通过，发送短信告诉用户！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DATA_AUDIT_FAILED(<span class="string">"SMS_174986989"</span>, <span class="string">"抱歉，您暂未通过资质审核，未通过原因：$&#123;p2&#125;。客服电话：$&#123;p3&#125;"</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:医生资料审核通过</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-金额；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：用户资料审核通过，发送短信通知用户！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DATA_AUDIT_SUCCESS(<span class="string">"SMS_174986992"</span>, <span class="string">"恭喜，您已通过资质审核，请登录APP开启您的个人诊所之旅吧，完成首单可获得$&#123;p2&#125;元奖励哦！"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:用户注册通知</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-电话号码；p4-其他号码；p5-金额；p6-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：注册我方亚米健康产品后，发送此短信通知用户注册成功！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">USER_REGISTRATION_NOTICE(<span class="string">"SMS_174986988"</span>, <span class="string">"您已成功注册$&#123;p2&#125;，账号$&#123;p3&#125; ，初始密码 $&#123;p4&#125;。快去亚米健康完成医疗资质认证开启您的线上诊所赢取 $&#123;p5&#125; 元奖励。客服电话：$&#123;p6&#125;。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:电话预约成功</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-其他；p4-时间；p5-时间；p6-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：用户电话预约成功后，发送短信通知用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SUCCESSFUL_TELEPHONE_RESERVATION(<span class="string">"SMS_174991908"</span>, <span class="string">"您预约了$&#123;p2&#125;医生的$&#123;p3&#125;，时间$&#123;p4&#125;，共$&#123;p5&#125;分钟，到时您会接到$&#123;p6&#125;的来电，请保持电话畅通。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:图文问诊支付成功</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-金额；p3-其他；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：图文问诊支付成功后，向用户发送短信通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SUCCESSFUL_PAYMENT_FOR_CONSULTATION(<span class="string">"SMS_174991905"</span>, <span class="string">"您刚支付了$&#123;p2&#125;元向$&#123;p3&#125;医生医生提问。可在我的问诊/当前问诊中找到该问题，查看医生回复。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:图问问诊医生首次回复</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-其他号码；p4-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：图问问诊医生首次回复后，需要发送短信告诉用户，让用户及时查看订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DOCTOR_FIRST_REPLY(<span class="string">"SMS_174986972"</span>, <span class="string">"医生$&#123;p2&#125;回复了您的问题，请您及时查看并进行后续交流。问题将在$&#123;p3&#125;小时后关闭。 有疑问请联系客服 $&#123;p4&#125;。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:问诊电话开始短信提醒</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-其他；p4-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：问诊电话服务快要开始的时候，向患者发送短信提醒。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">INQUIRY_TELEPHONE_START_SHORT_MESSAGE_REMINDER(<span class="string">"SMS_174991891"</span>, <span class="string">"您预约了$&#123;p2&#125;医生的$&#123;p3&#125;服务即将开始，请您合理按排时间，注意接听。到时您会接到$&#123;p4&#125;的来电，请保持电话畅通。"</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:患者预约成功推送</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p0-其他；p1-其他；p2-时间；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：患者预约成功推送短信给医生，让医生及时联系患者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SUCCESSFUL_PUSH_OF_PATIENT_APPOINTMENT(<span class="string">"SMS_175245305"</span>, <span class="string">"$&#123;p0&#125;医生您好，$&#123;p1&#125;患者预约了电话问诊服务，请于$&#123;p2&#125;在亚米医疗APP端拨打电话"</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:医生电话问诊即将开始通知</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p0-其他；p1-其他；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：医生电话问诊即将开始通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DOCTOR_S_TELEPHONE_CONSULTATION_IS_ABOUT_TO_START(<span class="string">"SMS_175240289"</span>, <span class="string">"$&#123;p0&#125;医生您好，$&#123;p1&#125;患者预约的电话问诊服务即将开始，请及时拨打电话。"</span>),</span><br><span class="line">;</span><br><span class="line"><span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SmsTemplateEnum<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SmsTemplateEnum</span><span class="params">(String code, String content)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.code = code;</span><br><span class="line"><span class="keyword">this</span>.content = content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输入对应模板的参数，生成JSON格式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prams</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buildParams</span><span class="params">(Object... prams)</span> </span>&#123;</span><br><span class="line">JSONObject buildParams = <span class="keyword">new</span> JSONObject();</span><br><span class="line">String content = <span class="keyword">this</span>.content;</span><br><span class="line">Pattern pattern = Pattern.compile(<span class="string">"\\$\\&#123;[^&#125;]*\\&#125;"</span>);</span><br><span class="line">Matcher matcher = pattern.matcher(content);</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">List&lt;String&gt; logs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">String group = matcher.group(<span class="number">0</span>);</span><br><span class="line">logs.add(group);</span><br><span class="line">String key = group.replaceAll(<span class="string">"\\$|\\&#123;|\\&#125;"</span>, <span class="string">""</span>);</span><br><span class="line">buildParams.put(key, prams[index]);</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; logs.size(); i++) &#123;</span><br><span class="line">content = content.replace(logs.get(i), String.valueOf(prams[i]));</span><br><span class="line">&#125;</span><br><span class="line">String result = buildParams.toJSONString();</span><br><span class="line">LOGGER.info(<span class="string">"发送SMS内容为：&#123;&#125;"</span>, content);</span><br><span class="line">LOGGER.info(<span class="string">"发送SMS参数为：&#123;&#125;"</span>, result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据code获取验证码发送模板</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SmsTemplateEnum <span class="title">getCodeTemp</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">SmsTemplateEnum codeTemp = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">switch</span> (code) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"01"</span>:</span><br><span class="line"><span class="comment">//身份验证</span></span><br><span class="line">codeTemp = SmsTemplateEnum.AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"02"</span>:</span><br><span class="line"><span class="comment">//正常登录</span></span><br><span class="line">codeTemp = SmsTemplateEnum.LOGON_CONFIRMATION_AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"03"</span>:</span><br><span class="line"><span class="comment">//登录异常</span></span><br><span class="line">codeTemp = SmsTemplateEnum.LOGON_EXCEPTION_AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"04"</span>:</span><br><span class="line"><span class="comment">//用户注册</span></span><br><span class="line">codeTemp = SmsTemplateEnum.USER_REGISTRATION_AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"05"</span>:</span><br><span class="line"><span class="comment">//修改密码</span></span><br><span class="line">codeTemp = SmsTemplateEnum.MODIFY_PASSWORD_AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"06"</span>:</span><br><span class="line"><span class="comment">//信息变更</span></span><br><span class="line">codeTemp = SmsTemplateEnum.INFORMATION_CHANGE_VERIFICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">codeTemp = SmsTemplateEnum.UNIVERSAL_VERIFICATION_CODE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> codeTemp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq实现延时队列任务</title>
    <link href="https://kanchai.club/2020/03/17/rabbitmq%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1/"/>
    <id>https://kanchai.club/2020/03/17/rabbitmq%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1/</id>
    <published>2020-03-17T15:36:46.276Z</published>
    <updated>2020-03-17T15:34:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>此前实现过一个基于redis和jvm的延时队列任务执行，有个弊端就是吞吐量和可靠性上得不到保障，比如系统重启队列任务丢失，需要人工的加载等等。所以此次利用rabbitmq来实现一个延时。</p><a id="more"></a><p>此前实现过一个基于redis和jvm的延时队列任务执行，有个弊端就是吞吐量和可靠性上得不到保障，比如系统重启队列任务丢失，需要人工的加载等等。所以此次利用rabbitmq来实现一个延时…</p><h4 id="要开发肯定先安装MQ-MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。"><a href="#要开发肯定先安装MQ-MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。" class="headerlink" title="要开发肯定先安装MQ,MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。"></a>要开发肯定先安装MQ,MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#### 1.更新yum源</span><br><span class="line">&gt; yum update</span><br><span class="line"></span><br><span class="line">#### 2.安装docker</span><br><span class="line">&gt; yum install -y docker</span><br><span class="line"></span><br><span class="line">#### 3拉取镜像</span><br><span class="line">&gt; docker pull rabbitmq:management</span><br><span class="line"></span><br><span class="line">#### 4启动容器</span><br><span class="line">&gt; docker run -d --name rabbitmq --privileged=true -p 9158:5672 -p 9159:15672  -v /home/rabbit/data:/var/lib/rabbitmq -v /home/rabbit/log:/var/log/rabbitmq </span><br><span class="line">-v /home/rabbit/plugins:/plugins </span><br><span class="line">--hostname ymRabbit -e RABBITMQ_DEFAULT_VHOST=/ -e RABBITMQ_DEFAULT_USER=ym_rabbit -e RABBITMQ_DEFAULT_PASS=ym_rabbit d8f707718f06</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 5进入容器方式</span><br><span class="line">&gt; docker exec -it 容器ID /bin/bash</span><br><span class="line"></span><br><span class="line">#### 6退出容器</span><br><span class="line">&gt; exit 或者 Ctrl+p+q</span><br><span class="line"></span><br><span class="line">#### 7向容器发送命令</span><br><span class="line">&gt; docker exec -d 13dc7c8ce0bd rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><h4 id="两种延时方式"><a href="#两种延时方式" class="headerlink" title="两种延时方式"></a>两种延时方式</h4><ol><li>死信+普通交换器，依靠消息过期自动进入死信队列，然后消费死信队列的数据这个思路，但是由于这种方式不管设置队列过期时间还是消息过期时间，都不能达到单个队列消息灵活过期的目的。<br>比如，先放入队列10s过期消息，再放入2s过期。mq会检测头部10s是否过期，10s不过期的情况下，2s就算过去也不会跑到死信。</li><li>使用插件rabbitmq_delayed_message_exchange。这个可以很好的解决消息不能灵活过期的问题，但是有个弊端就是很难查看消息堆积的情况，因为他把要发送的延时消息存在本地的分布式mnesia 数据库中，其次过期时间为最大int值，超过这个值得代码判定重复过期设置。</li></ol><h4 id="延时插件的使用方式"><a href="#延时插件的使用方式" class="headerlink" title="延时插件的使用方式"></a>延时插件的使用方式</h4><ol><li>去MQ官网下载插件 ++<a href="https://www.rabbitmq.com/community-plugins.html++(rabbitmq_delayed_message_exchange)" target="_blank" rel="noopener">https://www.rabbitmq.com/community-plugins.html++(rabbitmq_delayed_message_exchange)</a></li><li>把插件放到MQ的安装目录的plugins下</li><li>然后执行rabbitmq-plugins enable rabbitmq_delayed_message_exchange 命令启用插件</li><li>然后就也可以在web页面查看新的交换器x-delayed-message（其实并不是真正意义上的，真正的只有4个）</li><li>然后上代码实现延时任务，配置文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">   rabbitmq:</span><br><span class="line">    host: 192.168.0.245</span><br><span class="line">    port: 9158</span><br><span class="line">    username: ym_rabbit</span><br><span class="line">    password: ym_rabbit</span><br><span class="line">    listener:</span><br><span class="line">      simple:</span><br><span class="line">        acknowledge-mode: manual #手动应答</span><br><span class="line">        retry:</span><br><span class="line">          enabled: true</span><br><span class="line"></span><br><span class="line"># 用户自定义配置</span><br><span class="line">config-center:</span><br><span class="line">  rabbitRuleConfig:</span><br><span class="line">    # 系统标志</span><br><span class="line">    systemMark: local</span><br><span class="line">    # 普通消息</span><br><span class="line">    normalExchange: topic.normal</span><br><span class="line">    # 延时消息</span><br><span class="line">    delayExchange: topic.delay</span><br><span class="line">    # 普通和延时消息死信</span><br><span class="line">    deadExchange: topic.dead</span><br></pre></td></tr></table></figure></li><li>spring中MQ的配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQConfig 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年05月07日 14:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------常量定义-----------------------</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String POINT = <span class="string">"."</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NORMAL = <span class="string">"nml"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAY = <span class="string">"dly"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE = <span class="string">"que"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------交换器定义----------------------------</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通交换器名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String NORMAL_EXCHANGE = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死信交换器名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DEAD_EXCHANGE = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时交换器名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DELAY_EXCHANGE = <span class="string">""</span>;</span><br><span class="line"><span class="comment">//-------------------------队列定义--------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String NORMAL_QUEUE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时队列存放任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DELAY_QUEUE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通死信队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DEAD_NORMAL_QUEUE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时死信队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DEAD_DELAY_QUEUE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ConfigCenterProperties configCenterProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">rabbitTemplate</span><span class="params">(CachingConnectionFactory rabbitListenerContainerFactory)</span> </span>&#123;</span><br><span class="line">RabbitTemplate rabbitTemplate = <span class="keyword">new</span> RabbitTemplate(rabbitListenerContainerFactory);</span><br><span class="line">rabbitTemplate.setUsePublisherConnection(<span class="keyword">true</span>);</span><br><span class="line">rabbitTemplate.setChannelTransacted(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RabbitRuleConfig rabbitRuleConfig = configCenterProperties.getRabbitRuleConfig();</span><br><span class="line">NORMAL_EXCHANGE = rabbitRuleConfig.getNormalExchange() + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DEAD_EXCHANGE = rabbitRuleConfig.getDeadExchange() + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DELAY_EXCHANGE = rabbitRuleConfig.getDelayExchange() + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">NORMAL_QUEUE = rabbitRuleConfig.getNormalExchange() + POINT + QUEUE + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DELAY_QUEUE = rabbitRuleConfig.getDelayExchange() + POINT + QUEUE + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DEAD_NORMAL_QUEUE = rabbitRuleConfig.getDeadExchange() + POINT + QUEUE + POINT + NORMAL + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DEAD_DELAY_QUEUE = rabbitRuleConfig.getDeadExchange() + POINT + QUEUE + POINT + DELAY + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory(ConnectionFactory connectionFactory) &#123;</span><br><span class="line">SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">factory.setConnectionFactory(connectionFactory);</span><br><span class="line">factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">factory.setMessageConverter(<span class="keyword">new</span> Jackson2JsonMessageConverter());</span><br><span class="line">factory.setChannelTransacted(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory2(ConnectionFactory connectionFactory) &#123;</span><br><span class="line">SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">factory.setConnectionFactory(connectionFactory);</span><br><span class="line">factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">factory.setMessageConverter(<span class="keyword">new</span> SerializerMessageConverter());</span><br><span class="line">factory.setChannelTransacted(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------交换器声明start---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TopicExchange <span class="title">normalExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(NORMAL_EXCHANGE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TopicExchange <span class="title">deadExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(DEAD_EXCHANGE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CustomExchange <span class="title">delayExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">args.put(<span class="string">"x-delayed-type"</span>, <span class="string">"topic"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> CustomExchange(DELAY_EXCHANGE, <span class="string">"x-delayed-message"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------交换器声明end---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------队列start---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">deadNormalQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(DEAD_NORMAL_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">deadDelayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(DEAD_DELAY_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">normalQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">params.put(<span class="string">"x-dead-letter-exchange"</span>, DEAD_EXCHANGE);</span><br><span class="line">params.put(<span class="string">"x-dead-letter-routing-key"</span>, DEAD_NORMAL_QUEUE);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(NORMAL_QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">delayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">params.put(<span class="string">"x-dead-letter-exchange"</span>, DEAD_EXCHANGE);</span><br><span class="line">params.put(<span class="string">"x-dead-letter-routing-key"</span>, DEAD_DELAY_QUEUE);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(DELAY_QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, params);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------队列end---------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------绑定start---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingNormalExchange</span><span class="params">(Queue normalQueue, TopicExchange normalExchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(normalQueue).to(normalExchange).with(NORMAL_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingNormalDeadExchange</span><span class="params">(Queue deadNormalQueue, TopicExchange deadExchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(deadNormalQueue).to(deadExchange).with(DEAD_NORMAL_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDelayExchange</span><span class="params">(Queue delayQueue, CustomExchange delayExchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(delayQueue).to(delayExchange).with(DELAY_QUEUE).noargs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDelayDeadExchange</span><span class="params">(Queue deadDelayQueue, TopicExchange deadExchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(deadDelayQueue).to(deadExchange).with(DEAD_DELAY_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------绑定end------------------------------------------</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>7.生产者代码开发,我这里将延时任务和普通消息分开了，所以有2个发送方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息给MQ</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年09月19日 11:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IMessageSenderSV</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(IMessageSenderSV<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送云信消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> messageTask 消息内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(NormalMessageTask messageTask)</span> </span>&#123;</span><br><span class="line">LOG.info(<span class="string">"发送[ &#123;&#125; ]消息到MQ"</span>, messageTask.getMessageTypeEnum().getDescribe());</span><br><span class="line">rabbitTemplate.setMessageConverter(<span class="keyword">new</span> Jackson2JsonMessageConverter());</span><br><span class="line">rabbitTemplate.convertAndSend(RabbitMQConfig.NORMAL_EXCHANGE, RabbitMQConfig.NORMAL_QUEUE, messageTask, (message) -&gt; &#123;</span><br><span class="line">MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">messageProperties.setMessageId(messageTask.getUuid());</span><br><span class="line">messageProperties.setType(messageTask.getMessageTypeEnum().getDescribe());</span><br><span class="line">messageProperties.setContentType(MessageProperties.CONTENT_TYPE_JSON);</span><br><span class="line">String sendTime = DateKit.parseDateToStr(DateKit.YYYY_MM_DD_HH_MM_SS, <span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">// 发送时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"send_time"</span>, sendTime);</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送延时任务给队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> task 任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendDelayTask</span><span class="params">(AbstractDelayedTask task)</span> </span>&#123;</span><br><span class="line">LOG.info(<span class="string">"发送延时任务 [ &#123;&#125;:&#123;&#125; ] 到MQ"</span>, task.getDescribe(), task.getDelay());</span><br><span class="line">rabbitTemplate.setMessageConverter(<span class="keyword">new</span> SerializerMessageConverter());</span><br><span class="line">rabbitTemplate.convertAndSend(RabbitMQConfig.DELAY_EXCHANGE, RabbitMQConfig.DELAY_QUEUE, task, (message) -&gt; &#123;</span><br><span class="line">MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line"><span class="keyword">long</span> nextDelay = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (task.getDelay() &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line"><span class="comment">//如果延时时间大于erlang最大数值，多次延时</span></span><br><span class="line">messageProperties.setDelay(Integer.MAX_VALUE);</span><br><span class="line">nextDelay = task.getDelay() - Integer.MAX_VALUE;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">messageProperties.setDelay(task.getDelay().intValue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下次延时的时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"next_delay"</span>, nextDelay);</span><br><span class="line">messageProperties.setMessageId(task.getUuid());</span><br><span class="line">messageProperties.setType(task.getDescribe());</span><br><span class="line">messageProperties.setContentType(MessageProperties.CONTENT_TYPE_SERIALIZED_OBJECT);</span><br><span class="line">String sendTime = DateKit.parseDateToStr(DateKit.YYYY_MM_DD_HH_MM_SS, <span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">// 发送时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"send_time"</span>, sendTime);</span><br><span class="line">String expirationTime = DateKit.parseDateToStr(DateKit.YYYY_MM_DD_HH_MM_SS, <span class="keyword">new</span> Date(System.currentTimeMillis() + task.getDelay()));</span><br><span class="line"><span class="comment">// 过期时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"expiration_time"</span>, expirationTime);</span><br><span class="line"><span class="comment">// 任务的入参</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"params"</span>, task.getParams().toString());</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多次延时，再次发送任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> task 任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nextDelay 下次延时时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAgain</span><span class="params">(Message task, <span class="keyword">final</span> <span class="keyword">long</span> nextDelay)</span> </span>&#123;</span><br><span class="line">rabbitTemplate.setMessageConverter(<span class="keyword">new</span> SerializerMessageConverter());</span><br><span class="line">rabbitTemplate.convertAndSend(RabbitMQConfig.DELAY_EXCHANGE, RabbitMQConfig.DELAY_QUEUE, task, (message) -&gt; &#123;</span><br><span class="line">MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line"><span class="keyword">long</span> nextDelayNew = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (nextDelay &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line"><span class="comment">//如果延时时间大于erlang最大数值，多次延时</span></span><br><span class="line">messageProperties.setDelay(Integer.MAX_VALUE);</span><br><span class="line">nextDelayNew = nextDelay - Integer.MAX_VALUE;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">messageProperties.setDelay((<span class="keyword">int</span>) nextDelay);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下次延时的时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"next_delay"</span>, nextDelayNew);</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.消费者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费MQ消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年09月18日 10:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@EnableRabbit</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IMessageReceiveSV</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(IMessageReceiveSV<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IMessageSenderSV messageSenderSV;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IYunxinUserSV yunxinUserSV;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;config-center.rabbitRuleConfig.deadExchange&#125;.que.nml.$&#123;config-center.rabbitRuleConfig.systemMark&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String normalDeadQueue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;config-center.rabbitRuleConfig.deadExchange&#125;.que.dly.$&#123;config-center.rabbitRuleConfig.systemMark&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String delayDeadQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"$&#123;config-center.rabbitRuleConfig.normalExchange&#125;.que.$&#123;config-center.rabbitRuleConfig.systemMark&#125;"</span>, containerFactory = <span class="string">"rabbitListenerContainerFactory"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">autoNormalMsg</span><span class="params">(@Payload NormalMessageTask messageTask, @Headers Map&lt;String, Object&gt; headers, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">channel.txSelect();</span><br><span class="line"><span class="keyword">boolean</span> success = normalHandle(messageTask);</span><br><span class="line"><span class="keyword">if</span> (success) &#123;</span><br><span class="line">channel.basicAck((<span class="keyword">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="keyword">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">channel.basicReject((<span class="keyword">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">channel.txCommit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动消费普通消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manualConsumptionNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rabbitTemplate.receiveAndReply(normalDeadQueue, (payload) -&gt; &#123;</span><br><span class="line">NormalMessageTask normalMessageTask = (NormalMessageTask) payload;</span><br><span class="line"><span class="keyword">boolean</span> success = normalHandle(normalMessageTask);</span><br><span class="line"><span class="keyword">if</span> (!success) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AmqpException(<span class="string">"普通消息消费异常"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费普通消息方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> messageTask</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">normalHandle</span><span class="params">(NormalMessageTask messageTask)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">MessageTypeEnum messageTypeEnum = messageTask.getMessageTypeEnum();</span><br><span class="line">Object msg = messageTask.getMsg();</span><br><span class="line">LOG.info(<span class="string">"消费消息 [ &#123;&#125; ],消息ID为[ &#123;&#125; ]"</span>, messageTypeEnum.getDescribe(), messageTask.getUuid());</span><br><span class="line"><span class="keyword">switch</span> (messageTypeEnum) &#123;</span><br><span class="line"><span class="keyword">case</span> YUN_XIN: &#123;</span><br><span class="line">yunxinUserSV.syncMessages((String) msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="comment">// do</span></span><br><span class="line">LOG.info(<span class="string">"未知消息:&#123;&#125;"</span>, (String) msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span> (e <span class="keyword">instanceof</span> BusinessException) &#123;</span><br><span class="line">LOG.info(e.getMessage());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">LOG.error(<span class="string">"消费异常:&#123;&#125;"</span>, ExceptionUtil.getExceptionMessage(e));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时消息,执行策略</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 能收到说明已经到时间了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"$&#123;config-center.rabbitRuleConfig.delayExchange&#125;.que.$&#123;config-center.rabbitRuleConfig.systemMark&#125;"</span>, containerFactory = <span class="string">"rabbitListenerContainerFactory2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">autoDelayMsg</span><span class="params">(@Payload Message message, @Headers Map&lt;String, Object&gt; headers, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">channel.txSelect();</span><br><span class="line"><span class="keyword">boolean</span> success = delayHandle(message);</span><br><span class="line"><span class="keyword">if</span> (success) &#123;</span><br><span class="line">channel.basicAck((<span class="keyword">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="keyword">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">channel.basicReject((<span class="keyword">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">channel.txCommit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费延时消息方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">delayHandle</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">Map&lt;String, Object&gt; headers = messageProperties.getHeaders();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 判定是否要多次延时</span></span><br><span class="line"><span class="keyword">long</span> nextDelay = (<span class="keyword">long</span>) headers.get(<span class="string">"next_delay"</span>);</span><br><span class="line"><span class="keyword">if</span> (nextDelay &gt; <span class="number">0</span>) &#123;</span><br><span class="line">messageSenderSV.sendAgain(message, nextDelay);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">byte</span>[] body = message.getBody();</span><br><span class="line"><span class="keyword">if</span> (body != <span class="keyword">null</span> &amp;&amp; body.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//判定为一个有效消息，进行执行</span></span><br><span class="line"><span class="keyword">try</span> (ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(body));) &#123;</span><br><span class="line">AbstractDelayedTask abstractDelayedTask = (AbstractDelayedTask) ois.readObject();</span><br><span class="line">LOG.info(<span class="string">"执行延时任务 [ &#123;&#125; ],消息ID为[ &#123;&#125; ],参数为:&#123;&#125;"</span>, abstractDelayedTask.getDescribe(), abstractDelayedTask.getUuid(), JSONObject.toJSONString(headers));</span><br><span class="line">abstractDelayedTask.excute();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line"><span class="keyword">if</span> (e <span class="keyword">instanceof</span> BusinessException) &#123;</span><br><span class="line">LOG.info(e.getMessage());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">LOG.error(<span class="string">"消费异常:&#123;&#125;"</span>, ExceptionUtil.getExceptionMessage(e));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动消费延时消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manualConsumptionDelay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rabbitTemplate.receiveAndReply(delayDeadQueue, (payload) -&gt; &#123;</span><br><span class="line">AbstractDelayedTask abstractDelayedTask = (AbstractDelayedTask) payload;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">abstractDelayedTask.excute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">LOG.error(ExceptionUtil.getExceptionMessage(e));</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AmqpException(<span class="string">"延时消息异常"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9.延时任务抽象类定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时队列Task</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 创建时间：2018年6月16日 下午3:34:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDelayedTask</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(AbstractDelayedTask<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务唯一性标志</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String uuid = UUID.uuid();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String describe;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多久后执行，单位毫秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Long delay;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法需要执行的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> JSONObject params;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractDelayedTask</span><span class="params">(String describe, <span class="keyword">long</span> delay, JSONObject params)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.describe = describe;</span><br><span class="line"><span class="keyword">this</span>.delay = delay;</span><br><span class="line"><span class="keyword">this</span>.params = params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">LOG.info(<span class="string">"执行延时任务开始===========》&#123;&#125;"</span>, describe);</span><br><span class="line"><span class="keyword">this</span>.run();</span><br><span class="line">LOG.info(<span class="string">"执行延时任务结束===========》&#123;&#125;"</span>, describe);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>使用方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//15分钟未支付取消订单操作</span></span><br><span class="line">JSONObject params = <span class="keyword">new</span> JSONObject();</span><br><span class="line">params.put(<span class="string">"id"</span>,<span class="string">"订单ID"</span>);</span><br><span class="line">UnPayCancelOrderTask unPayCancelOrderTask = <span class="keyword">new</span> UnPayCancelOrderTask(<span class="string">"下单后不支付自动取消订单"</span>, TimeUnit.MINUTES.toMillis(<span class="number">15</span>), params);</span><br><span class="line">messageSenderSV.sendDelayTask(unPayCancelOrderTask);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此前实现过一个基于redis和jvm的延时队列任务执行，有个弊端就是吞吐量和可靠性上得不到保障，比如系统重启队列任务丢失，需要人工的加载等等。所以此次利用rabbitmq来实现一个延时。&lt;/p&gt;
    
    </summary>
    
    
      <category term="轮子" scheme="https://kanchai.club/categories/%E8%BD%AE%E5%AD%90/"/>
    
    
      <category term="rabbitMQ" scheme="https://kanchai.club/tags/rabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>基于注解的Redis分布式锁</title>
    <link href="https://kanchai.club/2020/03/17/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://kanchai.club/2020/03/17/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2020-03-17T15:36:46.103Z</published>
    <updated>2020-03-17T15:34:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于之前用redis的lua脚本来实现安全的分布式锁,发现代码是加锁虽然灵活，但是非常的不便捷。每次需要加锁的时候，都要写出非常多的重复性代码。遂…………</p><a id="more"></a><ul><li>为什么使用基于注解的方式？</li></ul><p>基于之前用redis的lua脚本来实现安全的分布式锁,发现代码是加锁虽然灵活，但是非常的不便捷。每次需要加锁的时候，都要写出非常多的重复性代码。遂考虑利用AOP的方式，完成这一重复性的工作。<br>在没利用注解之前加锁方式如下,基本每次都要这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会话ID</span></span><br><span class="line">String uuid = UUID.uuid();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> getLock = RedisLockUtil.tryGetDistributedLock(key, uuid, <span class="number">5000</span>);</span><br><span class="line"><span class="keyword">if</span> (getLock) &#123;</span><br><span class="line">    <span class="comment">//如果获取锁，执行业务代码</span></span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">RedisLockUtil.releaseDistributedLock(key, uuid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于注解的使用放入如下，比较便捷</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Locker(key &#x3D; RedisKeyEnum.POOL_ORDER_LOCK, paramExp &#x3D; &quot;0&quot;, noGetMsg &#x3D; &quot;老铁来晚了!&quot;)</span><br><span class="line">public GrabAndAnswerVo grabOrderAnswer(String orderId, RedisKeyEnum poolType, User currentUser) &#123;</span><br><span class="line">Long workId &#x3D; orderExist(poolType, orderId);</span><br><span class="line">return doctorGrabOrderAnswer(poolType, orderId, currentUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下面介绍以下代码</li></ul><ol><li>首先AOP的使用方式我定义为利用注解来判断是否需要加锁，类似事务的方式，我们定义一个Locker注解,这个注解的功能可以看代码;</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 锁注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 625</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Locker &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要锁定的Key</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">RedisKeyEnum <span class="title">key</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要锁定的参数</span></span><br><span class="line"><span class="comment"> * 格式:</span></span><br><span class="line"><span class="comment"> * 0    表示一个参数toString</span></span><br><span class="line"><span class="comment"> * 0?payOrder    表示一个参数toString，且额外拼接锁定的Key为payOrder</span></span><br><span class="line"><span class="comment"> * 0#name 表示第一个参数的name字段</span></span><br><span class="line"><span class="comment"> * 0#name?payOrder  表示第一个参数的name字段，且额外拼接锁定的Key为payOrder</span></span><br><span class="line"><span class="comment"> * 0#name+1#name?payOrder表示第一个参数的name字段+第二个参数的name字段，且额外拼接锁定的Key为payOrder</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">paramExp</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务超时自动释放锁的时间,应该大于正常业务执行时间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">expireTime</span><span class="params">()</span> <span class="keyword">default</span> 10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最小持有锁的时间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">limitTime</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否持续竞争锁，是则阻塞方法直至获取锁，或者达到最大竞争次数释放锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">continueGet</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最大竞争次数。默认0不限次</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxGetNum</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拿不到锁，异常返回信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">noGetMsg</span><span class="params">()</span> <span class="keyword">default</span> "未获取锁"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现AOP的拦截规则</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 锁AOP拦截规则</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">public class LockerAspect &#123;</span><br><span class="line"></span><br><span class="line">private static Logger LOGGER &#x3D; LoggerFactory.getLogger(LockerAspect.class);</span><br><span class="line"></span><br><span class="line">@Pointcut(&quot;@annotation(com.ym.common.utils.annotation.Locker)&quot;)</span><br><span class="line">public void pointcut() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Around(&quot;pointcut()&quot;)</span><br><span class="line">public Object around(ProceedingJoinPoint joinPoint) &#123;</span><br><span class="line">Object proceed &#x3D; null;</span><br><span class="line">long startTime &#x3D; System.currentTimeMillis();</span><br><span class="line">Locker locker &#x3D; getAnnotation(joinPoint, Locker.class);</span><br><span class="line">Object[] args &#x3D; joinPoint.getArgs();</span><br><span class="line">&#x2F;&#x2F; 最大尝试次数</span><br><span class="line">int maxGetNum &#x3D; locker.maxGetNum();</span><br><span class="line">&#x2F;&#x2F; 会话标志</span><br><span class="line">String uuid &#x3D; UUID.uuid();</span><br><span class="line">&#x2F;&#x2F; 锁key</span><br><span class="line">String lockFiled &#x3D; getLockFiled(args, locker.paramExp());</span><br><span class="line">String lockKey &#x3D; RedisKeyUtil.keyBuilder(locker.key(), lockFiled);</span><br><span class="line">&#x2F;&#x2F; 过期时间</span><br><span class="line">long expireTime &#x3D; locker.expireTime();</span><br><span class="line">boolean lock &#x3D; RedisLockUtil.tryGetDistributedLock(lockKey, uuid, expireTime);</span><br><span class="line">int getNum &#x3D; 0;</span><br><span class="line">while (!lock &amp;&amp; locker.continueGet() &amp;&amp; (maxGetNum &#x3D;&#x3D; 0 || getNum &lt; maxGetNum)) &#123;</span><br><span class="line">&#x2F;&#x2F; 如果获取失败，且持续获取，且尝试次数小于最大次数</span><br><span class="line">Threads.sleep(100);</span><br><span class="line">lock &#x3D; RedisLockUtil.tryGetDistributedLock(lockKey, uuid, expireTime);</span><br><span class="line">&#125;</span><br><span class="line">if (!lock) &#123;</span><br><span class="line">throw new BusinessException(locker.noGetMsg());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; -------------------------------before-------------------------</span><br><span class="line">try &#123;</span><br><span class="line">proceed &#x3D; joinPoint.proceed();</span><br><span class="line">&#x2F;&#x2F; -------------------------------after-------------------------</span><br><span class="line">&#x2F;&#x2F; 如果业务时间小于最小持有锁时间，休眠一会</span><br><span class="line">long sleepTime &#x3D; locker.limitTime() - (System.currentTimeMillis() - startTime);</span><br><span class="line">if (sleepTime &gt; 0) &#123;</span><br><span class="line">Threads.sleep(sleepTime);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Throwable throwable) &#123;</span><br><span class="line">throwable.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">&#x2F;&#x2F; 释放锁</span><br><span class="line">RedisLockUtil.releaseDistributedLock(lockKey, uuid);</span><br><span class="line">&#125;</span><br><span class="line">return proceed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 根据表达式获取要锁的字段</span><br><span class="line"> *</span><br><span class="line"> * @param args</span><br><span class="line"> * @param expression 表达式</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">private String getLockFiled(Object[] args, String expression) &#123;</span><br><span class="line">if (args &#x3D;&#x3D; null || args.length &#x3D;&#x3D; 0 || StringUtils.isBlank(expression)) &#123;</span><br><span class="line">throw new UnsupportedOperationException(&quot;Locker所在方法参数为空! 请使用代码锁&quot;);</span><br><span class="line">&#125;</span><br><span class="line">String[] extraParams &#x3D; expression.split(&quot;\\?&quot;);</span><br><span class="line">String extraKey &#x3D; null;</span><br><span class="line">if (extraParams.length &gt; 1) &#123;</span><br><span class="line">extraKey &#x3D; extraParams[1];</span><br><span class="line">expression &#x3D; extraParams[0];</span><br><span class="line">&#125;</span><br><span class="line">String[] commboExpression &#x3D; expression.split(&quot;\\+&quot;);</span><br><span class="line">StringBuilder field &#x3D; new StringBuilder();</span><br><span class="line">for (String commbo : commboExpression) &#123;</span><br><span class="line">String[] split &#x3D; commbo.split(&quot;#&quot;);</span><br><span class="line">int argsNum &#x3D; 0;</span><br><span class="line">try &#123;</span><br><span class="line">if (split.length &#x3D;&#x3D; 1) &#123;</span><br><span class="line">argsNum &#x3D; Integer.parseInt(split[0]);</span><br><span class="line">field.append(String.valueOf(args[argsNum]));</span><br><span class="line">&#125; else &#123;</span><br><span class="line">argsNum &#x3D; Integer.parseInt(split[0]);</span><br><span class="line">Object fieldValue &#x3D; ReflectUtils.getFieldValue(args[argsNum], split[1]);</span><br><span class="line">field.append(String.valueOf(fieldValue));</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">throw new UnsupportedOperationException(&quot;Locker表达式paramExp不正确！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (extraKey !&#x3D; null) &#123;</span><br><span class="line">field.append(extraKey);</span><br><span class="line">&#125;</span><br><span class="line">return field.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 是否存在注解，如果存在就获取</span><br><span class="line"> *&#x2F;</span><br><span class="line">private &lt;T&gt; T getAnnotation(JoinPoint joinPoint, Class&lt;? extends Annotation&gt; t) &#123;</span><br><span class="line">Signature signature &#x3D; joinPoint.getSignature();</span><br><span class="line">MethodSignature methodSignature &#x3D; (MethodSignature) signature;</span><br><span class="line">Method method &#x3D; methodSignature.getMethod();</span><br><span class="line">if (method !&#x3D; null) &#123;</span><br><span class="line">return (T) method.getAnnotation(t);</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于之前用redis的lua脚本来实现安全的分布式锁,发现代码是加锁虽然灵活，但是非常的不便捷。每次需要加锁的时候，都要写出非常多的重复性代码。遂…………&lt;/p&gt;
    
    </summary>
    
    
      <category term="分布式锁" scheme="https://kanchai.club/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
    
      <category term="Redis锁" scheme="https://kanchai.club/tags/Redis%E9%94%81/"/>
    
      <category term="分布式" scheme="https://kanchai.club/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java根据文件流准确判定文件类型</title>
    <link href="https://kanchai.club/2020/03/17/Java%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E6%B5%81%E5%87%86%E7%A1%AE%E5%88%A4%E5%AE%9A%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/"/>
    <id>https://kanchai.club/2020/03/17/Java%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E6%B5%81%E5%87%86%E7%A1%AE%E5%88%A4%E5%AE%9A%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-03-17T15:36:45.980Z</published>
    <updated>2020-03-17T15:34:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>判断文件类型通常可以简单的通过文件的后缀判定，如123.MP3,则判定文件的格式是MP3可播放文件。但是到底能不能播放，其实并不是通过后缀…..</p><a id="more"></a><p>判断文件类型通常可以简单的通过文件的后缀判定，如123.MP3,则判定文件的格式是MP3可播放文件。但是到底能不能播放，其实并不是通过后缀判断的。而是通过文件本身的二进制数据，软件来解析到底一定的目的。话不多说上代码，通过判断文件流的前几个字节，来判断文件的类型。可以自己添加新的类型，类型不一定对，可以自己调试调整一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.common.utils.qiniu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTypeHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;String, String&gt; FILE_TYPE_MAP = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">FileTypeHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">//初始化文件类型信息</span></span><br><span class="line">getAllFileType();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2010-7-1</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Discription:[getAllFileType,常见文件头信息]&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:[shixing_11@sina.com]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFileType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"jpg"</span>, <span class="string">"FFD8FF"</span>); <span class="comment">//JPEG (jpg)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"png"</span>, <span class="string">"89504E47"</span>);  <span class="comment">//PNG (png)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"gif"</span>, <span class="string">"47494638"</span>);  <span class="comment">//GIF (gif)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"tif"</span>, <span class="string">"49492A00"</span>);  <span class="comment">//TIFF (tif)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"bmp"</span>, <span class="string">"424D"</span>); <span class="comment">//Windows Bitmap (bmp)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"dwg"</span>, <span class="string">"41433130"</span>); <span class="comment">//CAD (dwg)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"html"</span>, <span class="string">"68746D6C3E"</span>);  <span class="comment">//HTML (html)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"rtf"</span>, <span class="string">"7B5C727466"</span>);  <span class="comment">//Rich Text Format (rtf)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"xml"</span>, <span class="string">"3C3F786D6C"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"zip"</span>, <span class="string">"504B03041400000008005959104FFE4A759FF1"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"rar"</span>, <span class="string">"52617221"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"psd"</span>, <span class="string">"38425053"</span>);  <span class="comment">//Photoshop (psd)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"eml"</span>, <span class="string">"44656C69766572792D646174653A"</span>);  <span class="comment">//Email [thorough only] (eml)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"dbx"</span>, <span class="string">"CFAD12FEC5FD746F"</span>);  <span class="comment">//Outlook Express (dbx)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"pst"</span>, <span class="string">"2142444E"</span>);  <span class="comment">//Outlook (pst)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"xls"</span>, <span class="string">"D0CF11E0A1B11AE1000000000000000000000000000000003B"</span>);  <span class="comment">//MS Word</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"xlsx"</span>, <span class="string">"504B03041400060008000000210097454E26A"</span>);  <span class="comment">//MS Word</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"docx"</span>, <span class="string">"504B030414000600080000002100DFA4D26C5A"</span>);  <span class="comment">//MS Excel 注意：word 和 excel的文件头一样</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"pptx"</span>, <span class="string">"504B030414000600080000002100DFCC18F5AD"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"doc"</span>, <span class="string">"D0CF11E0A1B11AE1000000000000000000000000000000003E000300FEFF090006000000000000000000000001"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"ppt"</span>, <span class="string">"D0CF11E0A1B11AE1000000000000000000000000000000003E000300FEFF090006000000000000000000000003"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mdb"</span>, <span class="string">"5374616E64617264204A"</span>);  <span class="comment">//MS Access (mdb)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"wpd"</span>, <span class="string">"FF575043"</span>); <span class="comment">//WordPerfect (wpd)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"eps"</span>, <span class="string">"252150532D41646F6265"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"ps"</span>, <span class="string">"252150532D41646F6265"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"pdf"</span>, <span class="string">"255044462D312E"</span>);  <span class="comment">//Adobe Acrobat (pdf)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"qdf"</span>, <span class="string">"AC9EBD8F"</span>);  <span class="comment">//Quicken (qdf)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"pwl"</span>, <span class="string">"E3828596"</span>);  <span class="comment">//Windows Password (pwl)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"wav"</span>, <span class="string">"57415645,52494646"</span>);  <span class="comment">//Wave (wav)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"avi"</span>, <span class="string">"41564920"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"ram"</span>, <span class="string">"2E7261FD"</span>);  <span class="comment">//Real Audio (ram)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"rm"</span>, <span class="string">"2E524D46"</span>);  <span class="comment">//Real Media (rm)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mpg"</span>, <span class="string">"000001BA"</span>);  <span class="comment">//</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mov"</span>, <span class="string">"6D6F6F76"</span>);  <span class="comment">//Quicktime (mov)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"asf"</span>, <span class="string">"3026B2758E66CF11"</span>); <span class="comment">//Windows Media (asf)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mid"</span>, <span class="string">"4D546864"</span>);  <span class="comment">//MIDI (mid)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"aac"</span>, <span class="string">"FFF15C4013"</span>);  <span class="comment">//aac语音</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mp3"</span>, <span class="string">"FFE368"</span>);  <span class="comment">//mp3</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"webm"</span>, <span class="string">"1A45DFA39F42868101"</span>);  <span class="comment">//webm</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"m4a"</span>, <span class="string">"0000001C667479704D344120000000004D3441206D70"</span>);  <span class="comment">//webm</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据文件判定流类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getFileTypeByFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">InputStream is = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> getFileTypeByStream(is);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据流判定文件类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> is</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getFileTypeByStream</span><span class="params">(InputStream is)</span> </span>&#123;</span><br><span class="line">String filetype = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is.read(b);</span><br><span class="line">filetype = getFileTypeByByte(b);</span><br><span class="line">is.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> filetype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2010-7-1</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Discription:[getFileTypeByStream]&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> fileType</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:[shixing_11@sina.com]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getFileTypeByByte</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">String filetypeHex = String.valueOf(getFileHexString(b));</span><br><span class="line">Iterator&lt;Entry&lt;String, String&gt;&gt; entryiterator = FILE_TYPE_MAP.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (entryiterator.hasNext()) &#123;</span><br><span class="line">Entry&lt;String, String&gt; entry = entryiterator.next();</span><br><span class="line">String fileTypeHexValue = entry.getValue();</span><br><span class="line">String[] split = fileTypeHexValue.split(<span class="string">","</span>);</span><br><span class="line"><span class="keyword">for</span> (String sufix : split) &#123;</span><br><span class="line"><span class="keyword">if</span> (filetypeHex.toUpperCase().startsWith(sufix)) &#123;</span><br><span class="line"><span class="keyword">return</span> entry.getKey();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"txt"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2010-7-1</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Discription:[getFileHexString]&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> fileTypeHex</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:[shixing_11@sina.com]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getFileHexString</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">int</span> byteLength = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="keyword">null</span> || b.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b.length &lt; byteLength) &#123;</span><br><span class="line">byteLength = b.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteLength; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> v = b[i] &amp; <span class="number">0xFF</span>;</span><br><span class="line">String hv = Integer.toHexString(v);</span><br><span class="line"><span class="keyword">if</span> (hv.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">stringBuilder.append(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">stringBuilder.append(hv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;判断文件类型通常可以简单的通过文件的后缀判定，如123.MP3,则判定文件的格式是MP3可播放文件。但是到底能不能播放，其实并不是通过后缀…..&lt;/p&gt;
    
    </summary>
    
    
      <category term="轮子" scheme="https://kanchai.club/categories/%E8%BD%AE%E5%AD%90/"/>
    
    
      <category term="文件类型判断" scheme="https://kanchai.club/tags/%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>一些常用的linux基础命令</title>
    <link href="https://kanchai.club/2020/03/17/Linux%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://kanchai.club/2020/03/17/Linux%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2020-03-17T15:36:45.859Z</published>
    <updated>2020-03-17T15:34:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些日常用到的基础命令,防止重复去百度搜索,主要是Centos中,个人记不住的一些命令,ls什么的肯定没有记录</p><a id="more"></a><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><ul><li><p>端口占用情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; lsof -i tcp:8000 </span><br><span class="line">&gt; netstat -tunlp |grep 8000</span><br></pre></td></tr></table></figure></li><li><p>列出所有端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; netstat -ntlp</span><br></pre></td></tr></table></figure></li><li><p>根据程序名找进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ps axu |grep 程序名&#x2F;端口号&#x2F;IP等等</span><br></pre></td></tr></table></figure></li><li><p>查询指定端口是否已开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; firewall-cmd --query-port&#x3D;666&#x2F;tcp</span><br></pre></td></tr></table></figure></li><li><p>查看所有开放的端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; iptables -t filter -L INPUT</span><br></pre></td></tr></table></figure></li></ul><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><ul><li><p>查看防火墙状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; systemctl status firewalld</span><br></pre></td></tr></table></figure></li><li><p>开启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; systemctl start firewalld</span><br><span class="line">&gt; service firewalld start </span><br><span class="line">&gt; ##若遇到无法开启,先用：</span><br><span class="line">&gt; systemctl unmask firewalld.service </span><br><span class="line">&gt; 然后：</span><br><span class="line">&gt; systemctl start firewalld.service</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; systemctl stop firewalld</span><br></pre></td></tr></table></figure></li><li><p>对外开放端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; firewall-cmd --zone&#x3D;public --add-port&#x3D;8080&#x2F;tcp --permanent</span><br><span class="line">&gt;  iptables -I INPUT -p tcp --dport 9150 -j ACCEPT</span><br><span class="line">&gt; ##或者</span><br><span class="line">&gt; sudo vi sysconfig&#x2F;iptables</span><br><span class="line">&gt; ##然后</span><br><span class="line">&gt; -A INPUT -m state --state NEW -m tcp -p tcp --dport 9150 -j ACCEPT</span><br></pre></td></tr></table></figure></li><li><p>查看对外开放的端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; iptables -t filter -L INPUT</span><br></pre></td></tr></table></figure></li><li><p>重启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; firewall-cmd --reload systemctl </span><br><span class="line">&gt; restart firewalld.service；</span><br></pre></td></tr></table></figure></li><li><p>关闭指定端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; firewall-cmd --permanent --remove-port&#x3D;123&#x2F;tcp</span><br></pre></td></tr></table></figure></li></ul><h4 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h4><ul><li><p>关键词查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ##执行的是返回的内容 </span><br><span class="line">&gt; grep 正则 文件目录</span><br></pre></td></tr></table></figure></li><li><p>关键词查找及随后的目录中搜索字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; grep -R 正则 文件目录</span><br></pre></td></tr></table></figure></li></ul><h4 id="jvm相关"><a href="#jvm相关" class="headerlink" title="jvm相关"></a>jvm相关</h4><ul><li>查看JAVA进程并输出JVM参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jps -v</span><br></pre></td></tr></table></figure><ul><li><p>dump堆到文件,format指定输出格式，live指明是活着的对象,file指定文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jmap -dump:live,format&#x3D;b,file&#x3D;dump.hprof 28920</span><br></pre></td></tr></table></figure></li><li><p>查看堆的使用情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jmap -heap 28920</span><br></pre></td></tr></table></figure></li><li><p>查看堆中的对象信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jmap -histo:live 28920 | more</span><br></pre></td></tr></table></figure></li><li><p>查看当前程序的线程快照</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;  jstack -l 11494|more</span><br></pre></td></tr></table></figure></li><li><p>实时查看调整Jvm参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jinfo -flag 11494</span><br></pre></td></tr></table></figure></li></ul><h4 id="系统信息查看"><a href="#系统信息查看" class="headerlink" title="系统信息查看"></a>系统信息查看</h4><ul><li>显示电脑以及操作系统的相关信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; uname -a</span><br></pre></td></tr></table></figure></li><li>正在运行的内核版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat &#x2F;proc&#x2F;version</span><br></pre></td></tr></table></figure></li><li>发行版本信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat &#x2F;etc&#x2F;issue</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些日常用到的基础命令,防止重复去百度搜索,主要是Centos中,个人记不住的一些命令,ls什么的肯定没有记录&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://kanchai.club/categories/Linux/"/>
    
    
      <category term="基础命令" scheme="https://kanchai.club/tags/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Jvm" scheme="https://kanchai.club/tags/Jvm/"/>
    
  </entry>
  
  <entry>
    <title>基于Delayed实现一个定时延时任务</title>
    <link href="https://kanchai.club/2020/03/17/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>https://kanchai.club/2020/03/17/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2020-03-17T15:36:45.731Z</published>
    <updated>2020-03-17T15:34:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>在spring中加入一个守护线程+延时队列来处理一些延时任务.比如用户注册后5分钟后发送短信.等等</p><a id="more"></a><h3 id="延时任务Bean的实现"><a href="#延时任务Bean的实现" class="headerlink" title="延时任务Bean的实现"></a>延时任务Bean的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Delayed;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时队列Task</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 创建时间：2018年6月16日 下午3:34:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayedTask</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Runnable</span>&gt; <span class="keyword">implements</span> <span class="title">Delayed</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 到期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 问题对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T task;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong atomic = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DelayedTask</span><span class="params">(<span class="keyword">long</span> timeout, T t, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = System.nanoTime() + timeout;</span><br><span class="line">        <span class="keyword">this</span>.task = t;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.n = atomic.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回与此对象相关的剩余延迟时间，以给定的时间单位表示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unit.convert(<span class="keyword">this</span>.time - System.nanoTime(), TimeUnit.NANOSECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed other)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">if</span> (other == <span class="keyword">this</span>) <span class="comment">// compare zero ONLY if same object</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (other <span class="keyword">instanceof</span> DelayedTask) &#123;</span><br><span class="line">            DelayedTask&lt;Runnable&gt; x = (DelayedTask) other;</span><br><span class="line">            <span class="keyword">long</span> diff = time - x.time;</span><br><span class="line">            <span class="keyword">if</span> (diff &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (diff &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (getN() &lt; x.getN())</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> d = (getDelay(TimeUnit.NANOSECONDS) - other.getDelay(TimeUnit.NANOSECONDS));</span><br><span class="line">        <span class="keyword">return</span> (d == <span class="number">0</span>) ? <span class="number">0</span> : ((d &lt; <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.task;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> task.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (object <span class="keyword">instanceof</span> DelayedTask) &#123;</span><br><span class="line">            <span class="keyword">return</span> object.hashCode() == hashCode() ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring容器Bean的定义"><a href="#Spring容器Bean的定义" class="headerlink" title="Spring容器Bean的定义"></a>Spring容器Bean的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.web.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ym.common.utils.DelayedTask;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.DelayQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时队列任务管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 创建时间：2018年6月16日 下午3:35:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskQueueBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(TaskQueueBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TaskQueueBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> TaskQueueBean taskQueueDaemonThread = <span class="keyword">new</span> TaskQueueBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TaskQueueBean <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LazyHolder.taskQueueDaemonThread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行任务的线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ExecutorService executor = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个最初为空的新 DelayQueue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DelayQueue&lt;DelayedTask&lt;Runnable&gt;&gt; queue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 守护线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Thread daemonThread;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化守护线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.初始化线程池</span></span><br><span class="line">        <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">            started = <span class="keyword">true</span>;</span><br><span class="line">            executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line">            queue = <span class="keyword">new</span> DelayQueue&lt;&gt;();</span><br><span class="line">            <span class="comment">// 2.判断是否启动</span></span><br><span class="line">            <span class="keyword">if</span> (daemonThread != <span class="keyword">null</span> &amp;&amp; daemonThread.isInterrupted()) &#123;</span><br><span class="line">                daemonThread.start();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        daemonThread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    execute();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    daemonThread.interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        daemonThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        daemonThread.setName(<span class="string">"DelayedTask"</span>);</span><br><span class="line">        daemonThread.start();</span><br><span class="line">        LOG.info(<span class="string">"~~~~~~~~~~~~~~~~~~~~延时任务开启~~~~~~~~~~~~~~~~~~~~~~~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"[ task start &#123;&#125; ]:"</span>, System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">while</span> (started) &#123;</span><br><span class="line">            <span class="comment">// 从延迟队列中取值,如果没有对象过期则队列一直等待，</span></span><br><span class="line">            DelayedTask&lt;Runnable&gt; t1 = queue.take();</span><br><span class="line">            <span class="keyword">if</span> (t1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 修改问题的状态</span></span><br><span class="line">                Runnable task = t1.getTask();</span><br><span class="line">                <span class="keyword">if</span> (task == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                executor.execute(task);</span><br><span class="line">                LOG.info(<span class="string">"[ &#123;&#125;  task &#123;&#125; execute  ] "</span>, t1.getN(), t1.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加任务， time 延迟时间 task 任务 用户为问题设置延迟时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">long</span> time, Runnable task, String taskName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"请先启动taskQueneBean！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 转换成ns</span></span><br><span class="line">        <span class="keyword">long</span> nanoTime = TimeUnit.NANOSECONDS.convert(time, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="comment">// 创建一个任务</span></span><br><span class="line">        DelayedTask&lt;Runnable&gt; k = <span class="keyword">new</span> DelayedTask&lt;Runnable&gt;(nanoTime, task, taskName);</span><br><span class="line">        <span class="comment">// 将任务放在延迟的队列中</span></span><br><span class="line">        queue.put(k);</span><br><span class="line">        LOG.info(<span class="string">"新任务：&#123;&#125;加入队列，当前队列任务数量：&#123;&#125;"</span>, taskName, queue.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">endTask</span><span class="params">(DelayedTask&lt;Runnable&gt; task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"请先启动taskQueneBean！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.remove(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手动关闭任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (started) &#123;</span><br><span class="line">            LOG.info(<span class="string">"shutdown TaskQueueBean"</span>);</span><br><span class="line">            started = <span class="keyword">false</span>;</span><br><span class="line">            daemonThread.interrupt();</span><br><span class="line">            executor.shutdown();</span><br><span class="line">            daemonThread = <span class="keyword">null</span>;</span><br><span class="line">            queue = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在spring中加入一个守护线程+延时队列来处理一些延时任务.比如用户注册后5分钟后发送短信.等等&lt;/p&gt;
    
    </summary>
    
    
      <category term="轮子" scheme="https://kanchai.club/categories/%E8%BD%AE%E5%AD%90/"/>
    
    
      <category term="轮子" scheme="https://kanchai.club/tags/%E8%BD%AE%E5%AD%90/"/>
    
      <category term="Spring" scheme="https://kanchai.club/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>实现基于Redis的lua的分布式锁</title>
    <link href="https://kanchai.club/2020/03/17/%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8ERedis%E7%9A%84lua%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://kanchai.club/2020/03/17/%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8ERedis%E7%9A%84lua%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2020-03-17T15:36:45.602Z</published>
    <updated>2020-03-17T15:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于目前有需求需要实现一个分布式锁,用zk的话由于项目本身暂时没有用到zk,所以暂不考虑zk锁.用redis的lua脚本来实现安全的分布式锁,保证指令的原子性.</p><a id="more"></a><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.common.utils.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ym.common.utils.Sha1Util;</span><br><span class="line"><span class="keyword">import</span> com.ym.common.utils.spring.SpringUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.script.RedisScript;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于redis lua分布式锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年05月08日 16:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(RedisLockUtil<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long SUCCESS = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁lua脚本,不可重入,reqId只是为了解锁使用,代表当前线程在使用资源,给UUID比较好</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SCRIPT_LOCK = <span class="string">"if redis.call('setnx', KEYS[1], ARGV[1]) == 1 then redis.call('pexpire', KEYS[1], ARGV[2]) return 1 else return 0 end"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁lua脚本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SCRIPT_UNLOCK = <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁脚本sha1值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SCRIPT_LOCK_SHA1 = Sha1Util.encrypt(SCRIPT_LOCK);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁脚本sha1值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SCRIPT_UNLOCK_SHA1 = Sha1Util.encrypt(SCRIPT_UNLOCK);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部持有模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RedisTemplate redisTemplate = (RedisTemplate) SpringUtil.getObject(<span class="string">"redisTemplate"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取分布式锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey                锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId              请求标识,唯一ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTimeMilliseconds 超期时间，多少毫秒后这把锁自动释放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回true表示拿到锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryGetDistributedLock</span><span class="params">(String lockKey, String requestId, <span class="keyword">int</span> expireTimeMilliseconds)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"[&#123;&#125;]尝试获取[&#123;&#125;]锁,超时时间为:&#123;&#125;毫秒"</span>, requestId, lockKey, expireTimeMilliseconds);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 脚本设置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> RedisScript&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getSha1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> SCRIPT_LOCK_SHA1;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Class&lt;Long&gt; <span class="title">getResultType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Long<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getScriptAsString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> SCRIPT_LOCK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        Object result = redisTemplate.execute(</span><br><span class="line">                redisScript,<span class="comment">// lua脚本</span></span><br><span class="line">                Collections.singletonList(lockKey),<span class="comment">// KEYS[1]</span></span><br><span class="line">                requestId, <span class="comment">// ARGV[1]</span></span><br><span class="line">                expireTimeMilliseconds <span class="comment">// ARGV[2]</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">boolean</span> b = SUCCESS.equals(result);</span><br><span class="line">        LOGGER.info(<span class="string">"释放结果:"</span>, b);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放分布式锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey   锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId 请求标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回true表示释放锁成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">releaseDistributedLock</span><span class="params">(String lockKey, String requestId)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"[&#123;&#125;]释放锁[&#123;&#125;]锁"</span>, requestId, lockKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * lua脚本</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> RedisScript&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getSha1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> SCRIPT_UNLOCK_SHA1;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Class&lt;Long&gt; <span class="title">getResultType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Long<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getScriptAsString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> SCRIPT_UNLOCK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        Object result = redisTemplate.execute(</span><br><span class="line">                redisScript,</span><br><span class="line">                Collections.singletonList(lockKey),</span><br><span class="line">                requestId</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">boolean</span> b = SUCCESS.equals(result);</span><br><span class="line">        LOGGER.info(<span class="string">"释放结果:"</span>, b);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于目前有需求需要实现一个分布式锁,用zk的话由于项目本身暂时没有用到zk,所以暂不考虑zk锁.用redis的lua脚本来实现安全的分布式锁,保证指令的原子性.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="https://kanchai.club/categories/Redis/"/>
    
    
      <category term="分布式" scheme="https://kanchai.club/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="Redis" scheme="https://kanchai.club/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>上传自己的git项目到maven</title>
    <link href="https://kanchai.club/2020/03/17/%E4%B8%8A%E4%BC%A0%E8%87%AA%E5%B7%B1%E7%9A%84git%E9%A1%B9%E7%9B%AE%E5%88%B0maven/"/>
    <id>https://kanchai.club/2020/03/17/%E4%B8%8A%E4%BC%A0%E8%87%AA%E5%B7%B1%E7%9A%84git%E9%A1%B9%E7%9B%AE%E5%88%B0maven/</id>
    <published>2020-03-17T15:36:45.470Z</published>
    <updated>2020-03-17T15:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>上传自己的git项目到maven，结合两位博客成功上传。</p><a id="more"></a><h3 id="感谢两位博主，地址分别为"><a href="#感谢两位博主，地址分别为" class="headerlink" title="感谢两位博主，地址分别为"></a>感谢两位博主，地址分别为</h3><ol><li><a href="https://www.jianshu.com/p/8c3d7fb09bce" target="_blank" rel="noopener">https://www.jianshu.com/p/8c3d7fb09bce</a></li><li><a href="https://blog.csdn.net/sinat_23290725/article/details/85018092" target="_blank" rel="noopener">https://blog.csdn.net/sinat_23290725/article/details/85018092</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上传自己的git项目到maven，结合两位博客成功上传。&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发工具" scheme="https://kanchai.club/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="maven" scheme="https://kanchai.club/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>mongo搭建副本集</title>
    <link href="https://kanchai.club/2020/03/17/mongo%E6%90%AD%E5%BB%BA%E5%89%AF%E6%9C%AC%E9%9B%86/"/>
    <id>https://kanchai.club/2020/03/17/mongo%E6%90%AD%E5%BB%BA%E5%89%AF%E6%9C%AC%E9%9B%86/</id>
    <published>2020-03-17T15:36:45.353Z</published>
    <updated>2020-03-17T15:35:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>搭建副本集的作用和其他数据库思路大致一样，主从配置，仲裁节点，也就是说最起码要保证3个节点….</p><a id="more"></a><h3 id="Replica-Set介绍"><a href="#Replica-Set介绍" class="headerlink" title="Replica Set介绍"></a>Replica Set介绍</h3><blockquote><p>中文翻译叫做副本集,其实简单来说就是集群当中包含了多份数据，保证主节点挂掉了，备节点能继续提供数据服务，提供的前提就是数据需要和主节点一致。</p></blockquote><p><img src="https://images.gitee.com/uploads/images/2019/0112/092857_9bb8ae47_1215820.png" alt="输入图片说明" title="1358056331_2790.png"></p><ol><li><p>Mongodb(M)表示主节点，Mongodb(S)表示备节点，Mongodb(A)表示仲裁节点。主备节点存储数据，仲裁节点不存储数据。客户端同时连接主节点与备节点，不连接仲裁节点。</p></li><li><p>默认设置下，主节点提供所有增删查改服务，备节点不提供任何服务。但是可以通过设置使备节点提供查询服务，这样就可以减少主节点的压力，当客户端进行数据查询时，请求自动转到备节点上。这个设置叫做Read Preference Modes，同时Java客户端提供了简单的配置方式，可以不必直接对数据库进行操作。</p></li><li><p>仲裁节点是一种特殊的节点，它本身并不存储数据，主要的作用是决定哪一个备节点在主节点挂掉之后提升为主节点，所以客户端不需要连接此节点。这里虽然只有一个备节点，但是仍然需要一个仲裁节点来提升备节点级别。我开始也不相信必须要有仲裁节点，但是自己也试过没仲裁节点的话，主节点挂了备节点还是备节点，所以咱们还是需要它的。</p></li></ol><h3 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h3><ol><li><p>般情况下不会把数据目录建立在mongodb的解压目录下，不过这里方便起见，就建在mongodb解压目录下吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;mongodb&#x2F;data&#x2F;master </span><br><span class="line">mkdir -p &#x2F;mongodb&#x2F;data&#x2F;slaver </span><br><span class="line">mkdir -p &#x2F;mongodb&#x2F;data&#x2F;arbiter  </span><br><span class="line">#三个目录分别对应主，备，仲裁节点</span><br></pre></td></tr></table></figure></li><li><p>建立配置文件,由于配置比较多，所以我们将配置写到文件里，以文件的方式启动，以下配置文件仔细看可以说是只有端口不同，搭建的伪集群。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#master.conf  主节点配置</span><br><span class="line"></span><br><span class="line">#数据存放目录</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;data&#x2F;master  </span><br><span class="line">#日志存放路径</span><br><span class="line">logpath&#x3D;&#x2F;mongodb&#x2F;log&#x2F;master.log</span><br><span class="line">#进程文件</span><br><span class="line">pidfilepath&#x3D;&#x2F;mongodb&#x2F;master.pid</span><br><span class="line">#为每一个数据库按照数据库名建立文件夹存放</span><br><span class="line">directoryperdb&#x3D;true</span><br><span class="line">#以追加的方式记录日志</span><br><span class="line">logappend&#x3D;true</span><br><span class="line">#replica set的名字</span><br><span class="line">replSet&#x3D;testrs</span><br><span class="line">#绑定暴露的ID地址</span><br><span class="line">bind_ip&#x3D;127.0.0.1</span><br><span class="line">#端口</span><br><span class="line">port&#x3D;27017</span><br><span class="line">#mongodb操作日志文件的最大大小。单位为Mb，默认为硬盘剩余空间的5%</span><br><span class="line">oplogSize&#x3D;10000</span><br><span class="line">#以后台方式运行进程</span><br><span class="line">fork&#x3D;true</span><br><span class="line">#不预先分配存储</span><br><span class="line">noprealloc&#x3D;true</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#master.conf  副本节点配置</span><br><span class="line">#slaver.conf</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;data&#x2F;slaver</span><br><span class="line">logpath&#x3D;&#x2F;mongodb&#x2F;log&#x2F;slaver.log</span><br><span class="line">pidfilepath&#x3D;&#x2F;mongodb&#x2F;slaver.pid</span><br><span class="line">directoryperdb&#x3D;true</span><br><span class="line">logappend&#x3D;true</span><br><span class="line">replSet&#x3D;testrs</span><br><span class="line">bind_ip&#x3D;127.0.0.1</span><br><span class="line">port&#x3D;27018</span><br><span class="line">oplogSize&#x3D;10000</span><br><span class="line">fork&#x3D;true</span><br><span class="line">noprealloc&#x3D;true</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#arbiter.conf  仲裁节点配置</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;data&#x2F;arbiter</span><br><span class="line">logpath&#x3D;&#x2F;mongodb&#x2F;log&#x2F;arbiter.log</span><br><span class="line">pidfilepath&#x3D;&#x2F;mongodb&#x2F;arbiter.pid</span><br><span class="line">directoryperdb&#x3D;true</span><br><span class="line">logappend&#x3D;true</span><br><span class="line">replSet&#x3D;testrs</span><br><span class="line">bind_ip&#x3D;127.0.0.1</span><br><span class="line">port&#x3D;27019</span><br><span class="line">oplogSize&#x3D;10000</span><br><span class="line">fork&#x3D;true</span><br><span class="line">noprealloc&#x3D;true</span><br></pre></td></tr></table></figure><ol start="3"><li>启动mongo</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;monood -f master.conf</span><br><span class="line">.&#x2F;mongod -f slaver.conf</span><br><span class="line">.&#x2F;mongod -f arbiter.conf</span><br></pre></td></tr></table></figure><ol start="4"><li>开始配置主从、仲裁节点，可以通过客户端连接mongodb，也可以直接在三个节点中选择一个连接mongodb。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;.&#x2F;mongo 127.0.0.1:27017   #ip和port是某个节点的地址</span><br><span class="line">&gt;use admin</span><br><span class="line">&gt;cfg&#x3D;&#123; _id:&quot;testrs&quot;, members:[ &#123;_id:0,host:&#39;127.0.0.1:27017&#39;,priority:2&#125;, &#123;_id:1,host:&#39;127.0.0.1:27017&#39;,priority:1&#125;, </span><br><span class="line">&#123;_id:2,host:&#39;127.0.0.1:27017&#39;,arbiterOnly:true&#125;] &#125;;</span><br><span class="line">&gt;rs.initiate(cfg)             #使配置生效</span><br></pre></td></tr></table></figure><blockquote><p>cfg是可以任意的名字，当然最好不要是mongodb的关键字，conf，config都可以。最外层的_id表示replica set的名字，members里包含的是所有节点的地址以及优先级。优先级最高的即成为主节点，即这里的127.0.0.1:27017。特别注意的是，对于仲裁节点，需要有个特别的配置——arbiterOnly:true。这个千万不能少了，不然主备模式就不能生效。配置的生效时间根据不同的机器配置会有长有短，配置不错的话基本上十几秒内就能生效，有的配置需要一两分钟。如果生效了，执行rs.status()命令会看到如下信息：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">        &quot;set&quot; : &quot;testrs&quot;,</span><br><span class="line">        &quot;date&quot; : ISODate(&quot;2013-01-05T02:44:43Z&quot;),</span><br><span class="line">        &quot;myState&quot; : 1,</span><br><span class="line">        &quot;members&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;_id&quot; : 0,</span><br><span class="line">                        &quot;name&quot; : &quot;127.0.0.1:27017&quot;,</span><br><span class="line">                        &quot;health&quot; : 1,</span><br><span class="line">                        &quot;state&quot; : 1,</span><br><span class="line">                        &quot;stateStr&quot; : &quot;PRIMARY&quot;,</span><br><span class="line">                        &quot;uptime&quot; : 200,</span><br><span class="line">                        &quot;optime&quot; : Timestamp(1357285565000, 1),</span><br><span class="line">                        &quot;optimeDate&quot; : ISODate(&quot;2013-01-04T07:46:05Z&quot;),</span><br><span class="line">                        &quot;self&quot; : true</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;_id&quot; : 1,</span><br><span class="line">                        &quot;name&quot; : &quot;127.0.0.1:27018&quot;,</span><br><span class="line">                        &quot;health&quot; : 1,</span><br><span class="line">                        &quot;state&quot; : 2,</span><br><span class="line">                        &quot;stateStr&quot; : &quot;SECONDARY&quot;,</span><br><span class="line">                        &quot;uptime&quot; : 200,</span><br><span class="line">                        &quot;optime&quot; : Timestamp(1357285565000, 1),</span><br><span class="line">                        &quot;optimeDate&quot; : ISODate(&quot;2013-01-04T07:46:05Z&quot;),</span><br><span class="line">                        &quot;lastHeartbeat&quot; : ISODate(&quot;2013-01-05T02:44:42Z&quot;),</span><br><span class="line">                        &quot;pingMs&quot; : 0</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;_id&quot; : 2,</span><br><span class="line">                        &quot;name&quot; : &quot;127.0.0.1:27019&quot;,</span><br><span class="line">                        &quot;health&quot; : 1,</span><br><span class="line">                        &quot;state&quot; : 7,</span><br><span class="line">                        &quot;stateStr&quot; : &quot;ARBITER&quot;,</span><br><span class="line">                        &quot;uptime&quot; : 200,</span><br><span class="line">                        &quot;lastHeartbeat&quot; : ISODate(&quot;2013-01-05T02:44:42Z&quot;),</span><br><span class="line">                        &quot;pingMs&quot; : 0</span><br><span class="line">                &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果配置正在生效，其中会包含如下信息,同时可以查看对应节点的日志，发现正在等待别的节点生效或者正在分配数据文件：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;stateStr&quot; : &quot;RECOVERING&quot;</span><br></pre></td></tr></table></figure></p></blockquote><p> 现在基本上已经完成了集群的所有搭建工作。至于测试工作，可以留给大家自己试试。一个是往主节点插入数据，能从备节点查到之前插入的数据（查询备节点可能会遇到某个问题，可以自己去网上查查看）。二是停掉主节点，备节点能变成主节点提供服务。三是恢复主节点，备节点也能恢复其备的角色，而不是继续充当主的角色。二和三都可以通过rs.status()命令实时查看集群的变化。</p><p> <a href="https://blog.csdn.net/luonanqin/article/details/8497860/" target="_blank" rel="noopener">转载来源</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建副本集的作用和其他数据库思路大致一样，主从配置，仲裁节点，也就是说最起码要保证3个节点….&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mongo" scheme="https://kanchai.club/categories/Mongo/"/>
    
    
      <category term="mongo集群" scheme="https://kanchai.club/tags/mongo%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>IDEA快捷键</title>
    <link href="https://kanchai.club/2020/03/17/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://kanchai.club/2020/03/17/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2020-03-17T15:36:45.229Z</published>
    <updated>2020-03-17T15:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>IDEA快捷键比较全面的</p><a id="more"></a><h3 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h3><ol><li>Ctrl+Shift + Enter，语句完成</li><li>“！”，否定完成，输入表达式时按 “！”键</li><li>Ctrl+E，最近的文件</li><li>Ctrl+Shift+E，最近更改的文件</li><li>Shift+Click，可以关闭文件</li><li>Ctrl+[ OR ]，可以跑到大括号的开头与结尾</li><li>Ctrl+F12，可以显示当前文件的结构</li><li>Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择</li><li>Ctrl+N，可以快速打开类</li><li>Ctrl+Shift+N，可以快速打开文件</li><li>Alt+Q，可以看到当前方法的声明</li><li>Ctrl+P，可以显示参数信息</li><li>Ctrl+Shift+Insert，可以选择剪贴板内容并插入</li><li>Alt+Insert，可以生成构造器/Getter/Setter等</li><li>Ctrl+Alt+V，可以引入变量。例如：new String();  自动导入变量定义</li><li>Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch</li><li>Ctrl+Enter，导入包，自动修正</li><li>Ctrl+Alt+L，格式化代码</li><li>Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作</li><li>Ctrl+Alt+O，优化导入的类和包</li><li>Ctrl+R，替换文本</li><li>Ctrl+F，查找文本</li><li>Ctrl+Shift+Space，自动补全代码</li><li>Ctrl+空格，代码提示（与系统输入法快捷键冲突）</li><li>Ctrl+Shift+Alt+N，查找类中的方法或变量</li><li>Alt+Shift+C，最近的更改</li><li>Alt+Shift+Up/Down，上/下移一行</li><li>Shift+F6，重构 - 重命名</li><li>Ctrl+X，删除行</li><li>Ctrl+D，复制行</li><li>Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）</li><li>Ctrl+J，自动代码（例如：serr）</li><li>Ctrl+Alt+J，用动态模板环绕</li><li>Ctrl+H，显示类结构图（类的继承层次）</li><li>Ctrl+Q，显示注释文档</li><li>Alt+F1，查找代码所在位置</li><li>Alt+1，快速打开或隐藏工程面板</li><li>Ctrl+Alt+left/right，返回至上次浏览的位置</li><li>Alt+left/right，切换代码视图</li><li>Alt+Up/Down，在方法间快速移动定位</li><li>Ctrl+Shift+Up/Down，向上/下移动语句</li><li>F2 或 Shift+F2，高亮错误或警告快速定位</li><li>Tab，代码标签输入完成后，按 Tab，生成代码</li><li>Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失</li><li>Alt+F3，逐个往下查找相同文本，并高亮显示</li><li>Ctrl+Up/Down，光标中转到第一行或最后一行下</li><li>Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）</li><li>Ctrl+Alt+B，跳转到方法实现处</li><li>Ctrl+Shift+Backspace，跳转到上次编辑的地方</li><li>Ctrl+O，重写方法</li><li>Ctrl+Alt+Space，类名自动完成</li><li>Ctrl+Alt+Up/Down，快速跳转搜索结果</li><li>Ctrl+Shift+J，整合两行</li><li>Alt+F8，计算变量值</li><li>Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本</li><li>Ctrl+Alt+Shift+V，简单粘贴</li><li>Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口</li><li>F12，把焦点从编辑器移到最近使用的工具窗口</li><li>Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</li><li>Ctrl+W，可以选择单词继而语句继而行继而函数</li><li>Ctrl+Shift+W，取消选择光标所在词</li><li>Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置</li><li>Ctrl+I，实现方法</li><li>Ctrl+Shift+U，大小写转化</li><li>Ctrl+Y，删除当前行</li><li>Shift+Enter，向下插入新行</li><li>psvm/sout，main/System.out.println(); Ctrl+J，查看更多</li><li>Ctrl+Shift+F，全局查找</li><li>Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找</li><li>Ctrl+Shift+S，高级搜索</li><li>Ctrl+U，转到父类</li><li>Ctrl+Alt+S，打开设置对话框</li><li>Alt+Shift+Inert，开启/关闭列选择模式</li><li>Ctrl+Alt+Shift+S，打开当前项目/模块属性</li><li>Ctrl+G，定位行</li><li>Alt+Home，跳转到导航栏</li><li>Ctrl+Enter，上插一行</li><li>Ctrl+Backspace，按单词删除</li><li>Ctrl+”+/-“，当前方法展开、折叠</li><li>Ctrl+Shift+”+/-“，全部展开、折叠</li></ol><h3 id="调试部分、编译"><a href="#调试部分、编译" class="headerlink" title="调试部分、编译"></a>调试部分、编译</h3><ol><li>Ctrl+F2，停止</li><li>Alt+Shift+F9，选择 Debug</li><li>Alt+Shift+F10，选择 Run</li><li>Ctrl+Shift+F9，编译</li><li>Ctrl+Shift+F10，运行</li><li>Ctrl+Shift+F8，查看断点</li><li>F8，步过</li><li>F7，步入</li><li>Shift+F7，智能步入</li><li>Shift+F8，步出</li><li>Alt+Shift+F8，强制步过</li><li>Alt+Shift+F7，强制步入</li><li>Alt+F9，运行至光标处</li><li>Ctrl+Alt+F9，强制运行至光标处</li><li>F9，恢复程序</li><li>Alt+F10，定位到断点</li><li>Ctrl+F8，切换行断点</li><li>Ctrl+F9，生成项目</li><li>Alt+1，项目</li><li>Alt+2，收藏</li><li>Alt+6，TODO</li><li>Alt+7，结构</li><li>Ctrl+Shift+C，复制路径</li><li>Ctrl+Alt+Shift+C，复制引用，必须选择类名</li><li>Ctrl+Alt+Y，同步</li><li>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）</li><li>Shift+F12，还原默认布局</li><li>Ctrl+Shift+F12，隐藏/恢复所有窗口</li><li>Ctrl+F4，关闭</li><li>Ctrl+Shift+F4，关闭活动选项卡</li><li>Ctrl+Tab，转到下一个拆分器</li><li>Ctrl+Shift+Tab，转到上一个拆分器</li></ol><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><ol><li>Ctrl+Alt+Shift+T，弹出重构菜单</li><li>Shift+F6，重命名</li><li>F6，移动</li><li>F5，复制</li><li>Alt+Delete，安全删除</li><li>Ctrl+Alt+N，内联</li></ol><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ol><li>Ctrl+F，查找</li><li>Ctrl+R，替换</li><li>F3，查找下一个</li><li>Shift+F3，查找上一个</li><li>Ctrl+Shift+F，在路径中查找</li><li>Ctrl+Shift+R，在路径中替换</li><li>Ctrl+Shift+S，搜索结构</li><li>Ctrl+Shift+M，替换结构</li><li>Alt+F7，查找用法</li><li>Ctrl+Alt+F7，显示用法</li><li>Ctrl+F7，在文件中查找用法</li><li>Ctrl+Shift+F7，在文件中高亮显示用法</li></ol><h3 id="VCS"><a href="#VCS" class="headerlink" title="VCS"></a>VCS</h3><ol><li>Alt+~，VCS 操作菜单</li><li>Ctrl+K，提交更改</li><li>Ctrl+T，更新项目</li><li>Ctrl+Alt+Shift+D，显示变化</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IDEA快捷键比较全面的&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发工具" scheme="https://kanchai.club/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="IDEA快捷键" scheme="https://kanchai.club/tags/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>Java实现天平秤秤球？</title>
    <link href="https://kanchai.club/2020/03/17/Java%E5%AE%9E%E7%8E%B0%E5%A4%A9%E5%B9%B3%E7%A7%A4%E7%90%83/"/>
    <id>https://kanchai.club/2020/03/17/Java%E5%AE%9E%E7%8E%B0%E5%A4%A9%E5%B9%B3%E7%A7%A4%E7%90%83/</id>
    <published>2020-03-17T15:36:45.109Z</published>
    <updated>2020-03-17T15:35:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>一朋友发来一道面试题，百度半天没有很合适的，自己实现这个。<br>题目：有N个铁球，其中一个是塑料球。仅使用一个天平，如何快速找到球？</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Boolean[] balls = <span class="keyword">new</span> Boolean[] &#123; <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span></span><br><span class="line">System.out.println(<span class="string">"已知的空球为:"</span> + balls[<span class="number">4</span>].hashCode());</span><br><span class="line">searchBall(balls, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 天平称重找出不同的球，此处通过打印hashCode来判断球的唯一标志</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> balls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> findValue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">searchBall</span><span class="params">(Boolean[] balls, <span class="keyword">boolean</span> findValue)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"称重....."</span>);</span><br><span class="line"><span class="keyword">if</span> (balls == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> indexSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (balls.length % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">size = balls.length - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">size = balls.length;</span><br><span class="line">&#125;</span><br><span class="line">indexSize = size / <span class="number">2</span>;</span><br><span class="line">Boolean[] preBalls = Arrays.copyOfRange(balls, <span class="number">0</span>, indexSize);</span><br><span class="line">Boolean[] lastBalls = Arrays.copyOfRange(balls, indexSize, size);</span><br><span class="line"><span class="keyword">int</span> weight1 = getWeight(preBalls);</span><br><span class="line"><span class="keyword">int</span> weight2 = getWeight(lastBalls);</span><br><span class="line"><span class="keyword">if</span> (weight1 == weight2) &#123;</span><br><span class="line">System.out.println(<span class="string">"已找到不同的球："</span> + balls[balls.length - <span class="number">1</span>].hashCode());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (weight1 &gt; weight2) &#123;</span><br><span class="line"><span class="keyword">if</span> (lastBalls.length == <span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"已找到不同的球：："</span> + lastBalls[<span class="number">0</span>].hashCode());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">searchBall(lastBalls, findValue);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (preBalls.length == <span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"已找到不同的球：："</span> + lastBalls[<span class="number">0</span>].hashCode());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">searchBall(preBalls, findValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 称重方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> balls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getWeight</span><span class="params">(Boolean[] balls)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">boolean</span> b : balls) &#123;</span><br><span class="line"><span class="keyword">if</span> (!b) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果为"><a href="#运行结果为" class="headerlink" title="运行结果为:"></a>运行结果为:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">已知的空球为:1231</span><br><span class="line">称重.....</span><br><span class="line">称重.....</span><br><span class="line">已找到不同的球：：1231</span><br></pre></td></tr></table></figure><p>可以看出来2次称重，找到不规则的球。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一朋友发来一道面试题，百度半天没有很合适的，自己实现这个。&lt;br&gt;题目：有N个铁球，其中一个是塑料球。仅使用一个天平，如何快速找到球？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://kanchai.club/categories/Java/"/>
    
    
      <category term="算法基础题" scheme="https://kanchai.club/tags/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%A2%98/"/>
    
  </entry>
  
</feed>
