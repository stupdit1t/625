<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>每天拾柴火</title>
  
  <subtitle>砍柴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://kanchai.club/"/>
  <updated>2020-03-25T03:35:40.000Z</updated>
  <id>https://kanchai.club/</id>
  
  <author>
    <name>625</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【57期】面试官问，MySQL建索引需要遵循哪些原则呢？</title>
    <link href="https://kanchai.club/2020/03/25/%E3%80%9057%E6%9C%9F%E3%80%91%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%EF%BC%8CMySQL%E5%BB%BA%E7%B4%A2%E5%BC%95%E9%9C%80%E8%A6%81%E9%81%B5%E5%BE%AA%E5%93%AA%E4%BA%9B%E5%8E%9F%E5%88%99%E5%91%A2%EF%BC%9F/"/>
    <id>https://kanchai.club/2020/03/25/%E3%80%9057%E6%9C%9F%E3%80%91%E9%9D%A2%E8%AF%95%E5%AE%98%E9%97%AE%EF%BC%8CMySQL%E5%BB%BA%E7%B4%A2%E5%BC%95%E9%9C%80%E8%A6%81%E9%81%B5%E5%BE%AA%E5%93%AA%E4%BA%9B%E5%8E%9F%E5%88%99%E5%91%A2%EF%BC%9F/</id>
    <published>2020-03-25T03:41:06.399Z</published>
    <updated>2020-03-25T03:35:40.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-选择唯一性索引"><a href="#1-选择唯一性索引" class="headerlink" title="1.选择唯一性索引"></a>1.选择唯一性索引</h2><p>唯一性索引的值是唯一的，可以更快速的通过该索引来确定某条记录。例如，学生表中学号是具有唯一性的字段。为该字段建立唯一性索引可以很快的确定某个学生的信息。如果使用姓名的话，可能存在同名现象，从而降低查询速度。</p><h2 id="2-为经常需要排序、分组和联合操作的字段建立索引"><a href="#2-为经常需要排序、分组和联合操作的字段建立索引" class="headerlink" title="2.为经常需要排序、分组和联合操作的字段建立索引"></a>2.为经常需要排序、分组和联合操作的字段建立索引</h2><p>经常需要ORDER BY、GROUP BY、DISTINCT和UNION等操作的字段，排序操作会浪费很多时间。如果为其建立索引，可以有效地避免排序操作。</p><h2 id="3-为常作为查询条件的字段建立索引"><a href="#3-为常作为查询条件的字段建立索引" class="headerlink" title="3.为常作为查询条件的字段建立索引"></a>3.为常作为查询条件的字段建立索引</h2><p>如果某个字段经常用来做查询条件，那么该字段的查询速度会影响整个表的查询速度。因此，为这样的字段建立索引，可以提高整个表的查询速度。</p><h2 id="4-限制索引的数目"><a href="#4-限制索引的数目" class="headerlink" title="4.限制索引的数目"></a>4.限制索引的数目</h2><p>索引的数目不是越多越好。每个索引都需要占用磁盘空间，索引越多，需要的磁盘空间就越大。修改表时，对索引的重构和更新很麻烦。越多的索引，会使更新表变得很浪费时间。</p><h2 id="5-尽量使用数据量少的索引"><a href="#5-尽量使用数据量少的索引" class="headerlink" title="5.尽量使用数据量少的索引"></a>5.尽量使用数据量少的索引</h2><p>如果索引的值很长，那么查询的速度会受到影响。例如，对一个CHAR(100)类型的字段进行全文检索需要的时间肯定要比对CHAR(10)类型的字段需要的时间要多。</p><h2 id="6-尽量使用前缀来索引"><a href="#6-尽量使用前缀来索引" class="headerlink" title="6.尽量使用前缀来索引"></a>6.尽量使用前缀来索引</h2><p>如果索引字段的值很长，最好使用值的前缀来索引。例如，TEXT和BLOG类型的字段，进行全文检索会很浪费时间。如果只检索字段的前面的若干个字符，这样可以提高检索速度。</p><h2 id="7-删除不再使用或者很少使用的索引"><a href="#7-删除不再使用或者很少使用的索引" class="headerlink" title="7.删除不再使用或者很少使用的索引"></a>7.删除不再使用或者很少使用的索引</h2><p>表中的数据被大量更新，或者数据的使用方式被改变后，原有的一些索引可能不再需要。数据库管理员应当定期找出这些索引，将它们删除，从而减少索引对更新操作的影响。</p><h2 id="8-最左前缀匹配原则，非常重要的原则。"><a href="#8-最左前缀匹配原则，非常重要的原则。" class="headerlink" title="8.最左前缀匹配原则，非常重要的原则。"></a>8.最左前缀匹配原则，非常重要的原则。</h2><p>mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a 1=”” and=”” b=”2” c=”“&gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><h2 id="9-和in可以乱序。"><a href="#9-和in可以乱序。" class="headerlink" title="9.=和in可以乱序。"></a>9.=和in可以乱序。</h2><p>比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p><h2 id="10-尽量选择区分度高的列作为索引。"><a href="#10-尽量选择区分度高的列作为索引。" class="headerlink" title="10.尽量选择区分度高的列作为索引。"></a>10.尽量选择区分度高的列作为索引。</h2><p>区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就 是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条 记录</p><h2 id="11-索引列不能参与计算，保持列“干净”。"><a href="#11-索引列不能参与计算，保持列“干净”。" class="headerlink" title="11.索引列不能参与计算，保持列“干净”。"></a>11.索引列不能参与计算，保持列“干净”。</h2><p>比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本 太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);</p><h2 id="12-尽量的扩展索引，不要新建索引。"><a href="#12-尽量的扩展索引，不要新建索引。" class="headerlink" title="12.尽量的扩展索引，不要新建索引。"></a>12.尽量的扩展索引，不要新建索引。</h2><p>比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可</p><p>注意：选择索引的最终目的是为了使查询的速度变快。上面给出的原则是最基本的准则，但不能拘泥于上面的准则。读者要在以后的学习和工作中进行不断的实践。根据应用的实际情况进行分析和判断，选择最合适的索引方式。## 目标</p><p>去除 iconfinder 上 icon 的水印</p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>利用水印像素点和原图像素点颜色合并的原理，如果拥有加过水印的图片和水印图片，就可以反向推出原图原像素点的颜色；前提是你得拥有他的水印图片</p><p>来源：<a href="https://blog.csdn.net/u013412790/" target="_blank" rel="noopener">https://blog.csdn.net/u013412790/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-选择唯一性索引&quot;&gt;&lt;a href=&quot;#1-选择唯一性索引&quot; class=&quot;headerlink&quot; title=&quot;1.选择唯一性索引&quot;&gt;&lt;/a&gt;1.选择唯一性索引&lt;/h2&gt;&lt;p&gt;唯一性索引的值是唯一的，可以更快速的通过该索引来确定某条记录。例如，学生表中学号是具
      
    
    </summary>
    
    
    
      <category term="MYSQL" scheme="https://kanchai.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）</title>
    <link href="https://kanchai.club/2020/03/25/%E3%80%9063%E6%9C%9F%E3%80%91%E8%B0%88%E8%B0%88MySQL_%E7%B4%A2%E5%BC%95%EF%BC%8CB+%E6%A0%91%E5%8E%9F%E7%90%86%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%BB%BA%E7%B4%A2%E5%BC%95%E7%9A%84%E5%87%A0%E5%A4%A7%E5%8E%9F%E5%88%99%EF%BC%88MySQL%E9%9D%A2%E8%AF%95%E7%AC%AC%E5%85%AD%E5%BC%B9%EF%BC%89/"/>
    <id>https://kanchai.club/2020/03/25/%E3%80%9063%E6%9C%9F%E3%80%91%E8%B0%88%E8%B0%88MySQL_%E7%B4%A2%E5%BC%95%EF%BC%8CB+%E6%A0%91%E5%8E%9F%E7%90%86%EF%BC%8C%E4%BB%A5%E5%8F%8A%E5%BB%BA%E7%B4%A2%E5%BC%95%E7%9A%84%E5%87%A0%E5%A4%A7%E5%8E%9F%E5%88%99%EF%BC%88MySQL%E9%9D%A2%E8%AF%95%E7%AC%AC%E5%85%AD%E5%BC%B9%EF%BC%89/</id>
    <published>2020-03-25T03:41:04.566Z</published>
    <updated>2020-03-25T03:34:51.000Z</updated>
    
    <content type="html"><![CDATA[<p>MYSQL一直了解得都不多，之前写sql准备提交生产环境之前的时候，老员工帮我检查了下sql，让修改了一下存储引擎，当时我使用的是Myisam，后面改成InnoDB了。为什么要改成这样，之前都没有听过存储引擎，于是网上查了一下。</p><p>事实上使用不同的存储引擎也是有很大区别的，下面猿友们可以了解一下。</p><h2 id="一、存储引擎的比较"><a href="#一、存储引擎的比较" class="headerlink" title="一、存储引擎的比较"></a>一、存储引擎的比较</h2><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java1-1584537211.png" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><blockquote><p>注：上面提到的B树索引并没有指出是B-Tree和B+Tree索引，但是B-树和B+树的定义是有区别的。</p></blockquote><p>在 MySQL 中，主要有四种类型的索引，分别为：B-Tree 索引， Hash 索引， Fulltext 索引和 R-Tree 索引。</p><p>B-Tree 索引是 MySQL 数据库中使用最为频繁的索引类型，除了 Archive 存储引擎之外的其他所有的存储引擎都支持 B-Tree 索引。Archive 引擎直到 MySQL 5.1 才支持索引，而且只支持索引单个 AUTO_INCREMENT 列。</p><p>不仅仅在 MySQL 中是如此，实际上在其他的很多数据库管理系统中B-Tree 索引也同样是作为最主要的索引类型，这主要是因为 B-Tree 索引的存储结构在数据库的数据检索中有非常优异的表现。</p><p>一般来说， MySQL 中的 B-Tree 索引的物理文件大多都是以 Balance Tree 的结构来存储的，也就是所有实际需要的数据都存放于 Tree 的 Leaf Node(叶子节点) ，而且到任何一个 Leaf Node 的最短路径的长度都是完全相同的，所以我们大家都称之为 B-Tree 索引。</p><p>当然，可能各种数据库（或 MySQL 的各种存储引擎）在存放自己的 B-Tree 索引的时候会对存储结构稍作改造。如 Innodb 存储引擎的 B-Tree 索引实际使用的存储结构实际上是 B+Tree，也就是在 B-Tree 数据结构的基础上做了很小的改造，在每一个Leaf Node 上面出了存放索引键的相关信息之外，还存储了指向与该 Leaf Node 相邻的后一个 LeafNode 的指针信息（增加了顺序访问指针），这主要是为了加快检索多个相邻 Leaf Node 的效率考虑。</p><p>InnoDB是Mysql的默认存储引擎(Mysql5.5.5之前是MyISAM）</p><p>可能对于没有了解过索引的猿友这样看这篇文章十分吃力，这类猿友有必要先对Mysql索引有个大体的了解。</p><p>接下来我们先看看B-树、B+树的概念。弄清楚，为什么加了索引查询速度会加快？</p><h2 id="二、B-树、B-树概念"><a href="#二、B-树、B-树概念" class="headerlink" title="二、B-树、B+树概念"></a>二、B-树、B+树概念</h2><h3 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h3><p>即二叉搜索树：</p><ol><li><p>所有非叶子结点至多拥有两个儿子（Left和Right）；</p></li><li><p>所有结点存储一个关键字；</p></li><li><p>非叶子结点的左指针指向小于其关键字的子树，右指针指向大于其关键字的子树；</p></li></ol><p>如：</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java8-1584537211.jpeg" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><h3 id="B-树"><a href="#B-树" class="headerlink" title="B-树"></a>B-树</h3><p>是一种多路搜索树（并不是二叉的）：</p><ol><li><p>定义任意非叶子结点最多只有M个儿子；且M&gt;2；</p></li><li><p>根结点的儿子数为[2, M]；</p></li><li><p>除根结点以外的非叶子结点的儿子数为[M/2, M]；</p></li><li><p>每个结点存放至少M/2-1（取上整）和至多M-1个关键字；（至少2个关键字）</p></li><li><p>非叶子结点的关键字个数=指向儿子的指针个数-1；</p></li><li><p>非叶子结点的关键字：K[1], K[2], …, K[M-1]；且K[i] &lt; K[i+1]；</p></li><li><p>非叶子结点的指针：P[1], P[2], …, P[M]；其中P[1]指向关键字小于K[1]的子树，P[M]指向关键字大于K[M-1]的子树，其它P[i]指向关键字属于(K[i-1], K[i])的子树；</p></li><li><p>所有叶子结点位于同一层；</p></li></ol><p>如：（M=3）</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java7-1584537211.jpeg" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><p>B-树的搜索，从根结点开始，对结点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子结点；重复，直到所对应的儿子指针为空，或已经是叶子结点；</p><p><strong>B-树的特性：</strong></p><ol><li><p>关键字集合分布在整颗树中；</p></li><li><p>任何一个关键字出现且只出现在一个结点中；</p></li><li><p>搜索有可能在非叶子结点结束；</p></li><li><p>其搜索性能等价于在关键字全集内做一次二分查找；</p></li><li><p>自动层次控制；</p></li></ol><p>由于限制了除根结点以外的非叶子结点，至少含有M/2个儿子，确保了结点的至少利用率。</p><p>所以B-树的性能总是等价于二分查找（与M值无关），也就没有B树平衡的问题；</p><p>由于M/2的限制，在插入结点时，如果结点已满，需要将结点分裂为两个各占M/2的结点；删除结点时，需将两个不足M/2的兄弟结点合并；</p><h3 id="B-树-1"><a href="#B-树-1" class="headerlink" title="B+树"></a>B+树</h3><p>B+树是B-树的变体，也是一种多路搜索树：</p><ol><li><p>其定义基本与B-树同，除了：</p></li><li><p>非叶子结点的子树指针与关键字个数相同；</p></li><li><p>非叶子结点的子树指针P[i]，指向关键字值属于[K[i], K[i+1])的子树（B-树是开区间）；</p></li><li><p>为所有叶子结点增加一个链指针；</p></li><li><p>所有关键字都在叶子结点出现；</p></li></ol><p>如：（M=3）</p><p><img src="https://www.javazhiyin.com/wp-content/uploads/2020/03/java6-1584537211.jpeg" alt="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）" title="【63期】谈谈MySQL 索引，B+树原理，以及建索引的几大原则（MySQL面试第六弹）"></p><p>B+的搜索与B-树也基本相同，区别是B+树只有达到叶子结点才命中（B-树可以在非叶子结点命中），其性能也等价于在关键字全集做一次二分查找；</p><p><strong>B+的特性：</strong></p><ol><li><p>所有关键字都出现在叶子结点的链表中（稠密索引），且链表中的关键字恰好是有序的；</p></li><li><p>不可能在非叶子结点命中；</p></li><li><p>非叶子结点相当于是叶子结点的索引（稀疏索引），叶子结点相当于是存储（关键字）数据的数据层；</p></li><li><p>更适合文件索引系统；</p></li></ol><h2 id="三、建索引的几大原则"><a href="#三、建索引的几大原则" class="headerlink" title="三、建索引的几大原则"></a>三、建索引的几大原则</h2><p>1.最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。</p><p>2.=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式</p><p>3.尽量选择区分度高的列作为索引,区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录</p><p>4.索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’);</p><p>5.尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可</p><p><em>来源：blog.csdn.net/u013142781/article/details/51706790</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;MYSQL一直了解得都不多，之前写sql准备提交生产环境之前的时候，老员工帮我检查了下sql，让修改了一下存储引擎，当时我使用的是Myisam，后面改成InnoDB了。为什么要改成这样，之前都没有听过存储引擎，于是网上查了一下。&lt;/p&gt;
&lt;p&gt;事实上使用不同的存储引擎也是有
      
    
    </summary>
    
    
    
      <category term="MYSQL" scheme="https://kanchai.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>【58期】盘点那些面试中最常问的MySQL问题，第一弹！</title>
    <link href="https://kanchai.club/2020/03/25/%E3%80%9058%E6%9C%9F%E3%80%91%E7%9B%98%E7%82%B9%E9%82%A3%E4%BA%9B%E9%9D%A2%E8%AF%95%E4%B8%AD%E6%9C%80%E5%B8%B8%E9%97%AE%E7%9A%84MySQL%E9%97%AE%E9%A2%98%EF%BC%8C%E7%AC%AC%E4%B8%80%E5%BC%B9%EF%BC%81/"/>
    <id>https://kanchai.club/2020/03/25/%E3%80%9058%E6%9C%9F%E3%80%91%E7%9B%98%E7%82%B9%E9%82%A3%E4%BA%9B%E9%9D%A2%E8%AF%95%E4%B8%AD%E6%9C%80%E5%B8%B8%E9%97%AE%E7%9A%84MySQL%E9%97%AE%E9%A2%98%EF%BC%8C%E7%AC%AC%E4%B8%80%E5%BC%B9%EF%BC%81/</id>
    <published>2020-03-25T03:41:02.744Z</published>
    <updated>2020-03-25T03:40:05.000Z</updated>
    
    <content type="html"><![CDATA[<h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">1、MySQL中myisam与innodb的区别</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">MyISAM：</strong></p><ul class=" list-paddingleft-2" style="list-style-type: square;">    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">不支持事务，但是每次查询都是原子的；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">支持表级锁，即每次操作对整个表加锁；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">存储表的总行数；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">一个MYISAM表有三个文件：索引文件、表结构文件、数据文件；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;"><span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">采用</span>非<span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">聚集索引，索引文件的数据域存储指向数据文件的指针。</span><span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">辅索引与主索引基本一致，但是辅索引不用保证唯一性。</span></span>        </p>    </li></ul><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">InnoDb：</strong></p><ul class=" list-paddingleft-2" style="list-style-type: square;">    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">支持ACID的事务，支持事务的四种隔离级别；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">支持行级锁及外键约束：因此可以支持写并发；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">不存储总行数；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">一个InnoDb引擎存储在一个文件空间（共享表空间，表大小不受操作系统控制，一个表可能分布在多个文件里），也有可能为多个（设置为独立表空，表大小受操作系统文件大小限制，一般为2G），受操作系统文件大小的限制；</span>        </p>    </li>    <li>        <p style="margin-top: 4px; margin-bottom: 26px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box;">            <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">主键索引采用聚集索引（索引的数据域存储数据文件本身），辅索引的数据域存储主键的值；因此从辅索引查找数据，需要先通过辅索引找到主键值，再访问辅索引；最好使用自增主键，防止插入数据时，为维持B+树结构，文件的大调整。</span>        </p>    </li></ul><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">两者的适用场景：</strong></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    因为MyISAM相对简单所以在效率上要优于InnoDB.如果系统读多，写少。对原子性要求低。那么MyISAM最好的选择。且MyISAM恢复速度快。可直接用备份覆盖恢复。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    如果系统读少，写多的时候，尤其是并发写入高的时候。InnoDB就是首选了。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box;"><em style="box-sizing: border-box;"><span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; color: rgb(255, 0, 0);">扩展问题：myisam与innodb引擎下select count(*)哪个更快，为什么？</span></em></strong></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    知道的童鞋，欢迎留言说出正确答案~</p><h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">2、MySQL INT和CHAR隐式类型转换需要注意什么？</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    主要需要记住下面两点：</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    1、当查询字段是INT类型，如果查询条件为CHAR，将查询条件转换为INT，如果是字符串前导都是数字，将截取前导数字用来比较，如果没有前导数字，则转换为0。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">2.、当查询字段是CHAR/VARCHAR类型，如果查询条件为INT，将查询字段</span>转<span style="margin: 0px; padding: 0px; border: 0px; background-image: initial; background-position: initial; background-size: initial; background-repeat: initial; background-attachment: initial; background-origin: initial; background-clip: initial; box-sizing: border-box; transition: all 0.5s ease-in-out 0s;">换为INT再进行比较，可能会造成全表扫描。</span></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">答案解析</strong></p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    有如下一张测试表product，id为int类型，name为varchar类型。</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">+----+----------+| id | name   |+----+----------+|  1 | apple   ||  2 | banana ||  3 | 99cat   |+----+----------+</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    情况1:</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">// 查询条件转化为数字1再比较mysql&gt; select * from product where id = &#39;1abc23&#39;;+----+---------+| id | name  |+----+---------+|  1 | apple  |+----+---------+</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    情况2:</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">// 查询字段全部转化成数字，id:1和id:2字段值转化为0，id:3转化成99，再比较mysql&gt; select * from product where name=0;+----+----------+| id | name   |+----+----------+|  1 | apple   ||  2 | banana |+----+----------+</pre><h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">3、MySQL 如何高效率随机获取N条数据？</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    假设表叫做mm_account。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    ID连续的情况下（注意不能带where，否则结果不好）：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT *FROM `mm_account` AS t1 JOIN (SELECT ROUND(RAND() * (SELECT MAX(id) FROM `mm_account`)) AS id) AS t2WHERE t1.id &gt;= t2.idORDER BY t1.id ASC LIMIT 4;</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    ID不连续的情况下：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT * FROM `mm_account` WHERE id &gt;= (SELECT floor(RAND() * (SELECT MAX(id) FROM `mm_account`)))  and city=&quot;city_91&quot; and showSex=1ORDER BY id LIMIT 4;</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    如果有一个字段叫id，最快的方法如下（随机获取5条）：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT * FROM mm_account WHERE id &gt;= ((SELECT MAX(id) FROM mm_account)-(SELECT MIN(id) FROM mm_account)) * RAND() + (SELECT MIN(id) FROM mm_account)limit 5;</pre><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    如果带where语句，上面就不适合了，带where语句请看下面：</p><pre class="prettyprint linenums" style="box-sizing: border-box; font-size: 15px; color: rgb(62, 62, 62); line-height: inherit; background-color: rgb(255, 255, 255);">SELECT *FROM `mm_account` AS t1 JOIN (SELECT ROUND(RAND() * ((SELECT MAX(id) FROM `mm_account` where id&lt;1000 )-(SELECT MIN(id) FROM `mm_account` where id&lt;1000 ))+(SELECT MIN(id) FROM `mm_account` where id&lt;1000 )) AS id) AS t2WHERE t1.id &gt;= t2.idORDER BY t1.id LIMIT 5;</pre><h3 style="margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text-rendering: optimizeLegibility; font-weight: normal; font-size: 1.1em; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; white-space: normal; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <span style="margin: 0px; padding: 0px; border: 0px; background: transparent; box-sizing: border-box; transition: all 0.5s ease-in-out 0s; font-size: inherit; color: inherit; line-height: inherit;">4、说说你知道的MySQL的索引类型，并分别简述一下各自的场景。</span></h3><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">普通索引：</strong>没有任何限制条件的索引，该索引可以在任何数据类型中创建。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">唯一索引：</strong>使用UNIQUE参数可以设置唯一索引。创建该索引时，索引列的值必须唯一，但允许有空值。通过唯一索引，用户可以快速地定位某条记录，主键索引是一种特殊的唯一索引。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">全文索引：</strong>仅可用于 MyISAM 表，针对较大的数据，生成全文索引耗时耗空间。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">空间索引：</strong>只能建立在空间数据类型上。这样可以提高系统获取空间数据类型的效率。仅可用于 MyISAM 表，索引的字段不能为空值。使用SPATIAL参数可以设置索引为空间索引。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">单列索引：</strong>只对应一个字段的索引。</p><p style="margin-top: 1.3em; margin-bottom: 1.3em; padding: 0px; border: 0px; background: rgb(255, 255, 255); box-sizing: border-box; font-size: 15px; white-space: normal; color: rgb(62, 62, 62); line-height: inherit; font-family: &quot;Helvetica Neue&quot;, Helvetica, &quot;Hiragino Sans GB&quot;, &quot;Microsoft YaHei&quot;, Arial, sans-serif;">    <strong style="box-sizing: border-box; color: inherit; font-size: inherit; line-height: inherit;">多列索引：</strong>在表的多个字段上创建一个索引。该索引指向创建时对应的多个字段，用户可以通过这几个字段进行查询，想使用该索引，用户必须使用这些字段中的一个字段。</p><p>    <br/></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 style=&quot;margin: 1.3em 0px; padding: 0px; border: 0px; background: rgb(255, 255, 255); line-height: inherit; color: rgb(21, 153, 87); text
      
    
    </summary>
    
    
    
      <category term="MYSQL" scheme="https://kanchai.club/tags/MYSQL/"/>
    
  </entry>
  
  <entry>
    <title>POI-Excel的导出导入</title>
    <link href="https://kanchai.club/2020/03/17/excel/"/>
    <id>https://kanchai.club/2020/03/17/excel/</id>
    <published>2020-03-17T15:36:46.688Z</published>
    <updated>2020-03-17T15:33:59.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://996.icu" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/link-996.icu-red.svg" alt="996.icu"></a><br><a href="https://github.com/996icu/996.ICU/blob/master/LICENSE" target="_blank" rel="noopener"><img src="https://img.shields.io/badge/license-Anti%20996-blue.svg" alt="LICENSE"></a></p><h1 id="excel-poi"><a href="#excel-poi" class="headerlink" title="excel-poi"></a>excel-poi</h1><h4 id="maven使用方式"><a href="#maven使用方式" class="headerlink" title="maven使用方式"></a>maven使用方式</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- excel导入导出 --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.stupdit1t&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;poi-excel&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.3&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote><p>本工程并没有使用注解方式实现，完全是编码方式。个人觉得注解方式对代码侵入比较大。不如纯编码方便，请以maven版本为主，此源码可能不是最新版本。环境为，POI4.0.1 ，JDK1.8</p></blockquote><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><ol><li>支持严格的单元格校验</li><li>支持数据行的图片导入</li><li>3支持数据回调处理</li><li>03和07都支持</li></ol><h3 id="导出"><a href="#导出" class="headerlink" title="导出"></a>导出</h3><ol><li>动态表头+表尾</li><li>支持List<Map>数据</li><li>支持图片导出，</li><li>支持复杂对象的导出</li><li>支持回调处理数据后再导出</li><li>支持单元格的样式设置</li><li>支持模板导出</li><li>导出03和07都支持，默认为03，具体看以下使用方式</li><li>支持多sheet导出</li></ol><h3 id="选择03还是07？"><a href="#选择03还是07？" class="headerlink" title="选择03还是07？"></a>选择03还是07？</h3><ol><li>03速度较快，单sheet最大65535行，体积大</li><li>07速度慢，单sheet最大1048576行，体积小</li></ol><h2 id="主要功能："><a href="#主要功能：" class="headerlink" title="主要功能："></a>主要功能：</h2><h3 id="导入-1"><a href="#导入-1" class="headerlink" title="导入"></a>导入</h3><p>1.简单的导入:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.获取源文件</span></span><br><span class="line">Workbook wb = WorkbookFactory.create(<span class="keyword">new</span> FileInputStream(<span class="string">"src\\test\\java\\excel\\imports\\import.xlsx"</span>));</span><br><span class="line"><span class="comment">// 2.获取sheet0导入</span></span><br><span class="line">Sheet sheet = wb.getSheetAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 3.生成VO数据</span></span><br><span class="line"><span class="comment">//参数：1.生成VO的class类型;2.校验规则;3.导入的sheet;3.从第几行导入;4.尾部非数据行数量</span></span><br><span class="line">ImportRspInfo&lt;ProjectEvaluate&gt; list = ExcelUtils.parseSheet(ProjectEvaluate<span class="class">.<span class="keyword">class</span>, <span class="title">EvaluateVerifyBuilder</span>.<span class="title">getInstance</span>(), <span class="title">sheet</span>, 3, 2)</span>;</span><br><span class="line"><span class="keyword">if</span> (list.isSuccess()) &#123;</span><br><span class="line"><span class="comment">// 导入没有错误，打印数据</span></span><br><span class="line">System.out.println(JSON.toJSONString(list.getData()));</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 导入有错误，打印输出错误</span></span><br><span class="line">System.out.println(list.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.复杂导入，带图片导入，带回调处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.获取源文件</span></span><br><span class="line">Workbook wb = WorkbookFactory.create(<span class="keyword">new</span> FileInputStream(<span class="string">"src\\test\\java\\excel\\imports\\import.xlsx"</span>));</span><br><span class="line"><span class="comment">// 2.获取sheet0导入</span></span><br><span class="line">Sheet sheet = wb.getSheetAt(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 3.生成VO数据</span></span><br><span class="line"><span class="comment">//参数：1.生成VO的class类型;2.校验规则;3.导入的sheet;3.从第几行导入;4.尾部非数据行数量;5.导入每条数据的回调</span></span><br><span class="line">ImportRspInfo&lt;ProjectEvaluate&gt; list = ExcelUtils.parseSheet(ProjectEvaluate<span class="class">.<span class="keyword">class</span>, <span class="title">ProjectVerifyBuilder</span>.<span class="title">getInstance</span>(), <span class="title">sheet</span>, 3, 2, (<span class="title">row</span>, <span class="title">rowNum</span>) -&gt; </span>&#123;</span><br><span class="line"><span class="comment">//1.此处可以完成更多的校验</span></span><br><span class="line"><span class="keyword">if</span>(row.getAreaName() == <span class="string">"中青旅"</span>)&#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> POIException(<span class="string">"第"</span>+rowNum+<span class="string">"行，区域名字不能为中青旅！"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.图片导入，再ProjectEvaluate定义类型为byte[]的属性就可以，ProjectVerifyBuilder定义ImgVerfiy校验列.就OK了</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">if</span> (list.isSuccess()) &#123;</span><br><span class="line"><span class="comment">// 导入没有错误，打印数据</span></span><br><span class="line">System.out.println(JSON.toJSONString(list.getData()));</span><br><span class="line"><span class="comment">//打印图片byte数组长度</span></span><br><span class="line"><span class="keyword">byte</span>[] img = list.getData().get(<span class="number">0</span>).getImg();</span><br><span class="line">System.out.println(img);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 导入有错误，打印输出错误</span></span><br><span class="line">System.out.println(list.getMessage());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.自定义校验器，导入需要校验字段,必须继承AbstractVerifyBuidler</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProjectVerifyBuilder</span> <span class="keyword">extends</span> <span class="title">AbstractVerifyBuidler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> ProjectVerifyBuilder builder = <span class="keyword">new</span> ProjectVerifyBuilder();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ProjectVerifyBuilder <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> builder;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 定义列校验实体：提取的字段、提取列、校验规则</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">ProjectVerifyBuilder</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"projectName"</span>, <span class="string">"B"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"项目名称"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"areaName"</span>, <span class="string">"C"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"所属区域"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"province"</span>, <span class="string">"D"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"省份"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"city"</span>, <span class="string">"E"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"市"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"people"</span>, <span class="string">"F"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"项目所属人"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"leader"</span>, <span class="string">"G"</span>, <span class="keyword">new</span> StringVerify(<span class="string">"项目领导人"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"scount"</span>, <span class="string">"H"</span>, <span class="keyword">new</span> IntegerVerify(<span class="string">"总分"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"avg"</span>, <span class="string">"I"</span>, <span class="keyword">new</span> DoubleVerify(<span class="string">"历史平均分"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"createTime"</span>, <span class="string">"J"</span>, <span class="keyword">new</span> DateTimeVerify(<span class="string">"创建时间"</span>, <span class="string">"yyyy-MM-dd HH:mm"</span>, <span class="keyword">true</span>)));</span><br><span class="line">cellEntitys.add(<span class="keyword">new</span> CellVerifyEntity(<span class="string">"img"</span>, <span class="string">"K"</span>, <span class="keyword">new</span> ImgVerify(<span class="string">"图片"</span>, <span class="keyword">false</span>)));</span><br><span class="line"><span class="comment">// 必须调用</span></span><br><span class="line"><span class="keyword">super</span>.init();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="导入示例图"><a href="#导入示例图" class="headerlink" title="导入示例图"></a>导入示例图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1118/104015_a439ba1a_1215820.png" alt="输入图片说明" title="QQ截图20181118104004.png"></p><h3 id="导出-1"><a href="#导出-1" class="headerlink" title="导出"></a>导出</h3><p>0.基础数据构建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 单sheet数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> List&lt;ProjectEvaluate&gt; sheetData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * map型数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> List&lt;Map&lt;String, Object&gt;&gt; mapData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 复杂对象数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> List&lt;Student&gt; complexData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多sheet数据</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">static</span> List&lt;List&lt;?&gt;&gt; moreSheetData = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.单sheet数据填充</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        ProjectEvaluate obj = <span class="keyword">new</span> ProjectEvaluate();</span><br><span class="line">        obj.setProjectName(<span class="string">"中青旅"</span> + i);</span><br><span class="line">        obj.setAreaName(<span class="string">"华东长三角"</span>);</span><br><span class="line">        obj.setProvince(<span class="string">"河北省"</span>);</span><br><span class="line">        obj.setCity(<span class="string">"保定市"</span>);</span><br><span class="line">        obj.setPeople(<span class="string">"张三"</span> + i);</span><br><span class="line">        obj.setLeader(<span class="string">"李四"</span> + i);</span><br><span class="line">        obj.setScount(<span class="number">50</span>);</span><br><span class="line">        obj.setAvg(<span class="number">60.0</span>);</span><br><span class="line">        obj.setCreateTime(<span class="keyword">new</span> Date());</span><br><span class="line">        obj.setImg(ImageParseBytes(<span class="keyword">new</span> File(<span class="string">"src/test/java/excel/export/1.png"</span>)));</span><br><span class="line">        sheetData.add(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 2.map型数据填充</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">15</span>; i++) &#123;</span><br><span class="line">        Map&lt;String, Object&gt; obj = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        obj.put(<span class="string">"name"</span>, <span class="string">"张三"</span> + i);</span><br><span class="line">        obj.put(<span class="string">"age"</span>, <span class="number">5</span> + i);</span><br><span class="line">        mapData.add(obj);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 3.复杂对象数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">        <span class="comment">// 學生</span></span><br><span class="line">        Student stu = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">// 學生所在的班級，用對象</span></span><br><span class="line">        stu.setClassRoom(<span class="keyword">new</span> ClassRoom(<span class="string">"六班"</span>));</span><br><span class="line">        <span class="comment">// 學生的更多信息，用map</span></span><br><span class="line">        Map&lt;String, Object&gt; moreInfo = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        moreInfo.put(<span class="string">"parent"</span>, <span class="keyword">new</span> Parent(<span class="string">"張無忌"</span>));</span><br><span class="line">        stu.setMoreInfo(moreInfo);</span><br><span class="line">        stu.setName(<span class="string">"张三"</span>);</span><br><span class="line">        complexData.add(stu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 4.多sheet数据填充</span></span><br><span class="line">    moreSheetData.add(sheetData);</span><br><span class="line">    moreSheetData.add(mapData);</span><br><span class="line">    moreSheetData.add(complexData);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>1.简单导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.获取导出的数据体</span></span><br><span class="line"> <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">String[] hearder = &#123;<span class="string">"序号"</span>, <span class="string">"项目名称"</span>, <span class="string">"所属区域"</span>, <span class="string">"省份"</span>, <span class="string">"市"</span>, <span class="string">"项目所属人"</span>, <span class="string">"项目领导人"</span>, <span class="string">"得分"</span>, <span class="string">"平均分"</span>, <span class="string">"创建时间"</span>, <span class="string">"项目图片"</span>&#125;;</span><br><span class="line"><span class="comment">// 2.导出hearder对应的字段设置</span></span><br><span class="line">Column[] column = &#123;Column.field(<span class="string">"projectName"</span>), Column.field(<span class="string">"areaName"</span>), Column.field(<span class="string">"province"</span>),</span><br><span class="line">        Column.field(<span class="string">"city"</span>), Column.field(<span class="string">"people"</span>), Column.field(<span class="string">"leader"</span>), Column.field(<span class="string">"scount"</span>),</span><br><span class="line">        Column.field(<span class="string">"avg"</span>), Column.field(<span class="string">"createTime"</span>),</span><br><span class="line">        <span class="comment">// 项目图片</span></span><br><span class="line">        Column.field(<span class="string">"img"</span>)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(sheetData, ExportRules.simpleRule(column, hearder).title(<span class="string">"项目资源统计"</span>).sheetName(<span class="string">"mysheet1"</span>).autoNum(<span class="keyword">true</span>), <span class="keyword">true</span>,</span><br><span class="line">        (feildName, value, t, customStyle) -&gt; &#123;</span><br><span class="line">            <span class="comment">//此处指向回调逻辑，可以修改写入excel的值,以及单元格样式，如颜色等</span></span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export1.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="1导出图"><a href="#1导出图" class="headerlink" title="1导出图"></a>1导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1215/161804_3ddf0b6b_1215820.png" alt="输入图片说明" title="1.png"></p><p>2.复杂表格导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.表头设置,可以对应excel设计表头，一看就懂</span></span><br><span class="line">HashMap&lt;String, String&gt; headerRules = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">headerRules.put(<span class="string">"1,1,A,K"</span>, <span class="string">"项目资源统计"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,A,A"</span>, <span class="string">"序号"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,2,B,E"</span>, <span class="string">"基本信息"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,B,B"</span>, <span class="string">"项目名称"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,C,C"</span>, <span class="string">"所属区域"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,D,D"</span>, <span class="string">"省份"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,E,E"</span>, <span class="string">"市"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,F,F"</span>, <span class="string">"项目所属人"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,G,G"</span>, <span class="string">"市项目领导人"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,2,H,I"</span>, <span class="string">"分值"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,H,H"</span>, <span class="string">"得分"</span>);</span><br><span class="line">headerRules.put(<span class="string">"3,3,I,I"</span>, <span class="string">"平均分"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,J,J"</span>, <span class="string">"创建时间"</span>);</span><br><span class="line">headerRules.put(<span class="string">"2,3,K,K"</span>, <span class="string">"项目图片"</span>);</span><br><span class="line"><span class="comment">// 2.尾部设置，一般可以用来设计合计栏</span></span><br><span class="line">HashMap&lt;String, String&gt; footerRules = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">footerRules.put(<span class="string">"1,2,A,C"</span>, <span class="string">"注释:"</span>);</span><br><span class="line">footerRules.put(<span class="string">"1,2,D,K"</span>, <span class="string">"导出参考代码！"</span>);</span><br><span class="line"><span class="comment">// 3.导出hearder对应的字段设置</span></span><br><span class="line">Column[] column = &#123;</span><br><span class="line">        Column.field(<span class="string">"projectName"</span>),</span><br><span class="line">        <span class="comment">// 4.1设置此列宽度为10</span></span><br><span class="line">        Column.field(<span class="string">"areaName"</span>).width(<span class="number">10</span>),</span><br><span class="line">        <span class="comment">// 4.2设置此列下拉框数据</span></span><br><span class="line">        Column.field(<span class="string">"province"</span>).width(<span class="number">5</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"陕西省"</span>, <span class="string">"山西省"</span>, <span class="string">"辽宁省"</span>&#125;),</span><br><span class="line">        <span class="comment">// 4.3设置此列水平居右</span></span><br><span class="line">        Column.field(<span class="string">"city"</span>).align(HorizontalAlignment.RIGHT),</span><br><span class="line">        <span class="comment">// 4.4 设置此列垂直居上</span></span><br><span class="line">        Column.field(<span class="string">"people"</span>).valign(VerticalAlignment.TOP),</span><br><span class="line">        <span class="comment">// 4.5 设置此列单元格 自定义校验 只能输入文本</span></span><br><span class="line">        Column.field(<span class="string">"leader"</span>).width(<span class="number">4</span>).verifyCustom(<span class="string">"VALUE(F3:F500)"</span>, <span class="string">"我是提示"</span>),</span><br><span class="line">        <span class="comment">// 4.6设置此列单元格 整数 数据校验 ，同时设置背景色为棕色</span></span><br><span class="line">        Column.field(<span class="string">"scount"</span>).verifyIntNum(<span class="string">"10~20"</span>).backColor(IndexedColors.BROWN),</span><br><span class="line">        <span class="comment">// 4.7设置此列单元格 浮点数 数据校验， 同时设置字体颜色红色</span></span><br><span class="line">        Column.field(<span class="string">"avg"</span>).verifyFloatNum(<span class="string">"10.0~20.0"</span>).color(IndexedColors.RED),</span><br><span class="line">        <span class="comment">// 4.8设置此列单元格 日期 数据校验 ，同时宽度为20、限制用户表格输入、水平居中、垂直居中、背景色、字体颜色</span></span><br><span class="line">        Column.field(<span class="string">"createTime"</span>).width(<span class="number">20</span>).verifyDate(<span class="string">"2000-01-03 12:35~3000-05-06 23:23"</span>)</span><br><span class="line">                .align(HorizontalAlignment.LEFT).valign(VerticalAlignment.CENTER)</span><br><span class="line">                .backColor(IndexedColors.YELLOW).color(IndexedColors.GOLD),</span><br><span class="line">        <span class="comment">// 4.9项目图片</span></span><br><span class="line">        Column.field(<span class="string">"img"</span>)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 4.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(</span><br><span class="line">        sheetData,</span><br><span class="line">        ExportRules.complexRule(column, headerRules).autoNum(<span class="keyword">true</span>).footerRules(footerRules).sheetName(<span class="string">"mysheet2"</span>),</span><br><span class="line">        <span class="keyword">true</span>,</span><br><span class="line">        (fieldName, value, row, col) -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">"projectName"</span>.equals(fieldName) &amp;&amp; row.getProjectName().equals(<span class="string">"中青旅23"</span>)) &#123;</span><br><span class="line">                col.align(HorizontalAlignment.LEFT);</span><br><span class="line">                col.valign(VerticalAlignment.CENTER);</span><br><span class="line">                col.height(<span class="number">2</span>);</span><br><span class="line">                col.backColor(IndexedColors.RED);</span><br><span class="line">                col.color(IndexedColors.YELLOW);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;);</span><br><span class="line"><span class="comment">// 5.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export2.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="2导出图"><a href="#2导出图" class="headerlink" title="2导出图"></a>2导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1215/161814_61f83ff1_1215820.png" alt="输入图片说明" title="2.png"></p><p>3.复杂的对象级联导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">String[] hearder = &#123;<span class="string">"學生姓名"</span>, <span class="string">"所在班級"</span>, <span class="string">"所在學校"</span>, <span class="string">"更多父母姓名"</span>&#125;;</span><br><span class="line"><span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">Column[] column = &#123;Column.field(<span class="string">"name"</span>), Column.field(<span class="string">"classRoom.name"</span>), Column.field(<span class="string">"classRoom.school.name"</span>),</span><br><span class="line">        Column.field(<span class="string">"moreInfo.parent.name"</span>),&#125;;</span><br><span class="line"><span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(complexData, ExportRules.simpleRule(column, hearder).title(<span class="string">"學生基本信息"</span>), <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export3.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="3导出图"><a href="#3导出图" class="headerlink" title="3导出图"></a>3导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1209/193615_b483f034_1215820.png" alt="输入图片说明" title="4.png"></p><p>4.map对象的简单导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">String[] hearder = &#123;<span class="string">"姓名"</span>, <span class="string">"年龄"</span>&#125;;</span><br><span class="line"><span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">Column[] column = &#123;Column.field(<span class="string">"name"</span>),</span><br><span class="line">        Column.field(<span class="string">"age"</span>),</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(mapData, ExportRules.simpleRule(column, hearder), <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export4.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="4导出图"><a href="#4导出图" class="headerlink" title="4导出图"></a>4导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1209/193608_c75b81ee_1215820.png" alt="输入图片说明" title="4.png"></p><p>5.模板导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">String[] hearder = &#123;<span class="string">"宝宝姓名"</span>, <span class="string">"宝宝昵称"</span>, <span class="string">"家长姓名"</span>, <span class="string">"手机号码"</span>, <span class="string">"宝宝生日"</span>, <span class="string">"月龄"</span>, <span class="string">"宝宝性别"</span>, <span class="string">"来源渠道"</span>, <span class="string">"市场人员"</span>, <span class="string">"咨询顾问"</span>, <span class="string">"客服顾问"</span>,</span><br><span class="line">    <span class="string">"分配校区"</span>, <span class="string">"备注"</span>&#125;;</span><br><span class="line"><span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">Column[] column = &#123;Column.field(<span class="string">"宝宝姓名"</span>), Column.field(<span class="string">"宝宝昵称"</span>), Column.field(<span class="string">"家长姓名"</span>),</span><br><span class="line">    Column.field(<span class="string">"手机号码"</span>).verifyText(<span class="string">"11~11"</span>, <span class="string">"请输入11位的手机号码！"</span>),</span><br><span class="line">    Column.field(<span class="string">"宝宝生日"</span>).verifyDate(<span class="string">"2000-01-01~3000-12-31"</span>),</span><br><span class="line">    Column.field(<span class="string">"月龄"</span>).width(<span class="number">4</span>).verifyCustom(<span class="string">"VALUE(F3:F6000)"</span>, <span class="string">"月齡格式：如1年2个月则输入14"</span>),</span><br><span class="line">    Column.field(<span class="string">"宝宝性别"</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"男"</span>, <span class="string">"女"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"来源渠道"</span>).width(<span class="number">12</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"品推"</span>, <span class="string">"市场"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"市场人员"</span>).width(<span class="number">6</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"张三"</span>, <span class="string">"李四"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"咨询顾问"</span>).width(<span class="number">6</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"张三"</span>, <span class="string">"李四"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"客服顾问"</span>).width(<span class="number">6</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"大唐"</span>, <span class="string">"银泰"</span>&#125;),</span><br><span class="line">    Column.field(<span class="string">"分配校区"</span>).width(<span class="number">6</span>).dorpDown(<span class="keyword">new</span> String[]&#123;<span class="string">"大唐"</span>, <span class="string">"银泰"</span>&#125;), Column.field(<span class="string">"备注"</span>)&#125;;</span><br><span class="line"><span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">Workbook bean = ExcelUtils.createWorkbook(Collections.emptyList(), ExportRules.simpleRule(column, hearder), <span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">bean.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export5.xlsx"</span>));</span><br></pre></td></tr></table></figure><h4 id="5导出图"><a href="#5导出图" class="headerlink" title="5导出图"></a>5导出图</h4><p><img src="https://images.gitee.com/uploads/images/2018/1215/180646_50cc4004_1215820.png" alt="输入图片说明" title="5.png"></p><p>6.多sheet合并导出</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">Workbook emptyWorkbook = ExcelUtils.createEmptyWorkbook(<span class="keyword">true</span>);</span><br><span class="line"><span class="comment">// 2.执行导出到工作簿.1.项目数据2.map数据3.复杂对象数据</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; moreSheetData.size(); i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">        List&lt;ProjectEvaluate&gt; data1 = (ArrayList&lt;ProjectEvaluate&gt;) moreSheetData.get(i);</span><br><span class="line">        <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">        String[] hearder = &#123;<span class="string">"序号"</span>, <span class="string">"项目名称"</span>, <span class="string">"所属区域"</span>, <span class="string">"省份"</span>, <span class="string">"市"</span>, <span class="string">"项目所属人"</span>, <span class="string">"项目领导人"</span>, <span class="string">"得分"</span>, <span class="string">"平均分"</span>, <span class="string">"创建时间"</span>, <span class="string">"项目图片"</span>&#125;;</span><br><span class="line">        <span class="comment">// 2.导出hearder对应的字段设置</span></span><br><span class="line">        Column[] column = &#123;Column.field(<span class="string">"projectName"</span>), Column.field(<span class="string">"areaName"</span>), Column.field(<span class="string">"province"</span>),</span><br><span class="line">                Column.field(<span class="string">"city"</span>), Column.field(<span class="string">"people"</span>), Column.field(<span class="string">"leader"</span>), Column.field(<span class="string">"scount"</span>),</span><br><span class="line">                Column.field(<span class="string">"avg"</span>), Column.field(<span class="string">"createTime"</span>),</span><br><span class="line">                <span class="comment">// 项目图片</span></span><br><span class="line">                Column.field(<span class="string">"img"</span>)</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        ExcelUtils.fillBook(emptyWorkbook, data1, ExportRules.simpleRule(column, hearder).title(<span class="string">"项目资源统计"</span>).sheetName(<span class="string">"mysheet1"</span>).autoNum(<span class="keyword">true</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">1</span>) &#123;</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; data2 = (ArrayList&lt;Map&lt;String, Object&gt;&gt;) moreSheetData.get(i);</span><br><span class="line">        <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">        String[] hearder = &#123;<span class="string">"姓名"</span>, <span class="string">"年龄"</span>&#125;;</span><br><span class="line">        <span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">        Column[] column = &#123;Column.field(<span class="string">"name"</span>),</span><br><span class="line">                Column.field(<span class="string">"age"</span>),</span><br><span class="line">        &#125;;</span><br><span class="line">        ExcelUtils.fillBook(emptyWorkbook, data2, ExportRules.simpleRule(column, hearder).sheetName(<span class="string">"mysheet2"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">        List&lt;Student&gt; data3 = (ArrayList&lt;Student&gt;) moreSheetData.get(i);</span><br><span class="line">        <span class="comment">// 1.导出的hearder设置</span></span><br><span class="line">        String[] hearder = &#123;<span class="string">"學生姓名"</span>, <span class="string">"所在班級"</span>, <span class="string">"所在學校"</span>, <span class="string">"更多父母姓名"</span>&#125;;</span><br><span class="line">        <span class="comment">// 2.导出hearder对应的字段设置，列宽设置</span></span><br><span class="line">        Column[] column = &#123;Column.field(<span class="string">"name"</span>), Column.field(<span class="string">"classRoom.name"</span>), Column.field(<span class="string">"classRoom.school.name"</span>),</span><br><span class="line">                Column.field(<span class="string">"moreInfo.parent.name"</span>),&#125;;</span><br><span class="line">        <span class="comment">// 3.执行导出到工作簿</span></span><br><span class="line">        ExcelUtils.fillBook(emptyWorkbook, data3, ExportRules.simpleRule(column, hearder).title(<span class="string">"學生基本信息"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4.写出文件</span></span><br><span class="line">emptyWorkbook.write(<span class="keyword">new</span> FileOutputStream(<span class="string">"src/test/java/excel/export/export6.xlsx"</span>));</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://996.icu&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;img src=&quot;https://img.shields.io/badge/link-996.icu-red.svg&quot; alt=&quot;996.icu&quot;&gt;&lt;/a&gt;&lt;
      
    
    </summary>
    
    
      <category term="Java" scheme="https://kanchai.club/categories/Java/"/>
    
    
      <category term="轮子工具" scheme="https://kanchai.club/tags/%E8%BD%AE%E5%AD%90%E5%B7%A5%E5%85%B7/"/>
    
      <category term="POI" scheme="https://kanchai.club/tags/POI/"/>
    
      <category term="Excel" scheme="https://kanchai.club/tags/Excel/"/>
    
  </entry>
  
  <entry>
    <title>RedisKey设计类</title>
    <link href="https://kanchai.club/2020/03/17/RedisKey%E8%AE%BE%E8%AE%A1%E7%B1%BB/"/>
    <id>https://kanchai.club/2020/03/17/RedisKey%E8%AE%BE%E8%AE%A1%E7%B1%BB/</id>
    <published>2020-03-17T15:36:46.510Z</published>
    <updated>2020-03-17T15:34:22.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.common.utils.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.lang3.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 生成RedisKey工具</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年05月07日 15:19</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisKeyUtil</span> </span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 主数据系统标识</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_PREFIX = <span class="string">"ym"</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分割字符，默认[:]，使用:可用于rdm分组查看</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String KEY_SPLIT_CHAR = <span class="string">":"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> module 模块名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> func   方法名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args   参数..</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(String <span class="keyword">module</span>, String func, String... args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keyBuilder(<span class="keyword">null</span>, <span class="keyword">module</span>, func, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> module 模块名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> func   方法名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> objStr 对象.toString()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(String <span class="keyword">module</span>, String func, String objStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keyBuilder(<span class="keyword">null</span>, <span class="keyword">module</span>, func, <span class="keyword">new</span> String[]&#123;objStr&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix 项目前缀</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> module 模块名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> func   方法名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> objStr 对象.toString()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(String prefix, String <span class="keyword">module</span>, String func, String objStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keyBuilder(prefix, <span class="keyword">module</span>, func, <span class="keyword">new</span> String[]&#123;objStr&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prefix 项目前缀</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> module 模块名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> func   方法名称</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> args   参数..</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(String prefix, String <span class="keyword">module</span>, String func, String... args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 项目前缀</span></span><br><span class="line"><span class="keyword">if</span> (prefix == <span class="keyword">null</span>) &#123;</span><br><span class="line">prefix = KEY_PREFIX;</span><br><span class="line">&#125;</span><br><span class="line">StringBuilder key = <span class="keyword">new</span> StringBuilder(prefix);</span><br><span class="line"><span class="comment">// KEY_SPLIT_CHAR 为分割字符</span></span><br><span class="line">key.append(KEY_SPLIT_CHAR).append(<span class="keyword">module</span>);</span><br><span class="line"><span class="keyword">if</span> (StringUtils.isNotBlank(func)) &#123;</span><br><span class="line">key.append(KEY_SPLIT_CHAR).append(func);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (String arg : args) &#123;</span><br><span class="line">key.append(KEY_SPLIT_CHAR).append(arg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> key.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * redis的key键规则定义</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> redisKeyEnum 枚举对象</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> objStr       对象.toString()</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> key</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">keyBuilder</span><span class="params">(RedisKeyEnum redisKeyEnum, String... objStr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> keyBuilder(redisKeyEnum.getKeyPrefix(), redisKeyEnum.getModule(), redisKeyEnum.getFunc(), objStr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>短信发送模板</title>
    <link href="https://kanchai.club/2020/03/17/%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81%E6%A8%A1%E6%9D%BF/"/>
    <id>https://kanchai.club/2020/03/17/%E7%9F%AD%E4%BF%A1%E5%8F%91%E9%80%81%E6%A8%A1%E6%9D%BF/</id>
    <published>2020-03-17T15:36:46.400Z</published>
    <updated>2020-03-17T15:34:27.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.enums.common;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Matcher;</span><br><span class="line"><span class="keyword">import</span> java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 阿里云短信模板</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年05月17日 17:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> SmsTemplateEnum &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:通用验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">UNIVERSAL_VERIFICATION_CODE(<span class="string">"SMS_173141326"</span>, <span class="string">"您的验证码$&#123;code&#125;，该验证码5分钟内有效，请勿泄漏于他人！"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:身份验证验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">AUTHENTICATION_CODE(<span class="string">"SMS_173191624"</span>, <span class="string">"验证码$&#123;code&#125;，您正在进行身份验证，打死不要告诉别人哦！"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:登录确认验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LOGON_CONFIRMATION_AUTHENTICATION_CODE(<span class="string">"SMS_173191623"</span>, <span class="string">"验证码$&#123;code&#125;，您正在登录，若非本人操作，请勿泄露。"</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:登录异常验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">LOGON_EXCEPTION_AUTHENTICATION_CODE(<span class="string">"SMS_173191622"</span>, <span class="string">"验证码$&#123;code&#125;，您正尝试异地登录，若非本人操作，请勿泄露。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:用户注册验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">USER_REGISTRATION_AUTHENTICATION_CODE(<span class="string">"SMS_173191621"</span>, <span class="string">"验证码$&#123;code&#125;，您正在注册成为新用户，感谢您的支持！"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:修改密码验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">MODIFY_PASSWORD_AUTHENTICATION_CODE(<span class="string">"SMS_173191620"</span>, <span class="string">"验证码$&#123;code&#125;，您正在尝试修改登录密码，请妥善保管账户信息。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:信息变更验证码</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">INFORMATION_CHANGE_VERIFICATION_CODE(<span class="string">"SMS_173191619"</span>, <span class="string">"验证码$&#123;code&#125;，您正在尝试变更重要信息，请妥善保管账户信息。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:医生资料审核不通过</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：用户资料审核不通过，发送短信告诉用户！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DATA_AUDIT_FAILED(<span class="string">"SMS_174986989"</span>, <span class="string">"抱歉，您暂未通过资质审核，未通过原因：$&#123;p2&#125;。客服电话：$&#123;p3&#125;"</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:医生资料审核通过</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-金额；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：用户资料审核通过，发送短信通知用户！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DATA_AUDIT_SUCCESS(<span class="string">"SMS_174986992"</span>, <span class="string">"恭喜，您已通过资质审核，请登录APP开启您的个人诊所之旅吧，完成首单可获得$&#123;p2&#125;元奖励哦！"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:用户注册通知</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-电话号码；p4-其他号码；p5-金额；p6-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：注册我方亚米健康产品后，发送此短信通知用户注册成功！</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">USER_REGISTRATION_NOTICE(<span class="string">"SMS_174986988"</span>, <span class="string">"您已成功注册$&#123;p2&#125;，账号$&#123;p3&#125; ，初始密码 $&#123;p4&#125;。快去亚米健康完成医疗资质认证开启您的线上诊所赢取 $&#123;p5&#125; 元奖励。客服电话：$&#123;p6&#125;。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:电话预约成功</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-其他；p4-时间；p5-时间；p6-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：用户电话预约成功后，发送短信通知用户</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SUCCESSFUL_TELEPHONE_RESERVATION(<span class="string">"SMS_174991908"</span>, <span class="string">"您预约了$&#123;p2&#125;医生的$&#123;p3&#125;，时间$&#123;p4&#125;，共$&#123;p5&#125;分钟，到时您会接到$&#123;p6&#125;的来电，请保持电话畅通。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:图文问诊支付成功</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-金额；p3-其他；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：图文问诊支付成功后，向用户发送短信通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SUCCESSFUL_PAYMENT_FOR_CONSULTATION(<span class="string">"SMS_174991905"</span>, <span class="string">"您刚支付了$&#123;p2&#125;元向$&#123;p3&#125;医生医生提问。可在我的问诊/当前问诊中找到该问题，查看医生回复。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:图问问诊医生首次回复</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-其他号码；p4-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：图问问诊医生首次回复后，需要发送短信告诉用户，让用户及时查看订单</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DOCTOR_FIRST_REPLY(<span class="string">"SMS_174986972"</span>, <span class="string">"医生$&#123;p2&#125;回复了您的问题，请您及时查看并进行后续交流。问题将在$&#123;p3&#125;小时后关闭。 有疑问请联系客服 $&#123;p4&#125;。"</span>),</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:问诊电话开始短信提醒</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p2-其他；p3-其他；p4-电话号码；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：问诊电话服务快要开始的时候，向患者发送短信提醒。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">INQUIRY_TELEPHONE_START_SHORT_MESSAGE_REMINDER(<span class="string">"SMS_174991891"</span>, <span class="string">"您预约了$&#123;p2&#125;医生的$&#123;p3&#125;服务即将开始，请您合理按排时间，注意接听。到时您会接到$&#123;p4&#125;的来电，请保持电话畅通。"</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:患者预约成功推送</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p0-其他；p1-其他；p2-时间；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：患者预约成功推送短信给医生，让医生及时联系患者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SUCCESSFUL_PUSH_OF_PATIENT_APPOINTMENT(<span class="string">"SMS_175245305"</span>, <span class="string">"$&#123;p0&#125;医生您好，$&#123;p1&#125;患者预约了电话问诊服务，请于$&#123;p2&#125;在亚米医疗APP端拨打电话"</span>),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 模版名称:医生电话问诊即将开始通知</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 变量：p0-其他；p1-其他；</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 备注：医生电话问诊即将开始通知</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DOCTOR_S_TELEPHONE_CONSULTATION_IS_ABOUT_TO_START(<span class="string">"SMS_175240289"</span>, <span class="string">"$&#123;p0&#125;医生您好，$&#123;p1&#125;患者预约的电话问诊服务即将开始，请及时拨打电话。"</span>),</span><br><span class="line">;</span><br><span class="line"><span class="keyword">private</span> String code;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(SmsTemplateEnum<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">SmsTemplateEnum</span><span class="params">(String code, String content)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.code = code;</span><br><span class="line"><span class="keyword">this</span>.content = content;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 输入对应模板的参数，生成JSON格式</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> prams</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">buildParams</span><span class="params">(Object... prams)</span> </span>&#123;</span><br><span class="line">JSONObject buildParams = <span class="keyword">new</span> JSONObject();</span><br><span class="line">String content = <span class="keyword">this</span>.content;</span><br><span class="line">Pattern pattern = Pattern.compile(<span class="string">"\\$\\&#123;[^&#125;]*\\&#125;"</span>);</span><br><span class="line">Matcher matcher = pattern.matcher(content);</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">List&lt;String&gt; logs = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">String group = matcher.group(<span class="number">0</span>);</span><br><span class="line">logs.add(group);</span><br><span class="line">String key = group.replaceAll(<span class="string">"\\$|\\&#123;|\\&#125;"</span>, <span class="string">""</span>);</span><br><span class="line">buildParams.put(key, prams[index]);</span><br><span class="line">index++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; logs.size(); i++) &#123;</span><br><span class="line">content = content.replace(logs.get(i), String.valueOf(prams[i]));</span><br><span class="line">&#125;</span><br><span class="line">String result = buildParams.toJSONString();</span><br><span class="line">LOGGER.info(<span class="string">"发送SMS内容为：&#123;&#125;"</span>, content);</span><br><span class="line">LOGGER.info(<span class="string">"发送SMS参数为：&#123;&#125;"</span>, result);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据code获取验证码发送模板</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> code</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SmsTemplateEnum <span class="title">getCodeTemp</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">SmsTemplateEnum codeTemp = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">switch</span> (code) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"01"</span>:</span><br><span class="line"><span class="comment">//身份验证</span></span><br><span class="line">codeTemp = SmsTemplateEnum.AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"02"</span>:</span><br><span class="line"><span class="comment">//正常登录</span></span><br><span class="line">codeTemp = SmsTemplateEnum.LOGON_CONFIRMATION_AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"03"</span>:</span><br><span class="line"><span class="comment">//登录异常</span></span><br><span class="line">codeTemp = SmsTemplateEnum.LOGON_EXCEPTION_AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"04"</span>:</span><br><span class="line"><span class="comment">//用户注册</span></span><br><span class="line">codeTemp = SmsTemplateEnum.USER_REGISTRATION_AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"05"</span>:</span><br><span class="line"><span class="comment">//修改密码</span></span><br><span class="line">codeTemp = SmsTemplateEnum.MODIFY_PASSWORD_AUTHENTICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="string">"06"</span>:</span><br><span class="line"><span class="comment">//信息变更</span></span><br><span class="line">codeTemp = SmsTemplateEnum.INFORMATION_CHANGE_VERIFICATION_CODE;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">codeTemp = SmsTemplateEnum.UNIVERSAL_VERIFICATION_CODE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> codeTemp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>rabbitmq实现延时队列任务</title>
    <link href="https://kanchai.club/2020/03/17/rabbitmq%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1/"/>
    <id>https://kanchai.club/2020/03/17/rabbitmq%E5%AE%9E%E7%8E%B0%E5%BB%B6%E6%97%B6%E9%98%9F%E5%88%97%E4%BB%BB%E5%8A%A1/</id>
    <published>2020-03-17T15:36:46.276Z</published>
    <updated>2020-03-17T15:34:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>此前实现过一个基于redis和jvm的延时队列任务执行，有个弊端就是吞吐量和可靠性上得不到保障，比如系统重启队列任务丢失，需要人工的加载等等。所以此次利用rabbitmq来实现一个延时。</p><a id="more"></a><p>此前实现过一个基于redis和jvm的延时队列任务执行，有个弊端就是吞吐量和可靠性上得不到保障，比如系统重启队列任务丢失，需要人工的加载等等。所以此次利用rabbitmq来实现一个延时…</p><h4 id="要开发肯定先安装MQ-MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。"><a href="#要开发肯定先安装MQ-MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。" class="headerlink" title="要开发肯定先安装MQ,MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。"></a>要开发肯定先安装MQ,MQ的安装方式可以自行百度，我这里介绍简单的docker安装，首先安装docker服务，再安装带管理界面的rabbitMQ。</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#### 1.更新yum源</span><br><span class="line">&gt; yum update</span><br><span class="line"></span><br><span class="line">#### 2.安装docker</span><br><span class="line">&gt; yum install -y docker</span><br><span class="line"></span><br><span class="line">#### 3拉取镜像</span><br><span class="line">&gt; docker pull rabbitmq:management</span><br><span class="line"></span><br><span class="line">#### 4启动容器</span><br><span class="line">&gt; docker run -d --name rabbitmq --privileged=true -p 9158:5672 -p 9159:15672  -v /home/rabbit/data:/var/lib/rabbitmq -v /home/rabbit/log:/var/log/rabbitmq </span><br><span class="line">-v /home/rabbit/plugins:/plugins </span><br><span class="line">--hostname ymRabbit -e RABBITMQ_DEFAULT_VHOST=/ -e RABBITMQ_DEFAULT_USER=ym_rabbit -e RABBITMQ_DEFAULT_PASS=ym_rabbit d8f707718f06</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#### 5进入容器方式</span><br><span class="line">&gt; docker exec -it 容器ID /bin/bash</span><br><span class="line"></span><br><span class="line">#### 6退出容器</span><br><span class="line">&gt; exit 或者 Ctrl+p+q</span><br><span class="line"></span><br><span class="line">#### 7向容器发送命令</span><br><span class="line">&gt; docker exec -d 13dc7c8ce0bd rabbitmq-plugins enable rabbitmq_delayed_message_exchange</span><br></pre></td></tr></table></figure><h4 id="两种延时方式"><a href="#两种延时方式" class="headerlink" title="两种延时方式"></a>两种延时方式</h4><ol><li>死信+普通交换器，依靠消息过期自动进入死信队列，然后消费死信队列的数据这个思路，但是由于这种方式不管设置队列过期时间还是消息过期时间，都不能达到单个队列消息灵活过期的目的。<br>比如，先放入队列10s过期消息，再放入2s过期。mq会检测头部10s是否过期，10s不过期的情况下，2s就算过去也不会跑到死信。</li><li>使用插件rabbitmq_delayed_message_exchange。这个可以很好的解决消息不能灵活过期的问题，但是有个弊端就是很难查看消息堆积的情况，因为他把要发送的延时消息存在本地的分布式mnesia 数据库中，其次过期时间为最大int值，超过这个值得代码判定重复过期设置。</li></ol><h4 id="延时插件的使用方式"><a href="#延时插件的使用方式" class="headerlink" title="延时插件的使用方式"></a>延时插件的使用方式</h4><ol><li>去MQ官网下载插件 ++<a href="https://www.rabbitmq.com/community-plugins.html++(rabbitmq_delayed_message_exchange)" target="_blank" rel="noopener">https://www.rabbitmq.com/community-plugins.html++(rabbitmq_delayed_message_exchange)</a></li><li>把插件放到MQ的安装目录的plugins下</li><li>然后执行rabbitmq-plugins enable rabbitmq_delayed_message_exchange 命令启用插件</li><li>然后就也可以在web页面查看新的交换器x-delayed-message（其实并不是真正意义上的，真正的只有4个）</li><li>然后上代码实现延时任务，配置文件<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">spring:</span><br><span class="line">   rabbitmq:</span><br><span class="line">    host: 192.168.0.245</span><br><span class="line">    port: 9158</span><br><span class="line">    username: ym_rabbit</span><br><span class="line">    password: ym_rabbit</span><br><span class="line">    listener:</span><br><span class="line">      simple:</span><br><span class="line">        acknowledge-mode: manual #手动应答</span><br><span class="line">        retry:</span><br><span class="line">          enabled: true</span><br><span class="line"></span><br><span class="line"># 用户自定义配置</span><br><span class="line">config-center:</span><br><span class="line">  rabbitRuleConfig:</span><br><span class="line">    # 系统标志</span><br><span class="line">    systemMark: local</span><br><span class="line">    # 普通消息</span><br><span class="line">    normalExchange: topic.normal</span><br><span class="line">    # 延时消息</span><br><span class="line">    delayExchange: topic.delay</span><br><span class="line">    # 普通和延时消息死信</span><br><span class="line">    deadExchange: topic.dead</span><br></pre></td></tr></table></figure></li><li>spring中MQ的配置<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * RabbitMQConfig 配置</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年05月07日 14:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RabbitMQConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------常量定义-----------------------</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String POINT = <span class="string">"."</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NORMAL = <span class="string">"nml"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DELAY = <span class="string">"dly"</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String QUEUE = <span class="string">"que"</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//----------------------------交换器定义----------------------------</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通交换器名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String NORMAL_EXCHANGE = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 死信交换器名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DEAD_EXCHANGE = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时交换器名字</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DELAY_EXCHANGE = <span class="string">""</span>;</span><br><span class="line"><span class="comment">//-------------------------队列定义--------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String NORMAL_QUEUE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时队列存放任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DELAY_QUEUE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通死信队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DEAD_NORMAL_QUEUE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时死信队列</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String DEAD_DELAY_QUEUE = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ConfigCenterProperties configCenterProperties;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RabbitTemplate <span class="title">rabbitTemplate</span><span class="params">(CachingConnectionFactory rabbitListenerContainerFactory)</span> </span>&#123;</span><br><span class="line">RabbitTemplate rabbitTemplate = <span class="keyword">new</span> RabbitTemplate(rabbitListenerContainerFactory);</span><br><span class="line">rabbitTemplate.setUsePublisherConnection(<span class="keyword">true</span>);</span><br><span class="line">rabbitTemplate.setChannelTransacted(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> rabbitTemplate;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">RabbitRuleConfig rabbitRuleConfig = configCenterProperties.getRabbitRuleConfig();</span><br><span class="line">NORMAL_EXCHANGE = rabbitRuleConfig.getNormalExchange() + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DEAD_EXCHANGE = rabbitRuleConfig.getDeadExchange() + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DELAY_EXCHANGE = rabbitRuleConfig.getDelayExchange() + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">NORMAL_QUEUE = rabbitRuleConfig.getNormalExchange() + POINT + QUEUE + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DELAY_QUEUE = rabbitRuleConfig.getDelayExchange() + POINT + QUEUE + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DEAD_NORMAL_QUEUE = rabbitRuleConfig.getDeadExchange() + POINT + QUEUE + POINT + NORMAL + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">DEAD_DELAY_QUEUE = rabbitRuleConfig.getDeadExchange() + POINT + QUEUE + POINT + DELAY + POINT + rabbitRuleConfig.getSystemMark();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory(ConnectionFactory connectionFactory) &#123;</span><br><span class="line">SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">factory.setConnectionFactory(connectionFactory);</span><br><span class="line">factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">factory.setMessageConverter(<span class="keyword">new</span> Jackson2JsonMessageConverter());</span><br><span class="line">factory.setChannelTransacted(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> RabbitListenerContainerFactory&lt;?&gt; rabbitListenerContainerFactory2(ConnectionFactory connectionFactory) &#123;</span><br><span class="line">SimpleRabbitListenerContainerFactory factory = <span class="keyword">new</span> SimpleRabbitListenerContainerFactory();</span><br><span class="line">factory.setConnectionFactory(connectionFactory);</span><br><span class="line">factory.setAcknowledgeMode(AcknowledgeMode.MANUAL);</span><br><span class="line">factory.setMessageConverter(<span class="keyword">new</span> SerializerMessageConverter());</span><br><span class="line">factory.setChannelTransacted(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">return</span> factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------交换器声明start---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TopicExchange <span class="title">normalExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(NORMAL_EXCHANGE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> TopicExchange <span class="title">deadExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> TopicExchange(DEAD_EXCHANGE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> CustomExchange <span class="title">delayExchange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; args = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">args.put(<span class="string">"x-delayed-type"</span>, <span class="string">"topic"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> CustomExchange(DELAY_EXCHANGE, <span class="string">"x-delayed-message"</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//------------------------------交换器声明end---------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------队列start---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">deadNormalQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(DEAD_NORMAL_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">deadDelayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(DEAD_DELAY_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">normalQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">params.put(<span class="string">"x-dead-letter-exchange"</span>, DEAD_EXCHANGE);</span><br><span class="line">params.put(<span class="string">"x-dead-letter-routing-key"</span>, DEAD_NORMAL_QUEUE);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(NORMAL_QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Queue <span class="title">delayQueue</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Map&lt;String, Object&gt; params = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">params.put(<span class="string">"x-dead-letter-exchange"</span>, DEAD_EXCHANGE);</span><br><span class="line">params.put(<span class="string">"x-dead-letter-routing-key"</span>, DEAD_DELAY_QUEUE);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> Queue(DELAY_QUEUE, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, params);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------------------------队列end---------------------------------</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//-------------------------------绑定start---------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingNormalExchange</span><span class="params">(Queue normalQueue, TopicExchange normalExchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(normalQueue).to(normalExchange).with(NORMAL_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingNormalDeadExchange</span><span class="params">(Queue deadNormalQueue, TopicExchange deadExchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(deadNormalQueue).to(deadExchange).with(DEAD_NORMAL_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDelayExchange</span><span class="params">(Queue delayQueue, CustomExchange delayExchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(delayQueue).to(delayExchange).with(DELAY_QUEUE).noargs();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Binding <span class="title">bindingDelayDeadExchange</span><span class="params">(Queue deadDelayQueue, TopicExchange deadExchange)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> BindingBuilder.bind(deadDelayQueue).to(deadExchange).with(DEAD_DELAY_QUEUE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//-----------------------------------------绑定end------------------------------------------</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>7.生产者代码开发,我这里将延时任务和普通消息分开了，所以有2个发送方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送消息给MQ</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年09月19日 11:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IMessageSenderSV</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(IMessageSenderSV<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送云信消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> messageTask 消息内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMsg</span><span class="params">(NormalMessageTask messageTask)</span> </span>&#123;</span><br><span class="line">LOG.info(<span class="string">"发送[ &#123;&#125; ]消息到MQ"</span>, messageTask.getMessageTypeEnum().getDescribe());</span><br><span class="line">rabbitTemplate.setMessageConverter(<span class="keyword">new</span> Jackson2JsonMessageConverter());</span><br><span class="line">rabbitTemplate.convertAndSend(RabbitMQConfig.NORMAL_EXCHANGE, RabbitMQConfig.NORMAL_QUEUE, messageTask, (message) -&gt; &#123;</span><br><span class="line">MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">messageProperties.setMessageId(messageTask.getUuid());</span><br><span class="line">messageProperties.setType(messageTask.getMessageTypeEnum().getDescribe());</span><br><span class="line">messageProperties.setContentType(MessageProperties.CONTENT_TYPE_JSON);</span><br><span class="line">String sendTime = DateKit.parseDateToStr(DateKit.YYYY_MM_DD_HH_MM_SS, <span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">// 发送时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"send_time"</span>, sendTime);</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 发送延时任务给队列</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> task 任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendDelayTask</span><span class="params">(AbstractDelayedTask task)</span> </span>&#123;</span><br><span class="line">LOG.info(<span class="string">"发送延时任务 [ &#123;&#125;:&#123;&#125; ] 到MQ"</span>, task.getDescribe(), task.getDelay());</span><br><span class="line">rabbitTemplate.setMessageConverter(<span class="keyword">new</span> SerializerMessageConverter());</span><br><span class="line">rabbitTemplate.convertAndSend(RabbitMQConfig.DELAY_EXCHANGE, RabbitMQConfig.DELAY_QUEUE, task, (message) -&gt; &#123;</span><br><span class="line">MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line"><span class="keyword">long</span> nextDelay = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (task.getDelay() &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line"><span class="comment">//如果延时时间大于erlang最大数值，多次延时</span></span><br><span class="line">messageProperties.setDelay(Integer.MAX_VALUE);</span><br><span class="line">nextDelay = task.getDelay() - Integer.MAX_VALUE;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">messageProperties.setDelay(task.getDelay().intValue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下次延时的时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"next_delay"</span>, nextDelay);</span><br><span class="line">messageProperties.setMessageId(task.getUuid());</span><br><span class="line">messageProperties.setType(task.getDescribe());</span><br><span class="line">messageProperties.setContentType(MessageProperties.CONTENT_TYPE_SERIALIZED_OBJECT);</span><br><span class="line">String sendTime = DateKit.parseDateToStr(DateKit.YYYY_MM_DD_HH_MM_SS, <span class="keyword">new</span> Date());</span><br><span class="line"><span class="comment">// 发送时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"send_time"</span>, sendTime);</span><br><span class="line">String expirationTime = DateKit.parseDateToStr(DateKit.YYYY_MM_DD_HH_MM_SS, <span class="keyword">new</span> Date(System.currentTimeMillis() + task.getDelay()));</span><br><span class="line"><span class="comment">// 过期时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"expiration_time"</span>, expirationTime);</span><br><span class="line"><span class="comment">// 任务的入参</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"params"</span>, task.getParams().toString());</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多次延时，再次发送任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> task 任务</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> nextDelay 下次延时时间</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAgain</span><span class="params">(Message task, <span class="keyword">final</span> <span class="keyword">long</span> nextDelay)</span> </span>&#123;</span><br><span class="line">rabbitTemplate.setMessageConverter(<span class="keyword">new</span> SerializerMessageConverter());</span><br><span class="line">rabbitTemplate.convertAndSend(RabbitMQConfig.DELAY_EXCHANGE, RabbitMQConfig.DELAY_QUEUE, task, (message) -&gt; &#123;</span><br><span class="line">MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line"><span class="keyword">long</span> nextDelayNew = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (nextDelay &gt; Integer.MAX_VALUE) &#123;</span><br><span class="line"><span class="comment">//如果延时时间大于erlang最大数值，多次延时</span></span><br><span class="line">messageProperties.setDelay(Integer.MAX_VALUE);</span><br><span class="line">nextDelayNew = nextDelay - Integer.MAX_VALUE;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">messageProperties.setDelay((<span class="keyword">int</span>) nextDelay);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 下次延时的时间</span></span><br><span class="line">messageProperties.setHeader(<span class="string">"next_delay"</span>, nextDelayNew);</span><br><span class="line"><span class="keyword">return</span> message;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.消费者代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费MQ消息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年09月18日 10:41</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@EnableRabbit</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IMessageReceiveSV</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(IMessageReceiveSV<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IMessageSenderSV messageSenderSV;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IYunxinUserSV yunxinUserSV;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RabbitTemplate rabbitTemplate;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;config-center.rabbitRuleConfig.deadExchange&#125;.que.nml.$&#123;config-center.rabbitRuleConfig.systemMark&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String normalDeadQueue;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;config-center.rabbitRuleConfig.deadExchange&#125;.que.dly.$&#123;config-center.rabbitRuleConfig.systemMark&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String delayDeadQueue;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 普通消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"$&#123;config-center.rabbitRuleConfig.normalExchange&#125;.que.$&#123;config-center.rabbitRuleConfig.systemMark&#125;"</span>, containerFactory = <span class="string">"rabbitListenerContainerFactory"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">autoNormalMsg</span><span class="params">(@Payload NormalMessageTask messageTask, @Headers Map&lt;String, Object&gt; headers, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">channel.txSelect();</span><br><span class="line"><span class="keyword">boolean</span> success = normalHandle(messageTask);</span><br><span class="line"><span class="keyword">if</span> (success) &#123;</span><br><span class="line">channel.basicAck((<span class="keyword">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="keyword">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">channel.basicReject((<span class="keyword">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">channel.txCommit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动消费普通消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manualConsumptionNormal</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rabbitTemplate.receiveAndReply(normalDeadQueue, (payload) -&gt; &#123;</span><br><span class="line">NormalMessageTask normalMessageTask = (NormalMessageTask) payload;</span><br><span class="line"><span class="keyword">boolean</span> success = normalHandle(normalMessageTask);</span><br><span class="line"><span class="keyword">if</span> (!success) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AmqpException(<span class="string">"普通消息消费异常"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费普通消息方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> messageTask</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">normalHandle</span><span class="params">(NormalMessageTask messageTask)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">MessageTypeEnum messageTypeEnum = messageTask.getMessageTypeEnum();</span><br><span class="line">Object msg = messageTask.getMsg();</span><br><span class="line">LOG.info(<span class="string">"消费消息 [ &#123;&#125; ],消息ID为[ &#123;&#125; ]"</span>, messageTypeEnum.getDescribe(), messageTask.getUuid());</span><br><span class="line"><span class="keyword">switch</span> (messageTypeEnum) &#123;</span><br><span class="line"><span class="keyword">case</span> YUN_XIN: &#123;</span><br><span class="line">yunxinUserSV.syncMessages((String) msg);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>: &#123;</span><br><span class="line"><span class="comment">// do</span></span><br><span class="line">LOG.info(<span class="string">"未知消息:&#123;&#125;"</span>, (String) msg);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="keyword">if</span> (e <span class="keyword">instanceof</span> BusinessException) &#123;</span><br><span class="line">LOG.info(e.getMessage());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">LOG.error(<span class="string">"消费异常:&#123;&#125;"</span>, ExceptionUtil.getExceptionMessage(e));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时消息,执行策略</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> * 能收到说明已经到时间了</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RabbitListener</span>(queues = <span class="string">"$&#123;config-center.rabbitRuleConfig.delayExchange&#125;.que.$&#123;config-center.rabbitRuleConfig.systemMark&#125;"</span>, containerFactory = <span class="string">"rabbitListenerContainerFactory2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">autoDelayMsg</span><span class="params">(@Payload Message message, @Headers Map&lt;String, Object&gt; headers, Channel channel)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">channel.txSelect();</span><br><span class="line"><span class="keyword">boolean</span> success = delayHandle(message);</span><br><span class="line"><span class="keyword">if</span> (success) &#123;</span><br><span class="line">channel.basicAck((<span class="keyword">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="keyword">false</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">channel.basicReject((<span class="keyword">long</span>) headers.get(AmqpHeaders.DELIVERY_TAG), <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">channel.txCommit();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费延时消息方法</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> message</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">delayHandle</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">MessageProperties messageProperties = message.getMessageProperties();</span><br><span class="line">Map&lt;String, Object&gt; headers = messageProperties.getHeaders();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="comment">// 判定是否要多次延时</span></span><br><span class="line"><span class="keyword">long</span> nextDelay = (<span class="keyword">long</span>) headers.get(<span class="string">"next_delay"</span>);</span><br><span class="line"><span class="keyword">if</span> (nextDelay &gt; <span class="number">0</span>) &#123;</span><br><span class="line">messageSenderSV.sendAgain(message, nextDelay);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">byte</span>[] body = message.getBody();</span><br><span class="line"><span class="keyword">if</span> (body != <span class="keyword">null</span> &amp;&amp; body.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="comment">//判定为一个有效消息，进行执行</span></span><br><span class="line"><span class="keyword">try</span> (ObjectInputStream ois = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> ByteArrayInputStream(body));) &#123;</span><br><span class="line">AbstractDelayedTask abstractDelayedTask = (AbstractDelayedTask) ois.readObject();</span><br><span class="line">LOG.info(<span class="string">"执行延时任务 [ &#123;&#125; ],消息ID为[ &#123;&#125; ],参数为:&#123;&#125;"</span>, abstractDelayedTask.getDescribe(), abstractDelayedTask.getUuid(), JSONObject.toJSONString(headers));</span><br><span class="line">abstractDelayedTask.excute();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Throwable e) &#123;</span><br><span class="line"><span class="keyword">if</span> (e <span class="keyword">instanceof</span> BusinessException) &#123;</span><br><span class="line">LOG.info(e.getMessage());</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">LOG.error(<span class="string">"消费异常:&#123;&#125;"</span>, ExceptionUtil.getExceptionMessage(e));</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 手动消费延时消息</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">manualConsumptionDelay</span><span class="params">()</span> </span>&#123;</span><br><span class="line">rabbitTemplate.receiveAndReply(delayDeadQueue, (payload) -&gt; &#123;</span><br><span class="line">AbstractDelayedTask abstractDelayedTask = (AbstractDelayedTask) payload;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">abstractDelayedTask.excute();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">LOG.error(ExceptionUtil.getExceptionMessage(e));</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AmqpException(<span class="string">"延时消息异常"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9.延时任务抽象类定义</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时队列Task</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 创建时间：2018年6月16日 下午3:34:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDelayedTask</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(AbstractDelayedTask<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务唯一性标志</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String uuid = UUID.uuid();</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 任务描述</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> String describe;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多久后执行，单位毫秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> Long delay;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 方法需要执行的参数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> JSONObject params;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AbstractDelayedTask</span><span class="params">(String describe, <span class="keyword">long</span> delay, JSONObject params)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.describe = describe;</span><br><span class="line"><span class="keyword">this</span>.delay = delay;</span><br><span class="line"><span class="keyword">this</span>.params = params;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行任务</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">LOG.info(<span class="string">"执行延时任务开始===========》&#123;&#125;"</span>, describe);</span><br><span class="line"><span class="keyword">this</span>.run();</span><br><span class="line">LOG.info(<span class="string">"执行延时任务结束===========》&#123;&#125;"</span>, describe);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="9"><li>使用方式</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//15分钟未支付取消订单操作</span></span><br><span class="line">JSONObject params = <span class="keyword">new</span> JSONObject();</span><br><span class="line">params.put(<span class="string">"id"</span>,<span class="string">"订单ID"</span>);</span><br><span class="line">UnPayCancelOrderTask unPayCancelOrderTask = <span class="keyword">new</span> UnPayCancelOrderTask(<span class="string">"下单后不支付自动取消订单"</span>, TimeUnit.MINUTES.toMillis(<span class="number">15</span>), params);</span><br><span class="line">messageSenderSV.sendDelayTask(unPayCancelOrderTask);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;此前实现过一个基于redis和jvm的延时队列任务执行，有个弊端就是吞吐量和可靠性上得不到保障，比如系统重启队列任务丢失，需要人工的加载等等。所以此次利用rabbitmq来实现一个延时。&lt;/p&gt;
    
    </summary>
    
    
      <category term="轮子" scheme="https://kanchai.club/categories/%E8%BD%AE%E5%AD%90/"/>
    
    
      <category term="rabbitMQ" scheme="https://kanchai.club/tags/rabbitMQ/"/>
    
  </entry>
  
  <entry>
    <title>基于注解的Redis分布式锁</title>
    <link href="https://kanchai.club/2020/03/17/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://kanchai.club/2020/03/17/%E5%9F%BA%E4%BA%8E%E6%B3%A8%E8%A7%A3%E7%9A%84Redis%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2020-03-17T15:36:46.103Z</published>
    <updated>2020-03-17T15:34:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于之前用redis的lua脚本来实现安全的分布式锁,发现代码是加锁虽然灵活，但是非常的不便捷。每次需要加锁的时候，都要写出非常多的重复性代码。遂…………</p><a id="more"></a><ul><li>为什么使用基于注解的方式？</li></ul><p>基于之前用redis的lua脚本来实现安全的分布式锁,发现代码是加锁虽然灵活，但是非常的不便捷。每次需要加锁的时候，都要写出非常多的重复性代码。遂考虑利用AOP的方式，完成这一重复性的工作。<br>在没利用注解之前加锁方式如下,基本每次都要这样写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 会话ID</span></span><br><span class="line">String uuid = UUID.uuid();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">boolean</span> getLock = RedisLockUtil.tryGetDistributedLock(key, uuid, <span class="number">5000</span>);</span><br><span class="line"><span class="keyword">if</span> (getLock) &#123;</span><br><span class="line">    <span class="comment">//如果获取锁，执行业务代码</span></span><br><span class="line">    <span class="comment">// todo</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">RedisLockUtil.releaseDistributedLock(key, uuid);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>基于注解的使用放入如下，比较便捷</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Locker(key &#x3D; RedisKeyEnum.POOL_ORDER_LOCK, paramExp &#x3D; &quot;0&quot;, noGetMsg &#x3D; &quot;老铁来晚了!&quot;)</span><br><span class="line">public GrabAndAnswerVo grabOrderAnswer(String orderId, RedisKeyEnum poolType, User currentUser) &#123;</span><br><span class="line">Long workId &#x3D; orderExist(poolType, orderId);</span><br><span class="line">return doctorGrabOrderAnswer(poolType, orderId, currentUser);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下面介绍以下代码</li></ul><ol><li>首先AOP的使用方式我定义为利用注解来判断是否需要加锁，类似事务的方式，我们定义一个Locker注解,这个注解的功能可以看代码;</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 锁注解</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 625</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.METHOD&#125;)</span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Locker &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要锁定的Key</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">RedisKeyEnum <span class="title">key</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 要锁定的参数</span></span><br><span class="line"><span class="comment"> * 格式:</span></span><br><span class="line"><span class="comment"> * 0    表示一个参数toString</span></span><br><span class="line"><span class="comment"> * 0?payOrder    表示一个参数toString，且额外拼接锁定的Key为payOrder</span></span><br><span class="line"><span class="comment"> * 0#name 表示第一个参数的name字段</span></span><br><span class="line"><span class="comment"> * 0#name?payOrder  表示第一个参数的name字段，且额外拼接锁定的Key为payOrder</span></span><br><span class="line"><span class="comment"> * 0#name+1#name?payOrder表示第一个参数的name字段+第二个参数的name字段，且额外拼接锁定的Key为payOrder</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">paramExp</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 业务超时自动释放锁的时间,应该大于正常业务执行时间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">expireTime</span><span class="params">()</span> <span class="keyword">default</span> 10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最小持有锁的时间</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="title">limitTime</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 是否持续竞争锁，是则阻塞方法直至获取锁，或者达到最大竞争次数释放锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">continueGet</span><span class="params">()</span> <span class="keyword">default</span> <span class="keyword">false</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 最大竞争次数。默认0不限次</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxGetNum</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 拿不到锁，异常返回信息</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">String <span class="title">noGetMsg</span><span class="params">()</span> <span class="keyword">default</span> "未获取锁"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>实现AOP的拦截规则</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;**</span><br><span class="line"> * 锁AOP拦截规则</span><br><span class="line"> *&#x2F;</span><br><span class="line">@Aspect</span><br><span class="line">@Component</span><br><span class="line">public class LockerAspect &#123;</span><br><span class="line"></span><br><span class="line">private static Logger LOGGER &#x3D; LoggerFactory.getLogger(LockerAspect.class);</span><br><span class="line"></span><br><span class="line">@Pointcut(&quot;@annotation(com.ym.common.utils.annotation.Locker)&quot;)</span><br><span class="line">public void pointcut() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Around(&quot;pointcut()&quot;)</span><br><span class="line">public Object around(ProceedingJoinPoint joinPoint) &#123;</span><br><span class="line">Object proceed &#x3D; null;</span><br><span class="line">long startTime &#x3D; System.currentTimeMillis();</span><br><span class="line">Locker locker &#x3D; getAnnotation(joinPoint, Locker.class);</span><br><span class="line">Object[] args &#x3D; joinPoint.getArgs();</span><br><span class="line">&#x2F;&#x2F; 最大尝试次数</span><br><span class="line">int maxGetNum &#x3D; locker.maxGetNum();</span><br><span class="line">&#x2F;&#x2F; 会话标志</span><br><span class="line">String uuid &#x3D; UUID.uuid();</span><br><span class="line">&#x2F;&#x2F; 锁key</span><br><span class="line">String lockFiled &#x3D; getLockFiled(args, locker.paramExp());</span><br><span class="line">String lockKey &#x3D; RedisKeyUtil.keyBuilder(locker.key(), lockFiled);</span><br><span class="line">&#x2F;&#x2F; 过期时间</span><br><span class="line">long expireTime &#x3D; locker.expireTime();</span><br><span class="line">boolean lock &#x3D; RedisLockUtil.tryGetDistributedLock(lockKey, uuid, expireTime);</span><br><span class="line">int getNum &#x3D; 0;</span><br><span class="line">while (!lock &amp;&amp; locker.continueGet() &amp;&amp; (maxGetNum &#x3D;&#x3D; 0 || getNum &lt; maxGetNum)) &#123;</span><br><span class="line">&#x2F;&#x2F; 如果获取失败，且持续获取，且尝试次数小于最大次数</span><br><span class="line">Threads.sleep(100);</span><br><span class="line">lock &#x3D; RedisLockUtil.tryGetDistributedLock(lockKey, uuid, expireTime);</span><br><span class="line">&#125;</span><br><span class="line">if (!lock) &#123;</span><br><span class="line">throw new BusinessException(locker.noGetMsg());</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F; -------------------------------before-------------------------</span><br><span class="line">try &#123;</span><br><span class="line">proceed &#x3D; joinPoint.proceed();</span><br><span class="line">&#x2F;&#x2F; -------------------------------after-------------------------</span><br><span class="line">&#x2F;&#x2F; 如果业务时间小于最小持有锁时间，休眠一会</span><br><span class="line">long sleepTime &#x3D; locker.limitTime() - (System.currentTimeMillis() - startTime);</span><br><span class="line">if (sleepTime &gt; 0) &#123;</span><br><span class="line">Threads.sleep(sleepTime);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Throwable throwable) &#123;</span><br><span class="line">throwable.printStackTrace();</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">&#x2F;&#x2F; 释放锁</span><br><span class="line">RedisLockUtil.releaseDistributedLock(lockKey, uuid);</span><br><span class="line">&#125;</span><br><span class="line">return proceed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 根据表达式获取要锁的字段</span><br><span class="line"> *</span><br><span class="line"> * @param args</span><br><span class="line"> * @param expression 表达式</span><br><span class="line"> * @return</span><br><span class="line"> *&#x2F;</span><br><span class="line">private String getLockFiled(Object[] args, String expression) &#123;</span><br><span class="line">if (args &#x3D;&#x3D; null || args.length &#x3D;&#x3D; 0 || StringUtils.isBlank(expression)) &#123;</span><br><span class="line">throw new UnsupportedOperationException(&quot;Locker所在方法参数为空! 请使用代码锁&quot;);</span><br><span class="line">&#125;</span><br><span class="line">String[] extraParams &#x3D; expression.split(&quot;\\?&quot;);</span><br><span class="line">String extraKey &#x3D; null;</span><br><span class="line">if (extraParams.length &gt; 1) &#123;</span><br><span class="line">extraKey &#x3D; extraParams[1];</span><br><span class="line">expression &#x3D; extraParams[0];</span><br><span class="line">&#125;</span><br><span class="line">String[] commboExpression &#x3D; expression.split(&quot;\\+&quot;);</span><br><span class="line">StringBuilder field &#x3D; new StringBuilder();</span><br><span class="line">for (String commbo : commboExpression) &#123;</span><br><span class="line">String[] split &#x3D; commbo.split(&quot;#&quot;);</span><br><span class="line">int argsNum &#x3D; 0;</span><br><span class="line">try &#123;</span><br><span class="line">if (split.length &#x3D;&#x3D; 1) &#123;</span><br><span class="line">argsNum &#x3D; Integer.parseInt(split[0]);</span><br><span class="line">field.append(String.valueOf(args[argsNum]));</span><br><span class="line">&#125; else &#123;</span><br><span class="line">argsNum &#x3D; Integer.parseInt(split[0]);</span><br><span class="line">Object fieldValue &#x3D; ReflectUtils.getFieldValue(args[argsNum], split[1]);</span><br><span class="line">field.append(String.valueOf(fieldValue));</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">throw new UnsupportedOperationException(&quot;Locker表达式paramExp不正确！&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (extraKey !&#x3D; null) &#123;</span><br><span class="line">field.append(extraKey);</span><br><span class="line">&#125;</span><br><span class="line">return field.toString();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * 是否存在注解，如果存在就获取</span><br><span class="line"> *&#x2F;</span><br><span class="line">private &lt;T&gt; T getAnnotation(JoinPoint joinPoint, Class&lt;? extends Annotation&gt; t) &#123;</span><br><span class="line">Signature signature &#x3D; joinPoint.getSignature();</span><br><span class="line">MethodSignature methodSignature &#x3D; (MethodSignature) signature;</span><br><span class="line">Method method &#x3D; methodSignature.getMethod();</span><br><span class="line">if (method !&#x3D; null) &#123;</span><br><span class="line">return (T) method.getAnnotation(t);</span><br><span class="line">&#125;</span><br><span class="line">return null;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于之前用redis的lua脚本来实现安全的分布式锁,发现代码是加锁虽然灵活，但是非常的不便捷。每次需要加锁的时候，都要写出非常多的重复性代码。遂…………&lt;/p&gt;
    
    </summary>
    
    
      <category term="分布式锁" scheme="https://kanchai.club/categories/%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    
    
      <category term="Redis锁" scheme="https://kanchai.club/tags/Redis%E9%94%81/"/>
    
      <category term="分布式" scheme="https://kanchai.club/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java根据文件流准确判定文件类型</title>
    <link href="https://kanchai.club/2020/03/17/Java%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E6%B5%81%E5%87%86%E7%A1%AE%E5%88%A4%E5%AE%9A%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/"/>
    <id>https://kanchai.club/2020/03/17/Java%E6%A0%B9%E6%8D%AE%E6%96%87%E4%BB%B6%E6%B5%81%E5%87%86%E7%A1%AE%E5%88%A4%E5%AE%9A%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B/</id>
    <published>2020-03-17T15:36:45.980Z</published>
    <updated>2020-03-17T15:34:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>判断文件类型通常可以简单的通过文件的后缀判定，如123.MP3,则判定文件的格式是MP3可播放文件。但是到底能不能播放，其实并不是通过后缀…..</p><a id="more"></a><p>判断文件类型通常可以简单的通过文件的后缀判定，如123.MP3,则判定文件的格式是MP3可播放文件。但是到底能不能播放，其实并不是通过后缀判断的。而是通过文件本身的二进制数据，软件来解析到底一定的目的。话不多说上代码，通过判断文件流的前几个字节，来判断文件的类型。可以自己添加新的类型，类型不一定对，可以自己调试调整一下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.common.utils.qiniu;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileTypeHelper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> Map&lt;String, String&gt; FILE_TYPE_MAP = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="title">FileTypeHelper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">//初始化文件类型信息</span></span><br><span class="line">getAllFileType();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2010-7-1</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Discription:[getAllFileType,常见文件头信息]&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:[shixing_11@sina.com]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getAllFileType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"jpg"</span>, <span class="string">"FFD8FF"</span>); <span class="comment">//JPEG (jpg)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"png"</span>, <span class="string">"89504E47"</span>);  <span class="comment">//PNG (png)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"gif"</span>, <span class="string">"47494638"</span>);  <span class="comment">//GIF (gif)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"tif"</span>, <span class="string">"49492A00"</span>);  <span class="comment">//TIFF (tif)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"bmp"</span>, <span class="string">"424D"</span>); <span class="comment">//Windows Bitmap (bmp)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"dwg"</span>, <span class="string">"41433130"</span>); <span class="comment">//CAD (dwg)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"html"</span>, <span class="string">"68746D6C3E"</span>);  <span class="comment">//HTML (html)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"rtf"</span>, <span class="string">"7B5C727466"</span>);  <span class="comment">//Rich Text Format (rtf)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"xml"</span>, <span class="string">"3C3F786D6C"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"zip"</span>, <span class="string">"504B03041400000008005959104FFE4A759FF1"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"rar"</span>, <span class="string">"52617221"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"psd"</span>, <span class="string">"38425053"</span>);  <span class="comment">//Photoshop (psd)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"eml"</span>, <span class="string">"44656C69766572792D646174653A"</span>);  <span class="comment">//Email [thorough only] (eml)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"dbx"</span>, <span class="string">"CFAD12FEC5FD746F"</span>);  <span class="comment">//Outlook Express (dbx)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"pst"</span>, <span class="string">"2142444E"</span>);  <span class="comment">//Outlook (pst)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"xls"</span>, <span class="string">"D0CF11E0A1B11AE1000000000000000000000000000000003B"</span>);  <span class="comment">//MS Word</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"xlsx"</span>, <span class="string">"504B03041400060008000000210097454E26A"</span>);  <span class="comment">//MS Word</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"docx"</span>, <span class="string">"504B030414000600080000002100DFA4D26C5A"</span>);  <span class="comment">//MS Excel 注意：word 和 excel的文件头一样</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"pptx"</span>, <span class="string">"504B030414000600080000002100DFCC18F5AD"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"doc"</span>, <span class="string">"D0CF11E0A1B11AE1000000000000000000000000000000003E000300FEFF090006000000000000000000000001"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"ppt"</span>, <span class="string">"D0CF11E0A1B11AE1000000000000000000000000000000003E000300FEFF090006000000000000000000000003"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mdb"</span>, <span class="string">"5374616E64617264204A"</span>);  <span class="comment">//MS Access (mdb)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"wpd"</span>, <span class="string">"FF575043"</span>); <span class="comment">//WordPerfect (wpd)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"eps"</span>, <span class="string">"252150532D41646F6265"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"ps"</span>, <span class="string">"252150532D41646F6265"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"pdf"</span>, <span class="string">"255044462D312E"</span>);  <span class="comment">//Adobe Acrobat (pdf)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"qdf"</span>, <span class="string">"AC9EBD8F"</span>);  <span class="comment">//Quicken (qdf)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"pwl"</span>, <span class="string">"E3828596"</span>);  <span class="comment">//Windows Password (pwl)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"wav"</span>, <span class="string">"57415645,52494646"</span>);  <span class="comment">//Wave (wav)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"avi"</span>, <span class="string">"41564920"</span>);</span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"ram"</span>, <span class="string">"2E7261FD"</span>);  <span class="comment">//Real Audio (ram)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"rm"</span>, <span class="string">"2E524D46"</span>);  <span class="comment">//Real Media (rm)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mpg"</span>, <span class="string">"000001BA"</span>);  <span class="comment">//</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mov"</span>, <span class="string">"6D6F6F76"</span>);  <span class="comment">//Quicktime (mov)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"asf"</span>, <span class="string">"3026B2758E66CF11"</span>); <span class="comment">//Windows Media (asf)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mid"</span>, <span class="string">"4D546864"</span>);  <span class="comment">//MIDI (mid)</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"aac"</span>, <span class="string">"FFF15C4013"</span>);  <span class="comment">//aac语音</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"mp3"</span>, <span class="string">"FFE368"</span>);  <span class="comment">//mp3</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"webm"</span>, <span class="string">"1A45DFA39F42868101"</span>);  <span class="comment">//webm</span></span><br><span class="line">FILE_TYPE_MAP.put(<span class="string">"m4a"</span>, <span class="string">"0000001C667479704D344120000000004D3441206D70"</span>);  <span class="comment">//webm</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据文件判定流类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> file</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getFileTypeByFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">InputStream is = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is = <span class="keyword">new</span> FileInputStream(file);</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> getFileTypeByStream(is);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 根据流判定文件类型</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> is</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getFileTypeByStream</span><span class="params">(InputStream is)</span> </span>&#123;</span><br><span class="line">String filetype = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">byte</span>[] b = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">is.read(b);</span><br><span class="line">filetype = getFileTypeByByte(b);</span><br><span class="line">is.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> filetype;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2010-7-1</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Discription:[getFileTypeByStream]&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> fileType</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:[shixing_11@sina.com]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getFileTypeByByte</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">String filetypeHex = String.valueOf(getFileHexString(b));</span><br><span class="line">Iterator&lt;Entry&lt;String, String&gt;&gt; entryiterator = FILE_TYPE_MAP.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (entryiterator.hasNext()) &#123;</span><br><span class="line">Entry&lt;String, String&gt; entry = entryiterator.next();</span><br><span class="line">String fileTypeHexValue = entry.getValue();</span><br><span class="line">String[] split = fileTypeHexValue.split(<span class="string">","</span>);</span><br><span class="line"><span class="keyword">for</span> (String sufix : split) &#123;</span><br><span class="line"><span class="keyword">if</span> (filetypeHex.toUpperCase().startsWith(sufix)) &#123;</span><br><span class="line"><span class="keyword">return</span> entry.getKey();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"txt"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created on 2010-7-1</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;Discription:[getFileHexString]&lt;/p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> b</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> fileTypeHex</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>:[shixing_11@sina.com]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String <span class="title">getFileHexString</span><span class="params">(<span class="keyword">byte</span>[] b)</span> </span>&#123;</span><br><span class="line">StringBuilder stringBuilder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"><span class="keyword">int</span> byteLength = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">if</span> (b == <span class="keyword">null</span> || b.length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (b.length &lt; byteLength) &#123;</span><br><span class="line">byteLength = b.length;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; byteLength; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> v = b[i] &amp; <span class="number">0xFF</span>;</span><br><span class="line">String hv = Integer.toHexString(v);</span><br><span class="line"><span class="keyword">if</span> (hv.length() &lt; <span class="number">2</span>) &#123;</span><br><span class="line">stringBuilder.append(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line">stringBuilder.append(hv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> stringBuilder.toString();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;判断文件类型通常可以简单的通过文件的后缀判定，如123.MP3,则判定文件的格式是MP3可播放文件。但是到底能不能播放，其实并不是通过后缀…..&lt;/p&gt;
    
    </summary>
    
    
      <category term="轮子" scheme="https://kanchai.club/categories/%E8%BD%AE%E5%AD%90/"/>
    
    
      <category term="文件类型判断" scheme="https://kanchai.club/tags/%E6%96%87%E4%BB%B6%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    
  </entry>
  
  <entry>
    <title>一些常用的linux基础命令</title>
    <link href="https://kanchai.club/2020/03/17/Linux%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://kanchai.club/2020/03/17/Linux%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/</id>
    <published>2020-03-17T15:36:45.859Z</published>
    <updated>2020-03-17T15:34:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些日常用到的基础命令,防止重复去百度搜索,主要是Centos中,个人记不住的一些命令,ls什么的肯定没有记录</p><a id="more"></a><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><ul><li><p>端口占用情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; lsof -i tcp:8000 </span><br><span class="line">&gt; netstat -tunlp |grep 8000</span><br></pre></td></tr></table></figure></li><li><p>列出所有端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; netstat -ntlp</span><br></pre></td></tr></table></figure></li><li><p>根据程序名找进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; ps axu |grep 程序名&#x2F;端口号&#x2F;IP等等</span><br></pre></td></tr></table></figure></li><li><p>查询指定端口是否已开</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; firewall-cmd --query-port&#x3D;666&#x2F;tcp</span><br></pre></td></tr></table></figure></li><li><p>查看所有开放的端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; iptables -t filter -L INPUT</span><br></pre></td></tr></table></figure></li></ul><h4 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h4><ul><li><p>查看防火墙状态</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; systemctl status firewalld</span><br></pre></td></tr></table></figure></li><li><p>开启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; systemctl start firewalld</span><br><span class="line">&gt; service firewalld start </span><br><span class="line">&gt; ##若遇到无法开启,先用：</span><br><span class="line">&gt; systemctl unmask firewalld.service </span><br><span class="line">&gt; 然后：</span><br><span class="line">&gt; systemctl start firewalld.service</span><br></pre></td></tr></table></figure></li><li><p>关闭防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; systemctl stop firewalld</span><br></pre></td></tr></table></figure></li><li><p>对外开放端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt; firewall-cmd --zone&#x3D;public --add-port&#x3D;8080&#x2F;tcp --permanent</span><br><span class="line">&gt;  iptables -I INPUT -p tcp --dport 9150 -j ACCEPT</span><br><span class="line">&gt; ##或者</span><br><span class="line">&gt; sudo vi sysconfig&#x2F;iptables</span><br><span class="line">&gt; ##然后</span><br><span class="line">&gt; -A INPUT -m state --state NEW -m tcp -p tcp --dport 9150 -j ACCEPT</span><br></pre></td></tr></table></figure></li><li><p>查看对外开放的端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; iptables -t filter -L INPUT</span><br></pre></td></tr></table></figure></li><li><p>重启防火墙</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; firewall-cmd --reload systemctl </span><br><span class="line">&gt; restart firewalld.service；</span><br></pre></td></tr></table></figure></li><li><p>关闭指定端口</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; firewall-cmd --permanent --remove-port&#x3D;123&#x2F;tcp</span><br></pre></td></tr></table></figure></li></ul><h4 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h4><ul><li><p>关键词查找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; ##执行的是返回的内容 </span><br><span class="line">&gt; grep 正则 文件目录</span><br></pre></td></tr></table></figure></li><li><p>关键词查找及随后的目录中搜索字符串</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; grep -R 正则 文件目录</span><br></pre></td></tr></table></figure></li></ul><h4 id="jvm相关"><a href="#jvm相关" class="headerlink" title="jvm相关"></a>jvm相关</h4><ul><li>查看JAVA进程并输出JVM参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jps -v</span><br></pre></td></tr></table></figure><ul><li><p>dump堆到文件,format指定输出格式，live指明是活着的对象,file指定文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jmap -dump:live,format&#x3D;b,file&#x3D;dump.hprof 28920</span><br></pre></td></tr></table></figure></li><li><p>查看堆的使用情况</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jmap -heap 28920</span><br></pre></td></tr></table></figure></li><li><p>查看堆中的对象信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jmap -histo:live 28920 | more</span><br></pre></td></tr></table></figure></li><li><p>查看当前程序的线程快照</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;  jstack -l 11494|more</span><br></pre></td></tr></table></figure></li><li><p>实时查看调整Jvm参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; jinfo -flag 11494</span><br></pre></td></tr></table></figure></li></ul><h4 id="系统信息查看"><a href="#系统信息查看" class="headerlink" title="系统信息查看"></a>系统信息查看</h4><ul><li>显示电脑以及操作系统的相关信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; uname -a</span><br></pre></td></tr></table></figure></li><li>正在运行的内核版本<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat &#x2F;proc&#x2F;version</span><br></pre></td></tr></table></figure></li><li>发行版本信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat &#x2F;etc&#x2F;issue</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些日常用到的基础命令,防止重复去百度搜索,主要是Centos中,个人记不住的一些命令,ls什么的肯定没有记录&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="https://kanchai.club/categories/Linux/"/>
    
    
      <category term="基础命令" scheme="https://kanchai.club/tags/%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4/"/>
    
      <category term="Jvm" scheme="https://kanchai.club/tags/Jvm/"/>
    
  </entry>
  
  <entry>
    <title>基于Delayed实现一个定时延时任务</title>
    <link href="https://kanchai.club/2020/03/17/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>https://kanchai.club/2020/03/17/%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%BB%B6%E6%97%B6%E4%BB%BB%E5%8A%A1/</id>
    <published>2020-03-17T15:36:45.731Z</published>
    <updated>2020-03-17T15:34:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>在spring中加入一个守护线程+延时队列来处理一些延时任务.比如用户注册后5分钟后发送短信.等等</p><a id="more"></a><h3 id="延时任务Bean的实现"><a href="#延时任务Bean的实现" class="headerlink" title="延时任务Bean的实现"></a>延时任务Bean的实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.common.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Delayed;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicLong;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时队列Task</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 创建时间：2018年6月16日 下午3:34:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DelayedTask</span>&lt;<span class="title">T</span> <span class="keyword">extends</span> <span class="title">Runnable</span>&gt; <span class="keyword">implements</span> <span class="title">Delayed</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 任务名称</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 到期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> time;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 问题对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> T task;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> AtomicLong atomic = <span class="keyword">new</span> AtomicLong(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> n;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DelayedTask</span><span class="params">(<span class="keyword">long</span> timeout, T t, String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.time = System.nanoTime() + timeout;</span><br><span class="line">        <span class="keyword">this</span>.task = t;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.n = atomic.getAndIncrement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回与此对象相关的剩余延迟时间，以给定的时间单位表示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getDelay</span><span class="params">(TimeUnit unit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> unit.convert(<span class="keyword">this</span>.time - System.nanoTime(), TimeUnit.NANOSECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Delayed other)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">        <span class="keyword">if</span> (other == <span class="keyword">this</span>) <span class="comment">// compare zero ONLY if same object</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (other <span class="keyword">instanceof</span> DelayedTask) &#123;</span><br><span class="line">            DelayedTask&lt;Runnable&gt; x = (DelayedTask) other;</span><br><span class="line">            <span class="keyword">long</span> diff = time - x.time;</span><br><span class="line">            <span class="keyword">if</span> (diff &lt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (diff &gt; <span class="number">0</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (getN() &lt; x.getN())</span><br><span class="line">                <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> d = (getDelay(TimeUnit.NANOSECONDS) - other.getDelay(TimeUnit.NANOSECONDS));</span><br><span class="line">        <span class="keyword">return</span> (d == <span class="number">0</span>) ? <span class="number">0</span> : ((d &lt; <span class="number">0</span>) ? -<span class="number">1</span> : <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">getTask</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.task;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> task.hashCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (object <span class="keyword">instanceof</span> DelayedTask) &#123;</span><br><span class="line">            <span class="keyword">return</span> object.hashCode() == hashCode() ? <span class="keyword">true</span> : <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">getN</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> n;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Spring容器Bean的定义"><a href="#Spring容器Bean的定义" class="headerlink" title="Spring容器Bean的定义"></a>Spring容器Bean的定义</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.web.bean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ym.common.utils.DelayedTask;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.DelayQueue;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 延时队列任务管理</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span> 创建时间：2018年6月16日 下午3:35:39</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskQueueBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOG = LoggerFactory.getLogger(TaskQueueBean<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> <span class="keyword">boolean</span> started = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">TaskQueueBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">LazyHolder</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> TaskQueueBean taskQueueDaemonThread = <span class="keyword">new</span> TaskQueueBean();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TaskQueueBean <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> LazyHolder.taskQueueDaemonThread;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 执行任务的线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> ExecutorService executor = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个最初为空的新 DelayQueue</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> DelayQueue&lt;DelayedTask&lt;Runnable&gt;&gt; queue = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 守护线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> Thread daemonThread;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化守护线程</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.初始化线程池</span></span><br><span class="line">        <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">            started = <span class="keyword">true</span>;</span><br><span class="line">            executor = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());</span><br><span class="line">            queue = <span class="keyword">new</span> DelayQueue&lt;&gt;();</span><br><span class="line">            <span class="comment">// 2.判断是否启动</span></span><br><span class="line">            <span class="keyword">if</span> (daemonThread != <span class="keyword">null</span> &amp;&amp; daemonThread.isInterrupted()) &#123;</span><br><span class="line">                daemonThread.start();</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        daemonThread = <span class="keyword">new</span> Thread() &#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    execute();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    daemonThread.interrupt();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        daemonThread.setDaemon(<span class="keyword">true</span>);</span><br><span class="line">        daemonThread.setName(<span class="string">"DelayedTask"</span>);</span><br><span class="line">        daemonThread.start();</span><br><span class="line">        LOG.info(<span class="string">"~~~~~~~~~~~~~~~~~~~~延时任务开启~~~~~~~~~~~~~~~~~~~~~~~~~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        LOG.info(<span class="string">"[ task start &#123;&#125; ]:"</span>, System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">while</span> (started) &#123;</span><br><span class="line">            <span class="comment">// 从延迟队列中取值,如果没有对象过期则队列一直等待，</span></span><br><span class="line">            DelayedTask&lt;Runnable&gt; t1 = queue.take();</span><br><span class="line">            <span class="keyword">if</span> (t1 != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 修改问题的状态</span></span><br><span class="line">                Runnable task = t1.getTask();</span><br><span class="line">                <span class="keyword">if</span> (task == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                executor.execute(task);</span><br><span class="line">                LOG.info(<span class="string">"[ &#123;&#125;  task &#123;&#125; execute  ] "</span>, t1.getN(), t1.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加任务， time 延迟时间 task 任务 用户为问题设置延迟时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">put</span><span class="params">(<span class="keyword">long</span> time, Runnable task, String taskName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"请先启动taskQueneBean！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 转换成ns</span></span><br><span class="line">        <span class="keyword">long</span> nanoTime = TimeUnit.NANOSECONDS.convert(time, TimeUnit.MILLISECONDS);</span><br><span class="line">        <span class="comment">// 创建一个任务</span></span><br><span class="line">        DelayedTask&lt;Runnable&gt; k = <span class="keyword">new</span> DelayedTask&lt;Runnable&gt;(nanoTime, task, taskName);</span><br><span class="line">        <span class="comment">// 将任务放在延迟的队列中</span></span><br><span class="line">        queue.put(k);</span><br><span class="line">        LOG.info(<span class="string">"新任务：&#123;&#125;加入队列，当前队列任务数量：&#123;&#125;"</span>, taskName, queue.size());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 结束</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> task</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">endTask</span><span class="params">(DelayedTask&lt;Runnable&gt; task)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!started) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException(<span class="string">"请先启动taskQueneBean！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> queue.remove(task);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 手动关闭任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (started) &#123;</span><br><span class="line">            LOG.info(<span class="string">"shutdown TaskQueueBean"</span>);</span><br><span class="line">            started = <span class="keyword">false</span>;</span><br><span class="line">            daemonThread.interrupt();</span><br><span class="line">            executor.shutdown();</span><br><span class="line">            daemonThread = <span class="keyword">null</span>;</span><br><span class="line">            queue = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">`</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在spring中加入一个守护线程+延时队列来处理一些延时任务.比如用户注册后5分钟后发送短信.等等&lt;/p&gt;
    
    </summary>
    
    
      <category term="轮子" scheme="https://kanchai.club/categories/%E8%BD%AE%E5%AD%90/"/>
    
    
      <category term="轮子" scheme="https://kanchai.club/tags/%E8%BD%AE%E5%AD%90/"/>
    
      <category term="Spring" scheme="https://kanchai.club/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>实现基于Redis的lua的分布式锁</title>
    <link href="https://kanchai.club/2020/03/17/%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8ERedis%E7%9A%84lua%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/"/>
    <id>https://kanchai.club/2020/03/17/%E5%AE%9E%E7%8E%B0%E5%9F%BA%E4%BA%8ERedis%E7%9A%84lua%E7%9A%84%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</id>
    <published>2020-03-17T15:36:45.602Z</published>
    <updated>2020-03-17T15:34:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>基于目前有需求需要实现一个分布式锁,用zk的话由于项目本身暂时没有用到zk,所以暂不考虑zk锁.用redis的lua脚本来实现安全的分布式锁,保证指令的原子性.</p><a id="more"></a><h3 id="代码如下"><a href="#代码如下" class="headerlink" title="代码如下"></a>代码如下</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ym.common.utils.redis;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.ym.common.utils.Sha1Util;</span><br><span class="line"><span class="keyword">import</span> com.ym.common.utils.spring.SpringUtil;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.RedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.script.RedisScript;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 基于redis lua分布式锁</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: 李涛</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>: 2019年05月08日 16:15</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisLockUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(RedisLockUtil<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 成功标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Long SUCCESS = <span class="number">1L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁lua脚本,不可重入,reqId只是为了解锁使用,代表当前线程在使用资源,给UUID比较好</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SCRIPT_LOCK = <span class="string">"if redis.call('setnx', KEYS[1], ARGV[1]) == 1 then redis.call('pexpire', KEYS[1], ARGV[2]) return 1 else return 0 end"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁lua脚本</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SCRIPT_UNLOCK = <span class="string">"if redis.call('get', KEYS[1]) == ARGV[1] then return redis.call('del', KEYS[1]) else return 0 end"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 加锁脚本sha1值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SCRIPT_LOCK_SHA1 = Sha1Util.encrypt(SCRIPT_LOCK);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 解锁脚本sha1值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String SCRIPT_UNLOCK_SHA1 = Sha1Util.encrypt(SCRIPT_UNLOCK);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 内部持有模板</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> RedisTemplate redisTemplate = (RedisTemplate) SpringUtil.getObject(<span class="string">"redisTemplate"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取分布式锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey                锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId              请求标识,唯一ID</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireTimeMilliseconds 超期时间，多少毫秒后这把锁自动释放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回true表示拿到锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">tryGetDistributedLock</span><span class="params">(String lockKey, String requestId, <span class="keyword">int</span> expireTimeMilliseconds)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"[&#123;&#125;]尝试获取[&#123;&#125;]锁,超时时间为:&#123;&#125;毫秒"</span>, requestId, lockKey, expireTimeMilliseconds);</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 脚本设置</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> RedisScript&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getSha1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> SCRIPT_LOCK_SHA1;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Class&lt;Long&gt; <span class="title">getResultType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Long<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getScriptAsString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> SCRIPT_LOCK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        Object result = redisTemplate.execute(</span><br><span class="line">                redisScript,<span class="comment">// lua脚本</span></span><br><span class="line">                Collections.singletonList(lockKey),<span class="comment">// KEYS[1]</span></span><br><span class="line">                requestId, <span class="comment">// ARGV[1]</span></span><br><span class="line">                expireTimeMilliseconds <span class="comment">// ARGV[2]</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">boolean</span> b = SUCCESS.equals(result);</span><br><span class="line">        LOGGER.info(<span class="string">"释放结果:"</span>, b);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放分布式锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lockKey   锁</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> requestId 请求标识</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 返回true表示释放锁成功</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">releaseDistributedLock</span><span class="params">(String lockKey, String requestId)</span> </span>&#123;</span><br><span class="line">        LOGGER.info(<span class="string">"[&#123;&#125;]释放锁[&#123;&#125;]锁"</span>, requestId, lockKey);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * lua脚本</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        RedisScript&lt;Long&gt; redisScript = <span class="keyword">new</span> RedisScript&lt;Long&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getSha1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> SCRIPT_UNLOCK_SHA1;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Class&lt;Long&gt; <span class="title">getResultType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> Long<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> String <span class="title">getScriptAsString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> SCRIPT_UNLOCK;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line">        Object result = redisTemplate.execute(</span><br><span class="line">                redisScript,</span><br><span class="line">                Collections.singletonList(lockKey),</span><br><span class="line">                requestId</span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">boolean</span> b = SUCCESS.equals(result);</span><br><span class="line">        LOGGER.info(<span class="string">"释放结果:"</span>, b);</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;基于目前有需求需要实现一个分布式锁,用zk的话由于项目本身暂时没有用到zk,所以暂不考虑zk锁.用redis的lua脚本来实现安全的分布式锁,保证指令的原子性.&lt;/p&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="https://kanchai.club/categories/Redis/"/>
    
    
      <category term="分布式" scheme="https://kanchai.club/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
      <category term="Redis" scheme="https://kanchai.club/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>上传自己的git项目到maven</title>
    <link href="https://kanchai.club/2020/03/17/%E4%B8%8A%E4%BC%A0%E8%87%AA%E5%B7%B1%E7%9A%84git%E9%A1%B9%E7%9B%AE%E5%88%B0maven/"/>
    <id>https://kanchai.club/2020/03/17/%E4%B8%8A%E4%BC%A0%E8%87%AA%E5%B7%B1%E7%9A%84git%E9%A1%B9%E7%9B%AE%E5%88%B0maven/</id>
    <published>2020-03-17T15:36:45.470Z</published>
    <updated>2020-03-17T15:35:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>上传自己的git项目到maven，结合两位博客成功上传。</p><a id="more"></a><h3 id="感谢两位博主，地址分别为"><a href="#感谢两位博主，地址分别为" class="headerlink" title="感谢两位博主，地址分别为"></a>感谢两位博主，地址分别为</h3><ol><li><a href="https://www.jianshu.com/p/8c3d7fb09bce" target="_blank" rel="noopener">https://www.jianshu.com/p/8c3d7fb09bce</a></li><li><a href="https://blog.csdn.net/sinat_23290725/article/details/85018092" target="_blank" rel="noopener">https://blog.csdn.net/sinat_23290725/article/details/85018092</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上传自己的git项目到maven，结合两位博客成功上传。&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发工具" scheme="https://kanchai.club/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="maven" scheme="https://kanchai.club/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>mongo搭建副本集</title>
    <link href="https://kanchai.club/2020/03/17/mongo%E6%90%AD%E5%BB%BA%E5%89%AF%E6%9C%AC%E9%9B%86/"/>
    <id>https://kanchai.club/2020/03/17/mongo%E6%90%AD%E5%BB%BA%E5%89%AF%E6%9C%AC%E9%9B%86/</id>
    <published>2020-03-17T15:36:45.353Z</published>
    <updated>2020-03-17T15:35:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>搭建副本集的作用和其他数据库思路大致一样，主从配置，仲裁节点，也就是说最起码要保证3个节点….</p><a id="more"></a><h3 id="Replica-Set介绍"><a href="#Replica-Set介绍" class="headerlink" title="Replica Set介绍"></a>Replica Set介绍</h3><blockquote><p>中文翻译叫做副本集,其实简单来说就是集群当中包含了多份数据，保证主节点挂掉了，备节点能继续提供数据服务，提供的前提就是数据需要和主节点一致。</p></blockquote><p><img src="https://images.gitee.com/uploads/images/2019/0112/092857_9bb8ae47_1215820.png" alt="输入图片说明" title="1358056331_2790.png"></p><ol><li><p>Mongodb(M)表示主节点，Mongodb(S)表示备节点，Mongodb(A)表示仲裁节点。主备节点存储数据，仲裁节点不存储数据。客户端同时连接主节点与备节点，不连接仲裁节点。</p></li><li><p>默认设置下，主节点提供所有增删查改服务，备节点不提供任何服务。但是可以通过设置使备节点提供查询服务，这样就可以减少主节点的压力，当客户端进行数据查询时，请求自动转到备节点上。这个设置叫做Read Preference Modes，同时Java客户端提供了简单的配置方式，可以不必直接对数据库进行操作。</p></li><li><p>仲裁节点是一种特殊的节点，它本身并不存储数据，主要的作用是决定哪一个备节点在主节点挂掉之后提升为主节点，所以客户端不需要连接此节点。这里虽然只有一个备节点，但是仍然需要一个仲裁节点来提升备节点级别。我开始也不相信必须要有仲裁节点，但是自己也试过没仲裁节点的话，主节点挂了备节点还是备节点，所以咱们还是需要它的。</p></li></ol><h3 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h3><ol><li><p>般情况下不会把数据目录建立在mongodb的解压目录下，不过这里方便起见，就建在mongodb解压目录下吧。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p &#x2F;mongodb&#x2F;data&#x2F;master </span><br><span class="line">mkdir -p &#x2F;mongodb&#x2F;data&#x2F;slaver </span><br><span class="line">mkdir -p &#x2F;mongodb&#x2F;data&#x2F;arbiter  </span><br><span class="line">#三个目录分别对应主，备，仲裁节点</span><br></pre></td></tr></table></figure></li><li><p>建立配置文件,由于配置比较多，所以我们将配置写到文件里，以文件的方式启动，以下配置文件仔细看可以说是只有端口不同，搭建的伪集群。</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">#master.conf  主节点配置</span><br><span class="line"></span><br><span class="line">#数据存放目录</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;data&#x2F;master  </span><br><span class="line">#日志存放路径</span><br><span class="line">logpath&#x3D;&#x2F;mongodb&#x2F;log&#x2F;master.log</span><br><span class="line">#进程文件</span><br><span class="line">pidfilepath&#x3D;&#x2F;mongodb&#x2F;master.pid</span><br><span class="line">#为每一个数据库按照数据库名建立文件夹存放</span><br><span class="line">directoryperdb&#x3D;true</span><br><span class="line">#以追加的方式记录日志</span><br><span class="line">logappend&#x3D;true</span><br><span class="line">#replica set的名字</span><br><span class="line">replSet&#x3D;testrs</span><br><span class="line">#绑定暴露的ID地址</span><br><span class="line">bind_ip&#x3D;127.0.0.1</span><br><span class="line">#端口</span><br><span class="line">port&#x3D;27017</span><br><span class="line">#mongodb操作日志文件的最大大小。单位为Mb，默认为硬盘剩余空间的5%</span><br><span class="line">oplogSize&#x3D;10000</span><br><span class="line">#以后台方式运行进程</span><br><span class="line">fork&#x3D;true</span><br><span class="line">#不预先分配存储</span><br><span class="line">noprealloc&#x3D;true</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#master.conf  副本节点配置</span><br><span class="line">#slaver.conf</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;data&#x2F;slaver</span><br><span class="line">logpath&#x3D;&#x2F;mongodb&#x2F;log&#x2F;slaver.log</span><br><span class="line">pidfilepath&#x3D;&#x2F;mongodb&#x2F;slaver.pid</span><br><span class="line">directoryperdb&#x3D;true</span><br><span class="line">logappend&#x3D;true</span><br><span class="line">replSet&#x3D;testrs</span><br><span class="line">bind_ip&#x3D;127.0.0.1</span><br><span class="line">port&#x3D;27018</span><br><span class="line">oplogSize&#x3D;10000</span><br><span class="line">fork&#x3D;true</span><br><span class="line">noprealloc&#x3D;true</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#arbiter.conf  仲裁节点配置</span><br><span class="line">dbpath&#x3D;&#x2F;mongodb&#x2F;data&#x2F;arbiter</span><br><span class="line">logpath&#x3D;&#x2F;mongodb&#x2F;log&#x2F;arbiter.log</span><br><span class="line">pidfilepath&#x3D;&#x2F;mongodb&#x2F;arbiter.pid</span><br><span class="line">directoryperdb&#x3D;true</span><br><span class="line">logappend&#x3D;true</span><br><span class="line">replSet&#x3D;testrs</span><br><span class="line">bind_ip&#x3D;127.0.0.1</span><br><span class="line">port&#x3D;27019</span><br><span class="line">oplogSize&#x3D;10000</span><br><span class="line">fork&#x3D;true</span><br><span class="line">noprealloc&#x3D;true</span><br></pre></td></tr></table></figure><ol start="3"><li>启动mongo</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">.&#x2F;monood -f master.conf</span><br><span class="line">.&#x2F;mongod -f slaver.conf</span><br><span class="line">.&#x2F;mongod -f arbiter.conf</span><br></pre></td></tr></table></figure><ol start="4"><li>开始配置主从、仲裁节点，可以通过客户端连接mongodb，也可以直接在三个节点中选择一个连接mongodb。</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;.&#x2F;mongo 127.0.0.1:27017   #ip和port是某个节点的地址</span><br><span class="line">&gt;use admin</span><br><span class="line">&gt;cfg&#x3D;&#123; _id:&quot;testrs&quot;, members:[ &#123;_id:0,host:&#39;127.0.0.1:27017&#39;,priority:2&#125;, &#123;_id:1,host:&#39;127.0.0.1:27017&#39;,priority:1&#125;, </span><br><span class="line">&#123;_id:2,host:&#39;127.0.0.1:27017&#39;,arbiterOnly:true&#125;] &#125;;</span><br><span class="line">&gt;rs.initiate(cfg)             #使配置生效</span><br></pre></td></tr></table></figure><blockquote><p>cfg是可以任意的名字，当然最好不要是mongodb的关键字，conf，config都可以。最外层的_id表示replica set的名字，members里包含的是所有节点的地址以及优先级。优先级最高的即成为主节点，即这里的127.0.0.1:27017。特别注意的是，对于仲裁节点，需要有个特别的配置——arbiterOnly:true。这个千万不能少了，不然主备模式就不能生效。配置的生效时间根据不同的机器配置会有长有短，配置不错的话基本上十几秒内就能生效，有的配置需要一两分钟。如果生效了，执行rs.status()命令会看到如下信息：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"> &#123;</span><br><span class="line">        &quot;set&quot; : &quot;testrs&quot;,</span><br><span class="line">        &quot;date&quot; : ISODate(&quot;2013-01-05T02:44:43Z&quot;),</span><br><span class="line">        &quot;myState&quot; : 1,</span><br><span class="line">        &quot;members&quot; : [</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;_id&quot; : 0,</span><br><span class="line">                        &quot;name&quot; : &quot;127.0.0.1:27017&quot;,</span><br><span class="line">                        &quot;health&quot; : 1,</span><br><span class="line">                        &quot;state&quot; : 1,</span><br><span class="line">                        &quot;stateStr&quot; : &quot;PRIMARY&quot;,</span><br><span class="line">                        &quot;uptime&quot; : 200,</span><br><span class="line">                        &quot;optime&quot; : Timestamp(1357285565000, 1),</span><br><span class="line">                        &quot;optimeDate&quot; : ISODate(&quot;2013-01-04T07:46:05Z&quot;),</span><br><span class="line">                        &quot;self&quot; : true</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;_id&quot; : 1,</span><br><span class="line">                        &quot;name&quot; : &quot;127.0.0.1:27018&quot;,</span><br><span class="line">                        &quot;health&quot; : 1,</span><br><span class="line">                        &quot;state&quot; : 2,</span><br><span class="line">                        &quot;stateStr&quot; : &quot;SECONDARY&quot;,</span><br><span class="line">                        &quot;uptime&quot; : 200,</span><br><span class="line">                        &quot;optime&quot; : Timestamp(1357285565000, 1),</span><br><span class="line">                        &quot;optimeDate&quot; : ISODate(&quot;2013-01-04T07:46:05Z&quot;),</span><br><span class="line">                        &quot;lastHeartbeat&quot; : ISODate(&quot;2013-01-05T02:44:42Z&quot;),</span><br><span class="line">                        &quot;pingMs&quot; : 0</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                        &quot;_id&quot; : 2,</span><br><span class="line">                        &quot;name&quot; : &quot;127.0.0.1:27019&quot;,</span><br><span class="line">                        &quot;health&quot; : 1,</span><br><span class="line">                        &quot;state&quot; : 7,</span><br><span class="line">                        &quot;stateStr&quot; : &quot;ARBITER&quot;,</span><br><span class="line">                        &quot;uptime&quot; : 200,</span><br><span class="line">                        &quot;lastHeartbeat&quot; : ISODate(&quot;2013-01-05T02:44:42Z&quot;),</span><br><span class="line">                        &quot;pingMs&quot; : 0</span><br><span class="line">                &#125;</span><br><span class="line">        ],</span><br><span class="line">        &quot;ok&quot; : 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br>如果配置正在生效，其中会包含如下信息,同时可以查看对应节点的日志，发现正在等待别的节点生效或者正在分配数据文件：<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;stateStr&quot; : &quot;RECOVERING&quot;</span><br></pre></td></tr></table></figure></p></blockquote><p> 现在基本上已经完成了集群的所有搭建工作。至于测试工作，可以留给大家自己试试。一个是往主节点插入数据，能从备节点查到之前插入的数据（查询备节点可能会遇到某个问题，可以自己去网上查查看）。二是停掉主节点，备节点能变成主节点提供服务。三是恢复主节点，备节点也能恢复其备的角色，而不是继续充当主的角色。二和三都可以通过rs.status()命令实时查看集群的变化。</p><p> <a href="https://blog.csdn.net/luonanqin/article/details/8497860/" target="_blank" rel="noopener">转载来源</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;搭建副本集的作用和其他数据库思路大致一样，主从配置，仲裁节点，也就是说最起码要保证3个节点….&lt;/p&gt;
    
    </summary>
    
    
      <category term="Mongo" scheme="https://kanchai.club/categories/Mongo/"/>
    
    
      <category term="mongo集群" scheme="https://kanchai.club/tags/mongo%E9%9B%86%E7%BE%A4/"/>
    
  </entry>
  
  <entry>
    <title>IDEA快捷键</title>
    <link href="https://kanchai.club/2020/03/17/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    <id>https://kanchai.club/2020/03/17/%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%85%A8IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/</id>
    <published>2020-03-17T15:36:45.229Z</published>
    <updated>2020-03-17T15:35:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>IDEA快捷键比较全面的</p><a id="more"></a><h3 id="常规"><a href="#常规" class="headerlink" title="常规"></a>常规</h3><ol><li>Ctrl+Shift + Enter，语句完成</li><li>“！”，否定完成，输入表达式时按 “！”键</li><li>Ctrl+E，最近的文件</li><li>Ctrl+Shift+E，最近更改的文件</li><li>Shift+Click，可以关闭文件</li><li>Ctrl+[ OR ]，可以跑到大括号的开头与结尾</li><li>Ctrl+F12，可以显示当前文件的结构</li><li>Ctrl+F7，可以查询当前元素在当前文件中的引用，然后按 F3 可以选择</li><li>Ctrl+N，可以快速打开类</li><li>Ctrl+Shift+N，可以快速打开文件</li><li>Alt+Q，可以看到当前方法的声明</li><li>Ctrl+P，可以显示参数信息</li><li>Ctrl+Shift+Insert，可以选择剪贴板内容并插入</li><li>Alt+Insert，可以生成构造器/Getter/Setter等</li><li>Ctrl+Alt+V，可以引入变量。例如：new String();  自动导入变量定义</li><li>Ctrl+Alt+T，可以把代码包在一个块内，例如：try/catch</li><li>Ctrl+Enter，导入包，自动修正</li><li>Ctrl+Alt+L，格式化代码</li><li>Ctrl+Alt+I，将选中的代码进行自动缩进编排，这个功能在编辑 JSP 文件时也可以工作</li><li>Ctrl+Alt+O，优化导入的类和包</li><li>Ctrl+R，替换文本</li><li>Ctrl+F，查找文本</li><li>Ctrl+Shift+Space，自动补全代码</li><li>Ctrl+空格，代码提示（与系统输入法快捷键冲突）</li><li>Ctrl+Shift+Alt+N，查找类中的方法或变量</li><li>Alt+Shift+C，最近的更改</li><li>Alt+Shift+Up/Down，上/下移一行</li><li>Shift+F6，重构 - 重命名</li><li>Ctrl+X，删除行</li><li>Ctrl+D，复制行</li><li>Ctrl+/或Ctrl+Shift+/，注释（//或者/**/）</li><li>Ctrl+J，自动代码（例如：serr）</li><li>Ctrl+Alt+J，用动态模板环绕</li><li>Ctrl+H，显示类结构图（类的继承层次）</li><li>Ctrl+Q，显示注释文档</li><li>Alt+F1，查找代码所在位置</li><li>Alt+1，快速打开或隐藏工程面板</li><li>Ctrl+Alt+left/right，返回至上次浏览的位置</li><li>Alt+left/right，切换代码视图</li><li>Alt+Up/Down，在方法间快速移动定位</li><li>Ctrl+Shift+Up/Down，向上/下移动语句</li><li>F2 或 Shift+F2，高亮错误或警告快速定位</li><li>Tab，代码标签输入完成后，按 Tab，生成代码</li><li>Ctrl+Shift+F7，高亮显示所有该文本，按 Esc 高亮消失</li><li>Alt+F3，逐个往下查找相同文本，并高亮显示</li><li>Ctrl+Up/Down，光标中转到第一行或最后一行下</li><li>Ctrl+B/Ctrl+Click，快速打开光标处的类或方法（跳转到定义处）</li><li>Ctrl+Alt+B，跳转到方法实现处</li><li>Ctrl+Shift+Backspace，跳转到上次编辑的地方</li><li>Ctrl+O，重写方法</li><li>Ctrl+Alt+Space，类名自动完成</li><li>Ctrl+Alt+Up/Down，快速跳转搜索结果</li><li>Ctrl+Shift+J，整合两行</li><li>Alt+F8，计算变量值</li><li>Ctrl+Shift+V，可以将最近使用的剪贴板内容选择插入到文本</li><li>Ctrl+Alt+Shift+V，简单粘贴</li><li>Shift+Esc，不仅可以把焦点移到编辑器上，而且还可以隐藏当前（或最后活动的）工具窗口</li><li>F12，把焦点从编辑器移到最近使用的工具窗口</li><li>Shift+F1，要打开编辑器光标字符处使用的类或者方法 Java 文档的浏览器</li><li>Ctrl+W，可以选择单词继而语句继而行继而函数</li><li>Ctrl+Shift+W，取消选择光标所在词</li><li>Alt+F7，查找整个工程中使用地某一个类、方法或者变量的位置</li><li>Ctrl+I，实现方法</li><li>Ctrl+Shift+U，大小写转化</li><li>Ctrl+Y，删除当前行</li><li>Shift+Enter，向下插入新行</li><li>psvm/sout，main/System.out.println(); Ctrl+J，查看更多</li><li>Ctrl+Shift+F，全局查找</li><li>Ctrl+F，查找/Shift+F3，向上查找/F3，向下查找</li><li>Ctrl+Shift+S，高级搜索</li><li>Ctrl+U，转到父类</li><li>Ctrl+Alt+S，打开设置对话框</li><li>Alt+Shift+Inert，开启/关闭列选择模式</li><li>Ctrl+Alt+Shift+S，打开当前项目/模块属性</li><li>Ctrl+G，定位行</li><li>Alt+Home，跳转到导航栏</li><li>Ctrl+Enter，上插一行</li><li>Ctrl+Backspace，按单词删除</li><li>Ctrl+”+/-“，当前方法展开、折叠</li><li>Ctrl+Shift+”+/-“，全部展开、折叠</li></ol><h3 id="调试部分、编译"><a href="#调试部分、编译" class="headerlink" title="调试部分、编译"></a>调试部分、编译</h3><ol><li>Ctrl+F2，停止</li><li>Alt+Shift+F9，选择 Debug</li><li>Alt+Shift+F10，选择 Run</li><li>Ctrl+Shift+F9，编译</li><li>Ctrl+Shift+F10，运行</li><li>Ctrl+Shift+F8，查看断点</li><li>F8，步过</li><li>F7，步入</li><li>Shift+F7，智能步入</li><li>Shift+F8，步出</li><li>Alt+Shift+F8，强制步过</li><li>Alt+Shift+F7，强制步入</li><li>Alt+F9，运行至光标处</li><li>Ctrl+Alt+F9，强制运行至光标处</li><li>F9，恢复程序</li><li>Alt+F10，定位到断点</li><li>Ctrl+F8，切换行断点</li><li>Ctrl+F9，生成项目</li><li>Alt+1，项目</li><li>Alt+2，收藏</li><li>Alt+6，TODO</li><li>Alt+7，结构</li><li>Ctrl+Shift+C，复制路径</li><li>Ctrl+Alt+Shift+C，复制引用，必须选择类名</li><li>Ctrl+Alt+Y，同步</li><li>Ctrl+~，快速切换方案（界面外观、代码风格、快捷键映射等菜单）</li><li>Shift+F12，还原默认布局</li><li>Ctrl+Shift+F12，隐藏/恢复所有窗口</li><li>Ctrl+F4，关闭</li><li>Ctrl+Shift+F4，关闭活动选项卡</li><li>Ctrl+Tab，转到下一个拆分器</li><li>Ctrl+Shift+Tab，转到上一个拆分器</li></ol><h3 id="重构"><a href="#重构" class="headerlink" title="重构"></a>重构</h3><ol><li>Ctrl+Alt+Shift+T，弹出重构菜单</li><li>Shift+F6，重命名</li><li>F6，移动</li><li>F5，复制</li><li>Alt+Delete，安全删除</li><li>Ctrl+Alt+N，内联</li></ol><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><ol><li>Ctrl+F，查找</li><li>Ctrl+R，替换</li><li>F3，查找下一个</li><li>Shift+F3，查找上一个</li><li>Ctrl+Shift+F，在路径中查找</li><li>Ctrl+Shift+R，在路径中替换</li><li>Ctrl+Shift+S，搜索结构</li><li>Ctrl+Shift+M，替换结构</li><li>Alt+F7，查找用法</li><li>Ctrl+Alt+F7，显示用法</li><li>Ctrl+F7，在文件中查找用法</li><li>Ctrl+Shift+F7，在文件中高亮显示用法</li></ol><h3 id="VCS"><a href="#VCS" class="headerlink" title="VCS"></a>VCS</h3><ol><li>Alt+~，VCS 操作菜单</li><li>Ctrl+K，提交更改</li><li>Ctrl+T，更新项目</li><li>Ctrl+Alt+Shift+D，显示变化</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IDEA快捷键比较全面的&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发工具" scheme="https://kanchai.club/categories/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="IDEA快捷键" scheme="https://kanchai.club/tags/IDEA%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
    
  </entry>
  
  <entry>
    <title>Java实现天平秤秤球？</title>
    <link href="https://kanchai.club/2020/03/17/Java%E5%AE%9E%E7%8E%B0%E5%A4%A9%E5%B9%B3%E7%A7%A4%E7%90%83/"/>
    <id>https://kanchai.club/2020/03/17/Java%E5%AE%9E%E7%8E%B0%E5%A4%A9%E5%B9%B3%E7%A7%A4%E7%90%83/</id>
    <published>2020-03-17T15:36:45.109Z</published>
    <updated>2020-03-17T15:35:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>一朋友发来一道面试题，百度半天没有很合适的，自己实现这个。<br>题目：有N个铁球，其中一个是塑料球。仅使用一个天平，如何快速找到球？</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">Boolean[] balls = <span class="keyword">new</span> Boolean[] &#123; <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">false</span>, <span class="keyword">true</span>, <span class="keyword">false</span>, <span class="keyword">false</span></span><br><span class="line">System.out.println(<span class="string">"已知的空球为:"</span> + balls[<span class="number">4</span>].hashCode());</span><br><span class="line">searchBall(balls, <span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 天平称重找出不同的球，此处通过打印hashCode来判断球的唯一标志</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> balls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> findValue</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">searchBall</span><span class="params">(Boolean[] balls, <span class="keyword">boolean</span> findValue)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"称重....."</span>);</span><br><span class="line"><span class="keyword">if</span> (balls == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> indexSize = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (balls.length % <span class="number">2</span> != <span class="number">0</span>) &#123;</span><br><span class="line">size = balls.length - <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">size = balls.length;</span><br><span class="line">&#125;</span><br><span class="line">indexSize = size / <span class="number">2</span>;</span><br><span class="line">Boolean[] preBalls = Arrays.copyOfRange(balls, <span class="number">0</span>, indexSize);</span><br><span class="line">Boolean[] lastBalls = Arrays.copyOfRange(balls, indexSize, size);</span><br><span class="line"><span class="keyword">int</span> weight1 = getWeight(preBalls);</span><br><span class="line"><span class="keyword">int</span> weight2 = getWeight(lastBalls);</span><br><span class="line"><span class="keyword">if</span> (weight1 == weight2) &#123;</span><br><span class="line">System.out.println(<span class="string">"已找到不同的球："</span> + balls[balls.length - <span class="number">1</span>].hashCode());</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (weight1 &gt; weight2) &#123;</span><br><span class="line"><span class="keyword">if</span> (lastBalls.length == <span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"已找到不同的球：："</span> + lastBalls[<span class="number">0</span>].hashCode());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">searchBall(lastBalls, findValue);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (preBalls.length == <span class="number">1</span>) &#123;</span><br><span class="line">System.out.println(<span class="string">"已找到不同的球：："</span> + lastBalls[<span class="number">0</span>].hashCode());</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">searchBall(preBalls, findValue);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 称重方法</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> balls</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getWeight</span><span class="params">(Boolean[] balls)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">boolean</span> b : balls) &#123;</span><br><span class="line"><span class="keyword">if</span> (!b) &#123;</span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行结果为"><a href="#运行结果为" class="headerlink" title="运行结果为:"></a>运行结果为:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">已知的空球为:1231</span><br><span class="line">称重.....</span><br><span class="line">称重.....</span><br><span class="line">已找到不同的球：：1231</span><br></pre></td></tr></table></figure><p>可以看出来2次称重，找到不规则的球。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一朋友发来一道面试题，百度半天没有很合适的，自己实现这个。&lt;br&gt;题目：有N个铁球，其中一个是塑料球。仅使用一个天平，如何快速找到球？&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://kanchai.club/categories/Java/"/>
    
    
      <category term="算法基础题" scheme="https://kanchai.club/tags/%E7%AE%97%E6%B3%95%E5%9F%BA%E7%A1%80%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>一致性hash是什么意思？</title>
    <link href="https://kanchai.club/2020/03/17/%E4%B8%80%E8%87%B4%E6%80%A7hash%E8%A7%A3%E9%87%8A/"/>
    <id>https://kanchai.club/2020/03/17/%E4%B8%80%E8%87%B4%E6%80%A7hash%E8%A7%A3%E9%87%8A/</id>
    <published>2020-03-17T15:36:44.999Z</published>
    <updated>2020-03-17T15:35:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>在了解一致性哈希算法之前，最好先了解一下缓存中的一个应用场景，了解了这个应用场景之后，再来理解一致性哈希算法，就容易多了，也更能体现出一致性哈希算法的优点，那么…</p><a id="more"></a><p>&nbsp;</p><p>在了解一致性哈希算法之前，最好先了解一下缓存中的一个应用场景，了解了这个应用场景之后，再来理解一致性哈希算法，就容易多了，也更能体现出一致性哈希算法的优点，那么，我们先来描述一下这个经典的分布式缓存的应用场景。</p><h2 id="场景描述"><a href="#场景描述" class="headerlink" title="场景描述"></a>场景描述</h2><p>假设，我们有三台缓存服务器，用于缓存图片，我们为这三台缓存服务器编号为0号、1号、2号，现在，有3万张图片需要缓存，我们希望这些图片被均匀的缓存到这3台服务器上，以便它们能够分摊缓存的压力。也就是说，我们希望每台服务器能够缓存1万张左右的图片，那么，我们应该怎样做呢？如果我们没有任何规律的将3万张图片平均的缓存在3台服务器上，可以满足我们的要求吗？可以！但是如果这样做，当我们需要访问某个缓存项时，则需要遍历3台缓存服务器，从3万个缓存项中找到我们需要访问的缓存，遍历的过程效率太低，时间太长，当我们找到需要访问的缓存项时，时长可能是不能被接受的，也就失去了缓存的意义，缓存的目的就是提高速度，改善用户体验，减轻后端服务器压力，如果每次访问一个缓存项都需要遍历所有缓存服务器的所有缓存项，想想就觉得很累，那么，我们该怎么办呢？原始的做法是对缓存项的键进行哈希，将hash后的结果对缓存服务器的数量进行取模操作，通过取模后的结果，决定缓存项将会缓存在哪一台服务器上，这样说可能不太容易理解，我们举例说明，仍然以刚才描述的场景为例，假设我们使用图片名称作为访问图片的key，假设图片名称是不重复的，那么，我们可以使用如下公式，计算出图片应该存放在哪台服务器上。</p><p><strong>hash（图片名称）% N</strong></p><p>因为图片的名称是不重复的，所以，当我们对同一个图片名称做相同的哈希计算时，得出的结果应该是不变的，如果我们有3台服务器，使用哈希后的结果对3求余，那么余数一定是0、1或者2，没错，正好与我们之前的服务器编号相同，如果求余的结果为0， 我们就把当前图片名称对应的图片缓存在0号服务器上，如果余数为1，就把当前图片名对应的图片缓存在1号服务器上，如果余数为2，同理，那么，当我们访问任意一个图片的时候，只要再次对图片名称进行上述运算，即可得出对应的图片应该存放在哪一台缓存服务器上，我们只要在这一台服务器上查找图片即可，如果图片在对应的服务器上不存在，则证明对应的图片没有被缓存，也不用再去遍历其他缓存服务器了，通过这样的方法，即可将3万张图片随机的分布到3台缓存服务器上了，而且下次访问某张图片时，直接能够判断出该图片应该存在于哪台缓存服务器上，这样就能满足我们的需求了，我们暂时称上述算法为HASH算法或者取模算法，取模算法的过程可以用下图表示。</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/hash.png" alt="白话解析：一致性哈希算法 consistent hashing" title="1486487517553357.png"></p><p>但是，使用上述HASH算法进行缓存时，会出现一些缺陷，试想一下，如果3台缓存服务器已经不能满足我们的缓存需求，那么我们应该怎么做呢？没错，很简单，多增加两台缓存服务器不就行了，假设，我们增加了一台缓存服务器，那么缓存服务器的数量就由3台变成了4台，此时，如果仍然使用上述方法对同一张图片进行缓存，那么这张图片所在的服务器编号必定与原来3台服务器时所在的服务器编号不同，因为除数由3变为了4，被除数不变的情况下，余数肯定不同，这种情况带来的结果就是当服务器数量变动时，所有缓存的位置都要发生改变，换句话说，当服务器数量发生改变时，所有缓存在一定时间内是失效的，当应用无法从缓存中获取数据时，则会向后端服务器请求数据，同理，假设3台缓存中突然有一台缓存服务器出现了故障，无法进行缓存，那么我们则需要将故障机器移除，但是如果移除了一台缓存服务器，那么缓存服务器数量从3台变为2台，如果想要访问一张图片，这张图片的缓存位置必定会发生改变，以前缓存的图片也会失去缓存的作用与意义，由于大量缓存在同一时间失效，造成了缓存的雪崩，此时前端缓存已经无法起到承担部分压力的作用，后端服务器将会承受巨大的压力，整个系统很有可能被压垮，所以，我们应该想办法不让这种情况发生，但是由于上述HASH算法本身的缘故，使用取模法进行缓存时，这种情况是无法避免的，为了解决这些问题，一致性哈希算法诞生了。</p><p>&nbsp;</p><p>我们来回顾一下使用上述算法会出现的问题。</p><p>问题1：当缓存服务器数量发生变化时，会引起缓存的雪崩，可能会引起整体系统压力过大而崩溃（大量缓存同一时间失效）。</p><p>问题2：当缓存服务器数量发生变化时，几乎所有缓存的位置都会发生改变，怎样才能尽量减少受影响的缓存呢？</p><p>&nbsp;</p><p>其实，上面两个问题是一个问题，那么，一致性哈希算法能够解决上述问题吗？</p><p>我们现在就来了解一下一致性哈希算法。</p><p>&nbsp; &nbsp;</p><h2 id="一致性哈希算法的基本概念"><a href="#一致性哈希算法的基本概念" class="headerlink" title="一致性哈希算法的基本概念"></a>一致性哈希算法的基本概念</h2><p>其实，一致性哈希算法也是使用取模的方法，只是，刚才描述的取模法是对服务器的数量进行取模，而一致性哈希算法是对2^32取模，什么意思呢？我们慢慢聊。</p><p>&nbsp;</p><p>首先，我们把二的三十二次方想象成一个圆，就像钟表一样，钟表的圆可以理解成由60个点组成的圆，而此处我们把这个圆想象成由2^32个点组成的圆，示意图如下：</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_2.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>圆环的正上方的点代表0，0点右侧的第一个点代表1，以此类推，2、3、4、5、6……直到2^32-1,也就是说0点左侧的第一个点代表2^32-1&nbsp;</p><p>我们把这个由2的32次方个点组成的圆环称为hash环。</p><p>&nbsp;</p><p>那么，一致性哈希算法与上图中的圆环有什么关系呢？我们继续聊，仍然以之前描述的场景为例，假设我们有3台缓存服务器，服务器A、服务器B、服务器C，那么，在生产环境中，这三台服务器肯定有自己的IP地址，我们使用它们各自的IP地址进行哈希计算，使用哈希后的结果对2^32取模，可以使用如下公式示意。</p><p><strong>hash（服务器A的IP地址） % &nbsp;2^32</strong></p><p>通过上述公式算出的结果一定是一个0到2^32-1之间的一个整数，我们就用算出的这个整数，代表服务器A，既然这个整数肯定处于0到2^32-1之间，那么，上图中的hash环上必定有一个点与这个整数对应，而我们刚才已经说明，使用这个整数代表服务器A，那么，服务器A就可以映射到这个环上，用下图示意</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_3.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>同理，服务器B与服务器C也可以通过相同的方法映射到上图中的hash环中</p><p><strong>hash（服务器B的IP地址） % &nbsp;2^32</strong></p><p><strong>hash（服务器C的IP地址） % &nbsp;2^32</strong></p><p>通过上述方法，可以将服务器B与服务器C映射到上图中的hash环上，示意图如下</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_4.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>假设3台服务器映射到hash环上以后如上图所示（当然，这是理想的情况，我们慢慢聊）。</p><p>&nbsp;</p><p>好了，到目前为止，我们已经把缓存服务器与hash环联系在了一起，我们通过上述方法，把缓存服务器映射到了hash环上，那么使用同样的方法，我们也可以将需要缓存的对象映射到hash环上。</p><p>&nbsp;</p><p>假设，我们需要使用缓存服务器缓存图片，而且我们仍然使用图片的名称作为找到图片的key，那么我们使用如下公式可以将图片映射到上图中的hash环上。</p><p><strong>hash（图片名称） % &nbsp;2^32</strong></p><p>映射后的示意图如下，下图中的橘黄色圆形表示图片</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_5.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>好了，现在服务器与图片都被映射到了hash环上，那么上图中的这个图片到底应该被缓存到哪一台服务器上呢？上图中的图片将会被缓存到服务器A上，为什么呢？因为从图片的位置开始，沿顺时针方向遇到的第一个服务器就是A服务器，所以，上图中的图片将会被缓存到服务器A上，如下图所示。</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_6.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>没错，一致性哈希算法就是通过这种方法，判断一个对象应该被缓存到哪台服务器上的，将缓存服务器与被缓存对象都映射到hash环上以后，从被缓存对象的位置出发，沿顺时针方向遇到的第一个服务器，就是当前对象将要缓存于的服务器，由于被缓存对象与服务器hash后的值是固定的，所以，在服务器不变的情况下，一张图片必定会被缓存到固定的服务器上，那么，当下次想要访问这张图片时，只要再次使用相同的算法进行计算，即可算出这个图片被缓存在哪个服务器上，直接去对应的服务器查找对应的图片即可。</p><p>&nbsp;</p><p>刚才的示例只使用了一张图片进行演示，假设有四张图片需要缓存，示意图如下</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_7.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>1号、2号图片将会被缓存到服务器A上，3号图片将会被缓存到服务器B上，4号图片将会被缓存到服务器C上。</p><p>&nbsp; &nbsp;</p><h2 id="一致性哈希算法的优点"><a href="#一致性哈希算法的优点" class="headerlink" title="一致性哈希算法的优点"></a>一致性哈希算法的优点</h2><p>经过上述描述，我想兄弟你应该已经明白了一致性哈希算法的原理了，但是话说回来，一致性哈希算法能够解决之前出现的问题吗，我们说过，如果简单的对服务器数量进行取模，那么当服务器数量发生变化时，会产生缓存的雪崩，从而很有可能导致系统崩溃，那么使用一致性哈希算法，能够避免这个问题吗？我们来模拟一遍，即可得到答案。</p><p>&nbsp;</p><p>假设，服务器B出现了故障，我们现在需要将服务器B移除，那么，我们将上图中的服务器B从hash环上移除即可，移除服务器B以后示意图如下。</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_8.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>在服务器B未移除时，图片3应该被缓存到服务器B中，可是当服务器B移除以后，按照之前描述的一致性哈希算法的规则，图片3应该被缓存到服务器C中，因为从图片3的位置出发，沿顺时针方向遇到的第一个缓存服务器节点就是服务器C，也就是说，如果服务器B出现故障被移除时，图片3的缓存位置会发生改变</p><p><img src="http://www.zsythink.net/wp-content/uploads/2017/02/020717_1707_9.png" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>&nbsp;</p><p>&nbsp;</p><p>但是，图片4仍然会被缓存到服务器C中，图片1与图片2仍然会被缓存到服务器A中，这与服务器B移除之前并没有任何区别，这就是一致性哈希算法的优点，如果使用之前的hash算法，服务器数量发生改变时，所有服务器的所有缓存在同一时间失效了，而使用一致性哈希算法时，服务器的数量如果发生改变，并不是所有缓存都会失效，而是只有部分缓存会失效，前端的缓存仍然能分担整个系统的压力，而不至于所有压力都在同一时间集中到后端服务器上。</p><p>&nbsp;</p><p>这就是一致性哈希算法所体现出的优点。</p><p>&nbsp; &nbsp;</p><h2 id="hash环的偏斜"><a href="#hash环的偏斜" class="headerlink" title="hash环的偏斜"></a>hash环的偏斜</h2><p>在介绍一致性哈希的概念时，我们理想化的将3台服务器均匀的映射到了hash环上，如下图所示</p><p><img src="http://www.zsythink.net/wp-content/themes/begin/img/blank.gif" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>但是，理想很丰满，现实很骨感，我们想象的与实际情况往往不一样。</p><p><img src="http://www.zsythink.net/wp-content/themes/begin/img/blank.gif" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>在实际的映射中，服务器可能会被映射成如下模样。</p><p><img src="http://www.zsythink.net/wp-content/themes/begin/img/blank.gif" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>聪明如你一定想到了，如果服务器被映射成上图中的模样，那么被缓存的对象很有可能大部分集中缓存在某一台服务器上，如下图所示。</p><p><img src="http://www.zsythink.net/wp-content/themes/begin/img/blank.gif" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>上图中，1号、2号、3号、4号、6号图片均被缓存在了服务器A上，只有5号图片被缓存在了服务器B上，服务器C上甚至没有缓存任何图片，如果出现上图中的情况，A、B、C三台服务器并没有被合理的平均的充分利用，缓存分布的极度不均匀，而且，如果此时服务器A出现故障，那么失效缓存的数量也将达到最大值，在极端情况下，仍然有可能引起系统的崩溃，上图中的情况则被称之为hash环的偏斜，那么，我们应该怎样防止hash环的偏斜呢？一致性hash算法中使用”虚拟节点”解决了这个问题，我们继续聊。</p><p>&nbsp; &nbsp;</p><h2 id="虚拟节点"><a href="#虚拟节点" class="headerlink" title="虚拟节点"></a>虚拟节点</h2><p>话接上文，由于我们只有3台服务器，当我们把服务器映射到hash环上的时候，很有可能出现hash环偏斜的情况，当hash环偏斜以后，缓存往往会极度不均衡的分布在各服务器上，聪明如你一定已经想到了，如果想要均衡的将缓存分布到3台服务器上，最好能让这3台服务器尽量多的、均匀的出现在hash环上，但是，真实的服务器资源只有3台，我们怎样凭空的让它们多起来呢，没错，就是凭空的让服务器节点多起来，既然没有多余的真正的物理服务器节点，我们就只能将现有的物理节点通过虚拟的方法复制出来，这些由实际节点虚拟复制而来的节点被称为”虚拟节点”。加入虚拟节点以后的hash环如下。</p><p><img src="http://www.zsythink.net/wp-content/themes/begin/img/blank.gif" alt="白话解析：一致性哈希算法 consistent hashing"></p><p>“虚拟节点”是”实际节点”（实际的物理服务器）在hash环上的复制品,一个实际节点可以对应多个虚拟节点。</p><p>从上图可以看出，A、B、C三台服务器分别虚拟出了一个虚拟节点，当然，如果你需要，也可以虚拟出更多的虚拟节点。引入虚拟节点的概念后，缓存的分布就均衡多了，上图中，1号、3号图片被缓存在服务器A中，5号、4号图片被缓存在服务器B中，6号、2号图片被缓存在服务器C中，如果你还不放心，可以虚拟出更多的虚拟节点，以便减小hash环偏斜所带来的影响，虚拟节点越多，hash环上的节点就越多，缓存被均匀分布的概率就越大。</p><p>&nbsp; &nbsp;</p><p>好了，一致性哈希算法的原理就总结到这里，如有错误，欢迎赐教，如需转载，请联系作者。</p><p>原文链接：<a href="http://www.zsythink.net/archives/1182" target="_blank" rel="noopener">白话解析：一致性哈希算法 consistent hashing</a></p><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在了解一致性哈希算法之前，最好先了解一下缓存中的一个应用场景，了解了这个应用场景之后，再来理解一致性哈希算法，就容易多了，也更能体现出一致性哈希算法的优点，那么…&lt;/p&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://kanchai.club/categories/Java/"/>
    
    
      <category term="Java基础" scheme="https://kanchai.club/tags/Java%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>Redis基本介绍</title>
    <link href="https://kanchai.club/2020/03/17/Redis%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
    <id>https://kanchai.club/2020/03/17/Redis%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/</id>
    <published>2020-03-17T15:36:44.819Z</published>
    <updated>2020-03-17T15:35:35.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><strong>Redis是什么？</strong><blockquote><p>Redis安装在磁盘；Redis数据存储在内存，redis是一种基于键值对（key-value）数据库，其中value可以为string、hash、list、set、zset等多种数据结构，可以满足很多应用场景。还提供了键过期，发布订阅，事务，流水线，等附加功能。Redis 的流水线功能允许客户端一次将多个命令请求发送给服务器， 并将被执行的多个命令请求的结果在一个命令回复中全部返回给客户端， 使用这个功能可以有效地减少客户端在执行多个命令时需要与服务器进行通信的次数。</p></blockquote></li></ul><a id="more"></a><ul><li><p><strong>Redis是什么？</strong></p><blockquote><p>Redis安装在磁盘；Redis数据存储在内存，redis是一种基于键值对（key-value）数据库，其中value可以为string、hash、list、set、zset等多种数据结构，可以满足很多应用场景。还提供了键过期，发布订阅，事务，流水线，等附加功能。Redis 的流水线功能允许客户端一次将多个命令请求发送给服务器， 并将被执行的多个命令请求的结果在一个命令回复中全部返回给客户端， 使用这个功能可以有效地减少客户端在执行多个命令时需要与服务器进行通信的次数。</p></blockquote></li><li><p><strong>特性</strong></p><blockquote><ol><li>速度快，数据放在内存中，官方给出的读写性能10万/S，与机器性能也有关<blockquote><ul><li>数据放内存中是速度快的主要原因</li><li>C语言实现，与操作系统距离近</li><li>使用了单线程架构，预防多线程可能产生的竞争问题</li></ul></blockquote></li><li>键值对的数据结构服务器</li><li>丰富的功能：见上功能</li><li>简单稳定：单线程</li><li>持久化：发生断电或机器故障，数据可能会丢失，持久化到硬盘</li><li>主从复制：实现多个相同数据的redis副本</li><li>高可用和分布式：哨兵机制实现高可用，保证redis节点故障发现和自动转移</li><li>客户端语言多：java php python c c++ nodejs等</li></ol></blockquote></li><li><p><strong>使用场景</strong></p><blockquote><ol><li>缓存：合理使用缓存加快数据访问速度，降低后端数据源压力</li><li>排行榜：按照热度排名，按照发布时间排行，主要用到列表和有序集合</li><li>计数器应用：视频网站播放数，网站浏览数，使用redis计数</li><li>社交网络：赞、踩、粉丝、下拉刷新</li><li>消息队列：发布和订阅</li></ol></blockquote></li><li><p><strong>常用客户端命令</strong></p></li></ul><table><thead><tr><th>可执行文件</th><th>作用</th></tr></thead><tbody><tr><td>redis-server</td><td>启动redis</td></tr><tr><td>redis-cli</td><td>redis命令行客户端</td></tr><tr><td>redis-benchmark</td><td>基准测试工具</td></tr><tr><td>redis-check-aof</td><td>AOF持久化文件检测和修复工具</td></tr><tr><td>redis-check-dump</td><td>RDB持久化文件检测和修复工具</td></tr><tr><td>redis-sentinel</td><td>启动哨兵</td></tr><tr><td>&gt;1. <strong>redis-server启动：</strong></td><td></td></tr><tr><td>&gt;&gt;1. 默认配置：redis-server, 日志输出版本信息，端口6379</td><td></td></tr><tr><td>&gt;&gt;2. 运行启动：redis-server –port 6380  不建议</td><td></td></tr><tr><td>&gt;&gt;3. 配置文件启动： redis-server /opt/redis/redis.conf，灵活，生产环境使用这种</td><td></td></tr><tr><td>&gt;2. <strong>redis-cli 启动</strong></td><td></td></tr><tr><td>&gt;&gt;1. 交互式：redis-cli -h {host} -p {prot}连接到redis服务，没有h默认连127.0</td><td></td></tr><tr><td>redis-cli -h 127.0.0.1 -p 6379                //没有p 默认连6379</td><td></td></tr><tr><td>&gt;&gt;2. 命令式：redis-cli -h 127.0.0.1 -p 6379 get hello  //取key=hello的value</td><td></td></tr><tr><td>&gt;3. <strong>停止redis服务： redis-cli shutdown</strong></td><td></td></tr><tr><td>&gt;&gt;* a.关闭时：断开连接，持久化文件生成，相对安</td><td></td></tr><tr><td>&gt;&gt;* b.还可以用kill关闭，此方式不会做持久化，还会造成缓冲区非法关闭，可能会造成AOF和丢失数据</td><td></td></tr><tr><td>&gt;4. <strong>版本</strong>：</td><td></td></tr><tr><td>&gt;&gt;* 版本号第二位为奇数，为非稳定版本（2.7、2.9、3.1）</td><td></td></tr><tr><td>&gt;&gt;* 第二为偶数，为稳定版本（2.6、2.8、3.0）</td><td></td></tr><tr><td>&gt;&gt;* 当前奇数版本是下一个稳定版本的开发版本，如2.9是3.0的开发版本</td><td></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Redis是什么？&lt;/strong&gt;&lt;blockquote&gt;
&lt;p&gt;Redis安装在磁盘；Redis数据存储在内存，redis是一种基于键值对（key-value）数据库，其中value可以为string、hash、list、set、zset等多种数据结构，可以满足很多应用场景。还提供了键过期，发布订阅，事务，流水线，等附加功能。Redis 的流水线功能允许客户端一次将多个命令请求发送给服务器， 并将被执行的多个命令请求的结果在一个命令回复中全部返回给客户端， 使用这个功能可以有效地减少客户端在执行多个命令时需要与服务器进行通信的次数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Redis" scheme="https://kanchai.club/categories/Redis/"/>
    
    
      <category term="redis基本介绍" scheme="https://kanchai.club/tags/redis%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%BB%8D/"/>
    
  </entry>
  
  <entry>
    <title>POI-Excel的导出导入</title>
    <link href="https://kanchai.club/2020/03/17/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
    <id>https://kanchai.club/2020/03/17/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</id>
    <published>2020-03-17T15:36:44.711Z</published>
    <updated>2020-03-17T15:35:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算机中线程的基本概念"><a href="#计算机中线程的基本概念" class="headerlink" title="计算机中线程的基本概念"></a>计算机中线程的基本概念</h3><a id="more"></a><h3 id="计算机中线程的基本概念-1"><a href="#计算机中线程的基本概念-1" class="headerlink" title="计算机中线程的基本概念"></a>计算机中线程的基本概念</h3><ol><li><p>CPU核心数，线程数之间有什么关系？</p><blockquote><p>CPU核心数量和线程数量一般情况下为1:1的关系，但是使用了超线程技术后，比例为1:2，这个技术是指CPU的工业技术。window可以在任务管理器查看，就是我们常说的4核八线程，4核4线程。</p></blockquote></li><li><p>什么是指CPU时间片轮转机制？</p><blockquote><p>时间片轮转调度是一种最古老，最简单，最公平且使用最广的算法。每个进程被分配一时间段，称作它的时间片，即该进程允许运行的时间。又叫RR调度，在JAVA中过多的线程会导致上下文切换。<br>比如你4核4线程，你new了8个线程，那么其实4个物理线程公平的分配给8个JAVA线程使用。</p></blockquote></li><li><p>什么是进程和线程?</p><blockquote><ul><li><strong>进程</strong>:程序运行资源分配的最小单位，进程内部有多个线程，会共享这个进程的资源</li><li><strong>线程</strong>:CPU调度的最小单位，必须依赖进程而存在。</li></ul></blockquote></li><li><p>什么是并发和并行?</p><blockquote><ul><li><strong>并行</strong>:同一时刻，可以同时处理事情的能力</li><li><strong>并发</strong>:与单位时间相关，在单位时间内可以处理事情的能力</li></ul></blockquote></li><li><p>高并发编程的意义、好处和注意事项</p><blockquote><ul><li><strong>好处</strong>:充分利用cpu的资源、加快用户响应的时间，程序模块化，异步化</li><li><strong>问题</strong>:线程共享资源，存在冲突；容易导致死锁；启用太多的线程，就有搞垮机器的可能</li></ul></blockquote></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;计算机中线程的基本概念&quot;&gt;&lt;a href=&quot;#计算机中线程的基本概念&quot; class=&quot;headerlink&quot; title=&quot;计算机中线程的基本概念&quot;&gt;&lt;/a&gt;计算机中线程的基本概念&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://kanchai.club/categories/Java/"/>
    
    
      <category term="并发编程" scheme="https://kanchai.club/tags/%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B/"/>
    
      <category term="计算机线程" scheme="https://kanchai.club/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot配置</title>
    <link href="https://kanchai.club/2020/03/17/springboot%E9%85%8D%E7%BD%AE/"/>
    <id>https://kanchai.club/2020/03/17/springboot%E9%85%8D%E7%BD%AE/</id>
    <published>2020-03-17T15:36:44.596Z</published>
    <updated>2020-03-17T15:36:00.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br></pre></td><td class="code"><pre><span class="line"># ----------------------------------------</span><br><span class="line"># 核心属性</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"># 文件编码</span><br><span class="line">banner.charset&#x3D; UTF-8</span><br><span class="line"># 文件位置</span><br><span class="line">banner.location&#x3D; classpath:banner.txt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 日志配置</span><br><span class="line"># 日志配置文件的位置。 例如对于Logback的&#96;classpath：logback.xml&#96;</span><br><span class="line">logging.config&#x3D; </span><br><span class="line"># ％wEx#记录异常时使用的转换字。</span><br><span class="line">logging.exception-conversion-word&#x3D; </span><br><span class="line"># 日志文件名。 例如&#96;myapp.log&#96;</span><br><span class="line">logging.file&#x3D; </span><br><span class="line"># 日志级别严重性映射。 例如&#96;logging.level.org.springframework &#x3D;  DEBUG&#96;</span><br><span class="line">logging.level.*&#x3D; </span><br><span class="line"># 日志文件的位置。 例如&#96;&#x2F; var &#x2F; log&#96;</span><br><span class="line">logging.path&#x3D; </span><br><span class="line"># 用于输出到控制台的Appender模式。 只支持默认的logback设置。</span><br><span class="line">logging.pattern.console&#x3D; </span><br><span class="line"># 用于输出到文件的Appender模式。 只支持默认的logback设置。</span><br><span class="line">logging.pattern.file&#x3D; </span><br><span class="line"># 日志级别的Appender模式（默认％5p）。 只支持默认的logback设置。</span><br><span class="line">logging.pattern.level&#x3D; </span><br><span class="line">#注册日志记录系统的初始化挂钩。</span><br><span class="line">logging.register-shutdown-hook&#x3D; false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># AOP 切面</span><br><span class="line"># 添加@EnableAspectJAutoProxy。</span><br><span class="line">spring.aop.auto&#x3D; true</span><br><span class="line"># 是否要创建基于子类（CGLIB）的代理（true），而不是基于标准的基于Java接口的代理（false）。</span><br><span class="line">spring.aop.proxy-target-class&#x3D; false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 应用程序上下文初始化器</span><br><span class="line"># 应用指标。</span><br><span class="line">spring.application.index&#x3D; </span><br><span class="line"># 应用程序名称。</span><br><span class="line">spring.application.name&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 国际化（消息源自动配置）</span><br><span class="line">#</span><br><span class="line">spring.messages.basename&#x3D; messages</span><br><span class="line"># 以逗号分隔的基础名称列表，每个都在ResourceBundle约定之后。</span><br><span class="line"># 加载的资源束文件缓存到期，以秒为单位。 设置为-1时，软件包将永久缓存。</span><br><span class="line">spring.messages.cache-seconds&#x3D; -1</span><br><span class="line"># 消息编码。</span><br><span class="line">spring.messages.encoding&#x3D; UTF-8</span><br><span class="line"># 设置是否返回到系统区域设置，如果没有找到特定语言环境的文件。</span><br><span class="line">spring.messages.fallback-to-system-locale&#x3D; true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># REDIS (Redis 配置)</span><br><span class="line"># 连接工厂使用的数据库索引。</span><br><span class="line">spring.redis.database&#x3D; 0</span><br><span class="line"># Redis服务器主机。</span><br><span class="line">spring.redis.host&#x3D; localhost</span><br><span class="line"># 登录redis服务器的密码。</span><br><span class="line">spring.redis.password&#x3D; </span><br><span class="line"># 给定时间池可以分配的最大连接数。 使用负值为无限制。</span><br><span class="line">spring.redis.pool.max-active&#x3D; 8</span><br><span class="line"># 池中“空闲”连接的最大数量。 使用负值来表示无限数量的空闲连接。</span><br><span class="line">spring.redis.pool.max-idle&#x3D; 8</span><br><span class="line"># 连接分配在池耗尽之前在抛出异常之前应阻止的最大时间量（以毫秒为单位）。 使用负值无限期地阻止。</span><br><span class="line">spring.redis.pool.max-wait&#x3D; -1</span><br><span class="line"># 定义池中维护的最小空闲连接数。 此设置只有在正值时才有效果。</span><br><span class="line">spring.redis.pool.min-idle&#x3D; 0</span><br><span class="line"># redis服务器端口</span><br><span class="line">spring.redis.port&#x3D; 6379</span><br><span class="line"># redis服务器名称</span><br><span class="line">spring.redis.sentinel.master&#x3D;</span><br><span class="line"># </span><br><span class="line">spring.redis.sentinel.nodes&#x3D; </span><br><span class="line"># 连接超时（毫秒）。</span><br><span class="line">spring.redis.timeout&#x3D; 0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 管理员 （Spring应用程序管理员JMX自动配置）</span><br><span class="line"># 开启应用管理功能。</span><br><span class="line">spring.application.admin.enabled&#x3D; false</span><br><span class="line"># JMX应用程序名称MBean。</span><br><span class="line">spring.application.admin.jmx-name&#x3D; org.springframework.boot:type&#x3D; Admin,name&#x3D; SpringApplication</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 自动配置</span><br><span class="line"># 自动配置类排除。</span><br><span class="line">spring.autoconfigure.exclude&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># spring 核心配置</span><br><span class="line"># 跳过搜索BeanInfo类。</span><br><span class="line">spring.beaninfo.ignore&#x3D; true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># spring 缓存配置</span><br><span class="line"># 由底层缓存管理器支持的要创建的缓存名称的逗号分隔列表。</span><br><span class="line">spring.cache.cache-names&#x3D; </span><br><span class="line"># 用于初始化EhCache的配置文件的位置。</span><br><span class="line">spring.cache.ehcache.config&#x3D; </span><br><span class="line"># 用于创建缓存的规范。 检查CacheBuilderSpec有关规格格式的更多细节。</span><br><span class="line">spring.cache.guava.spec&#x3D; </span><br><span class="line"># 用于初始化Hazelcast的配置文件的位置。</span><br><span class="line">spring.cache.hazelcast.config&#x3D; </span><br><span class="line"># 用于初始化Infinispan的配置文件的位置。</span><br><span class="line">spring.cache.infinispan.config&#x3D; </span><br><span class="line"># 用于初始化缓存管理器的配置文件的位置。</span><br><span class="line">spring.cache.jcache.config&#x3D; </span><br><span class="line"># 用于检索符合JSR-107的缓存管理器的CachingProvider实现的完全限定名称。 只有在类路径上有多个JSR-107实现可用时才需要。</span><br><span class="line">spring.cache.jcache.provider&#x3D; </span><br><span class="line"># 缓存类型，默认情况下根据环境自动检测。</span><br><span class="line">spring.cache.type&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># spring配置 （配置文件应用侦听器）</span><br><span class="line"># 配置文件位置。</span><br><span class="line">spring.config.location&#x3D; </span><br><span class="line"># 配置文件名。</span><br><span class="line">spring.config.name&#x3D; application</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># hazelcast配置(Hazelcast是一个高度可扩展的数据分发和集群平台，提供了高效的、可扩展的分布式数据存储、数据缓存.)</span><br><span class="line"># 用于初始化Hazelcast的配置文件的位置。</span><br><span class="line">spring.hazelcast.config&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JMX</span><br><span class="line"># JMX域名。</span><br><span class="line">spring.jmx.default-domain&#x3D; </span><br><span class="line"># 将管理bean暴露给JMX域。</span><br><span class="line">spring.jmx.enabled&#x3D; true</span><br><span class="line"># MBean服务器bean名称。</span><br><span class="line">spring.jmx.server&#x3D; mbeanServer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Email (MailProperties)  邮件属性</span><br><span class="line"># 默认MimeMessage编码。</span><br><span class="line">spring.mail.default-encoding&#x3D; UTF-8</span><br><span class="line"># SMTP服务器主机。 例如&#96;smtp.example.com&#96;</span><br><span class="line">spring.mail.host&#x3D; </span><br><span class="line"># 会话JNDI名称。 设置时，优先于其他邮件设置。</span><br><span class="line">spring.mail.jndi-name&#x3D; </span><br><span class="line"># 登录SMTP服务器的密码。</span><br><span class="line">spring.mail.password&#x3D; </span><br><span class="line"># SMTP服务器端口。</span><br><span class="line">spring.mail.port&#x3D; </span><br><span class="line"># 其他JavaMail会话属性。</span><br><span class="line">spring.mail.properties.*&#x3D; </span><br><span class="line"># SMTP服务器使用的协议。</span><br><span class="line">spring.mail.protocol&#x3D; smtp</span><br><span class="line"># 测试邮件服务器在启动时可用。</span><br><span class="line">spring.mail.test-connection&#x3D; false</span><br><span class="line"># 登录SMTP服务器的用户。</span><br><span class="line">spring.mail.username&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 应用设置（spring应用）</span><br><span class="line"># 用于在应用程序运行时显示横幅的模式。</span><br><span class="line">spring.main.banner-mode&#x3D; console</span><br><span class="line"># 源（类名，包名或XML资源位置）包含在ApplicationContext中。</span><br><span class="line">spring.main.sources&#x3D; </span><br><span class="line"># 在Web环境中运行应用程序（默认情况下自动检测）。</span><br><span class="line">spring.main.web-environment&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 文件编码（文件编码应用程序侦听器）</span><br><span class="line"># 应用程序使用的预期字符编码。</span><br><span class="line">spring.mandatory-file-encoding&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 输出</span><br><span class="line"># 配置ANSI输出（可以是“detect”，“always”，“never”）--&gt;“检测”，“永远”，“从不”</span><br><span class="line">spring.output.ansi.enabled&#x3D; detect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># PID文件（应用程序文件写入器）</span><br><span class="line"># 如果使用ApplicationPidFileWriter但是无法写入PID文件，则失败。</span><br><span class="line">spring.pid.fail-on-write-error&#x3D; </span><br><span class="line"># 要写入的PID文件的位置（如果使用ApplicationPidFileWriter）。</span><br><span class="line">spring.pid.file&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#   简介（profiles 这个单词翻译过来就是这样... 没用过这个属性，有哪位大神用过请留言我改正，感谢。）</span><br><span class="line"># 活动配置文件的逗号分隔列表。</span><br><span class="line">spring.profiles.active&#x3D; </span><br><span class="line"># 无条件地激活指定的逗号分隔的配置文件。</span><br><span class="line">spring.profiles.include&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># SendGrid（SendGrid自动配置）</span><br><span class="line"># SendGrid帐号用户名</span><br><span class="line">spring.sendgrid.username&#x3D; </span><br><span class="line"># SendGrid帐号密码</span><br><span class="line">spring.sendgrid.password&#x3D; </span><br><span class="line"># SendGrid代理主机</span><br><span class="line">spring.sendgrid.proxy.host&#x3D; </span><br><span class="line"># SendGrid代理端口</span><br><span class="line">spring.sendgrid.proxy.port&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line">#   WEB属性</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 文件上传属性</span><br><span class="line"># 启用对文件上传的支持。</span><br><span class="line">multipart.enabled&#x3D; true</span><br><span class="line"># 将文件写入磁盘后的阈值。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span><br><span class="line">multipart.file-size-threshold&#x3D; 0</span><br><span class="line"># 上传文件的位置。</span><br><span class="line">multipart.location&#x3D; </span><br><span class="line"># 最大文件大小。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span><br><span class="line">multipart.max-file-size&#x3D; 1Mb</span><br><span class="line"># 最大请求大小。 值可以使用后缀“MB”或“KB”表示兆字节或千字节大小。</span><br><span class="line">multipart.max-request-size&#x3D; 10Mb</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 嵌入式服务器配置（服务器属性）</span><br><span class="line"># 服务器应绑定到的网络地址。</span><br><span class="line">server.address&#x3D; </span><br><span class="line"># 如果启用响应压缩。</span><br><span class="line">server.compression.enabled&#x3D; false</span><br><span class="line"># 从压缩中排除的用户代理列表。</span><br><span class="line">server.compression.excluded-user-agents&#x3D; </span><br><span class="line"># 应该压缩的MIME类型的逗号分隔列表。 例如&#96;text &#x2F; html，text &#x2F; css，application &#x2F; json&#96;</span><br><span class="line">server.compression.mime-types&#x3D; </span><br><span class="line"># 执行压缩所需的最小响应大小。 例如2048</span><br><span class="line">server.compression.min-response-size&#x3D; </span><br><span class="line"># Servlet上下文初始化参数。 例如&#96;server.context-parameters.a &#x3D;  alpha&#96;</span><br><span class="line">server.context-parameters.*&#x3D; </span><br><span class="line"># 应用程序的上下文路径。</span><br><span class="line">server.context-path&#x3D; </span><br><span class="line"># 显示应用程序的名称。</span><br><span class="line">server.display-name&#x3D; application</span><br><span class="line"># 何时包含“stacktrace”属性。</span><br><span class="line">server.error.include-stacktrace&#x3D; never</span><br><span class="line"># 错误控制器的路径。</span><br><span class="line">server.error.path&#x3D; &#x2F;error</span><br><span class="line"># 启动浏览器中出现服务器错误时显示的默认错误页面。</span><br><span class="line">server.error.whitelabel.enabled&#x3D; true</span><br><span class="line"># JSP servlet的类名。</span><br><span class="line">server.jsp-servlet.class-name&#x3D; org.apache.jasper.servlet.JspServlet</span><br><span class="line"># Init参数用于配置JSP servlet</span><br><span class="line">server.jsp-servlet.init-parameters.*&#x3D; </span><br><span class="line"># JSP servlet是否被注册</span><br><span class="line">server.jsp-servlet.registered&#x3D; true</span><br><span class="line"># 服务器HTTP端口。</span><br><span class="line">server.port&#x3D; 8080</span><br><span class="line"># 主调度程序servlet的路径。</span><br><span class="line">server.servlet-path&#x3D; &#x2F;</span><br><span class="line"># 会话cookie的注释。</span><br><span class="line">server.session.cookie.comment&#x3D; </span><br><span class="line"># 会话cookie的域。</span><br><span class="line">server.session.cookie.domain&#x3D; </span><br><span class="line"># “HttpOnly”标志为会话cookie。</span><br><span class="line">server.session.cookie.http-only&#x3D; </span><br><span class="line"># 会话cookie的最大时长（以秒为单位）。</span><br><span class="line">server.session.cookie.max-age&#x3D; </span><br><span class="line"># 会话cookie名称。</span><br><span class="line">server.session.cookie.name&#x3D; </span><br><span class="line"># 会话cookie的路径。</span><br><span class="line">server.session.cookie.path&#x3D; </span><br><span class="line"># 会话cookie的“安全”标志。</span><br><span class="line">server.session.cookie.secure&#x3D; </span><br><span class="line"># 重启之间持续会话数据。</span><br><span class="line">server.session.persistent&#x3D; false</span><br><span class="line"># 用于存储会话数据的目录。</span><br><span class="line">server.session.store-dir&#x3D; </span><br><span class="line"># 会话超时（秒）。</span><br><span class="line">server.session.timeout&#x3D; </span><br><span class="line"># 会话跟踪模式（以下一个或多个：“cookie”，“url”，“ssl”）。</span><br><span class="line">server.session.tracking-modes&#x3D; </span><br><span class="line"># 支持SSL密码。</span><br><span class="line">server.ssl.ciphers&#x3D; </span><br><span class="line"># 客户端认证是否需要（“want”）或需要（“need”）。 需要信任存储。</span><br><span class="line">server.ssl.client-auth&#x3D; </span><br><span class="line"># ssl配置</span><br><span class="line">server.ssl.enabled&#x3D; </span><br><span class="line">server.ssl.key-alias&#x3D; </span><br><span class="line">server.ssl.key-password&#x3D; </span><br><span class="line">server.ssl.key-store&#x3D; </span><br><span class="line">server.ssl.key-store-password&#x3D; </span><br><span class="line">server.ssl.key-store-provider&#x3D; </span><br><span class="line">server.ssl.key-store-type&#x3D; </span><br><span class="line">server.ssl.protocol&#x3D; </span><br><span class="line">server.ssl.trust-store&#x3D; </span><br><span class="line">server.ssl.trust-store-password&#x3D; </span><br><span class="line">server.ssl.trust-store-provider&#x3D; </span><br><span class="line">server.ssl.trust-store-type&#x3D; </span><br><span class="line"># 创建日志文件的目录。 可以相对于tomcat base dir或absolute。</span><br><span class="line">server.tomcat.accesslog.directory&#x3D; </span><br><span class="line"># 启用访问日志。</span><br><span class="line">server.tomcat.accesslog.enabled&#x3D; false</span><br><span class="line"># 访问日志的格式化模式。</span><br><span class="line">server.tomcat.accesslog.pattern&#x3D; common</span><br><span class="line"># 日志文件名前缀。</span><br><span class="line">server.tomcat.accesslog.prefix&#x3D; access_log</span><br><span class="line"># 日志文件名后缀。</span><br><span class="line">server.tomcat.accesslog.suffix&#x3D; .log</span><br><span class="line"># 在调用backgroundProcess方法之间延迟秒。</span><br><span class="line">server.tomcat.background-processor-delay&#x3D; 30</span><br><span class="line"># Tomcat基本目录。 如果未指定，将使用临时目录。</span><br><span class="line">server.tomcat.basedir&#x3D; </span><br><span class="line"># 正则表达式匹配可信IP地址。</span><br><span class="line">server.tomcat.internal-proxies&#x3D; 10\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\192\\.168\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\169\\.254\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\127\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\172\\.1[6-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\172\\.2[0-9]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;|\\172\\.3[0-1]&#123;1&#125;\\.\\d&#123;1,3&#125;\\.\\d&#123;1,3&#125;</span><br><span class="line"># HTTP消息头的最大大小（以字节为单位）。</span><br><span class="line">server.tomcat.max-http-header-size&#x3D; 0</span><br><span class="line"># 最大工作线程数。</span><br><span class="line">server.tomcat.max-threads&#x3D; 0</span><br><span class="line"># 用于覆盖原始端口值的HTTP头的名称。</span><br><span class="line">server.tomcat.port-header&#x3D; X-Forwarded-Port</span><br><span class="line"># 头文件，保存传入协议，通常命名为“X-Forwarded-Proto”。</span><br><span class="line">server.tomcat.protocol-header&#x3D; </span><br><span class="line"># 表示传入请求使用SSL的协议头的值。</span><br><span class="line">server.tomcat.protocol-header-https-value&#x3D; https</span><br><span class="line"># 提取远程ip的HTTP头的名称。 例如&#96;X-FORWARDED-FOR&#96;</span><br><span class="line">server.tomcat.remote-ip-header&#x3D; </span><br><span class="line"># 用于解码URI的字符编码。</span><br><span class="line">server.tomcat.uri-encoding&#x3D; UTF-8</span><br><span class="line"># 访问日志目录。</span><br><span class="line">server.undertow.accesslog.dir&#x3D; </span><br><span class="line"># 启用访问日志。</span><br><span class="line">server.undertow.accesslog.enabled&#x3D; false</span><br><span class="line"># 访问日志的格式化模式。</span><br><span class="line">server.undertow.accesslog.pattern&#x3D; common</span><br><span class="line"># 每个缓冲区的大小字节数。</span><br><span class="line">server.undertow.buffer-size&#x3D; </span><br><span class="line"># 每个区域的缓冲区数。</span><br><span class="line">server.undertow.buffers-per-region&#x3D; </span><br><span class="line"># 在Java堆之外分配缓冲区。</span><br><span class="line">server.undertow.direct-buffers&#x3D; </span><br><span class="line"># 为工作者创建的I &#x2F; O线程数。</span><br><span class="line">server.undertow.io-threads&#x3D; </span><br><span class="line"># 工作线程数。</span><br><span class="line">server.undertow.worker-threads&#x3D; </span><br><span class="line"># 如果X-Forwarded- *头应该应用于HttpRequest。</span><br><span class="line">server.use-forward-headers&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 自由标记（自由标记自动配置）</span><br><span class="line"># 设置是否允许HttpServletRequest属性重写（隐藏）控制器生成的同名模型属性。</span><br><span class="line">spring.freemarker.allow-request-override&#x3D; false</span><br><span class="line"># 设置是否允许HttpSession属性重写（隐藏）控制器生成的相同名称的模型属性。</span><br><span class="line">spring.freemarker.allow-session-override&#x3D; false</span><br><span class="line"># 启用模板缓存。</span><br><span class="line">spring.freemarker.cache&#x3D; false</span><br><span class="line"># 模板编码。</span><br><span class="line">spring.freemarker.charset&#x3D; UTF-8</span><br><span class="line"># 检查模板位置是否存在。</span><br><span class="line">spring.freemarker.check-template-location&#x3D; true</span><br><span class="line"># Content-Type值。</span><br><span class="line">spring.freemarker.content-type&#x3D; text&#x2F;html</span><br><span class="line"># 启用此技术的MVC视图分辨率。</span><br><span class="line">spring.freemarker.enabled&#x3D; true</span><br><span class="line"># 设置在与模板合并之前是否应将所有请求属性添加到模型中。</span><br><span class="line">spring.freemarker.expose-request-attributes&#x3D; false</span><br><span class="line"># 设置在与模板合并之前是否应将所有HttpSession属性添加到模型中。</span><br><span class="line">spring.freemarker.expose-session-attributes&#x3D; false</span><br><span class="line"># 设置是否公开一个RequestContext供Spring 的宏库使用，名称为“springMacroRequestContext”。</span><br><span class="line">spring.freemarker.expose-spring-macro-helpers&#x3D; true</span><br><span class="line"># 首选文件系统访问模板加载。 文件系统访问可以对模板更改进行热检测。</span><br><span class="line">spring.freemarker.prefer-file-system-access&#x3D; true</span><br><span class="line"># 前缀，在构建URL时先查看名称。</span><br><span class="line">spring.freemarker.prefix&#x3D; </span><br><span class="line"># 所有视图的RequestContext属性的名称。</span><br><span class="line">spring.freemarker.request-context-attribute&#x3D; </span><br><span class="line"># 公开的FreeMarker密钥将被传递给FreeMarker的配置。</span><br><span class="line">spring.freemarker.settings.*&#x3D; </span><br><span class="line"># 后缀，在构建URL时附加到查看名称。</span><br><span class="line">spring.freemarker.suffix&#x3D; </span><br><span class="line"># 逗号分隔的模板路径列表。</span><br><span class="line">spring.freemarker.template-loader-path&#x3D; classpath:&#x2F;templates&#x2F;</span><br><span class="line"># 可以解决的视图名称的白名单。</span><br><span class="line">spring.freemarker.view-names&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># groovr模板（Groovy模板自动配置）</span><br><span class="line"># 设置是否允许HttpServletRequest属性重写（隐藏）控制器生成的同名模型属性。</span><br><span class="line">spring.groovy.template.allow-request-override&#x3D; false</span><br><span class="line"># 设置是否允许HttpSession属性重写（隐藏）控制器生成的相同名称的模型属性。</span><br><span class="line">spring.groovy.template.allow-session-override&#x3D; false</span><br><span class="line"># 启用模板缓存。</span><br><span class="line">spring.groovy.template.cache&#x3D; </span><br><span class="line"># 模板编码。</span><br><span class="line">spring.groovy.template.charset&#x3D; UTF-8</span><br><span class="line"># 检查模板位置是否存在。</span><br><span class="line">spring.groovy.template.check-template-location&#x3D; true</span><br><span class="line"># 请参阅GroovyMarkupConfigurer</span><br><span class="line">spring.groovy.template.configuration.*&#x3D; </span><br><span class="line"># Content-Type值。</span><br><span class="line">spring.groovy.template.content-type&#x3D; test&#x2F;html</span><br><span class="line"># 启用此技术的MVC视图分辨率。</span><br><span class="line">spring.groovy.template.enabled&#x3D; true</span><br><span class="line"># 设置在与模板合并之前是否应将所有请求属性添加到模型中。</span><br><span class="line">spring.groovy.template.expose-request-attributes&#x3D; false</span><br><span class="line"># 设置在与模板合并之前是否应将所有HttpSession属性添加到模型中。</span><br><span class="line">spring.groovy.template.expose-session-attributes&#x3D; false</span><br><span class="line"># 设置是否公开一个RequestContext供Spring Spring的宏库使用，名称为“springMacroRequestContext”。</span><br><span class="line">spring.groovy.template.expose-spring-macro-helpers&#x3D; true</span><br><span class="line"># 前缀，在构建URL时先查看名称。</span><br><span class="line">spring.groovy.template.prefix&#x3D; </span><br><span class="line"># 所有视图的RequestContext属性的名称。</span><br><span class="line">spring.groovy.template.request-context-attribute&#x3D; </span><br><span class="line"># 模板路径。</span><br><span class="line">spring.groovy.template.resource-loader-path&#x3D; classpath:&#x2F;templates&#x2F;</span><br><span class="line"># 后缀，在构建URL时附加到查看名称。</span><br><span class="line">spring.groovy.template.suffix&#x3D; .tpl</span><br><span class="line"># 可以解决的视图名称的白名单。</span><br><span class="line">spring.groovy.template.view-names&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># spring Hateoas 配置</span><br><span class="line"># 指定应用程序&#x2F; hal + json响应是否应发送到接受application &#x2F; json的请求。</span><br><span class="line">spring.hateoas.use-hal-as-default-json-media-type&#x3D; true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># HTTP 消息转换</span><br><span class="line"># 首选JSON映射程序用于HTTP消息转换。 设置为“gson”强制使用Gson，当它和Jackson都在类路径上时。</span><br><span class="line">spring.http.converters.preferred-json-mapper&#x3D; jackson</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># HTTP 编码（Http编码属性）</span><br><span class="line"># HTTP请求和响应的字符集。 如果未明确设置，则添加到“Content-Type”头。</span><br><span class="line">spring.http.encoding.charset&#x3D; UTF-8</span><br><span class="line"># 启用http编码支持。</span><br><span class="line">spring.http.encoding.enabled&#x3D; true</span><br><span class="line"># 将编码强制到HTTP请求和响应上配置的字符集。</span><br><span class="line">spring.http.encoding.force&#x3D; true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Jackson(解析json和序列化json) 配置</span><br><span class="line"># 日期格式字符串或全限定日期格式类名。 例如&#96;yyyy-MM-dd HH：mm：ss&#96;。</span><br><span class="line">spring.jackson.date-format&#x3D; </span><br><span class="line"># Jones开&#x2F;关功能，影响Java对象反序列化的方式。</span><br><span class="line">spring.jackson.deserialization.*&#x3D; </span><br><span class="line"># 关闭或者打开Jackson 功能</span><br><span class="line">spring.jackson.generator.*&#x3D; </span><br><span class="line"># Joda日期时间格式字符串。 如果未配置，如果配置了格式字符串，则“日期格式”将用作后备。</span><br><span class="line">spring.jackson.joda-date-time-format&#x3D; </span><br><span class="line"># 用于格式化的区域设置。</span><br><span class="line">spring.jackson.locale&#x3D; </span><br><span class="line"># jackson通用开&#x2F;关功能。</span><br><span class="line">spring.jackson.mapper.*&#x3D; </span><br><span class="line"># Jackson 解析器的开&#x2F;关功能。</span><br><span class="line">spring.jackson.parser.*&#x3D; </span><br><span class="line"># Jackson的PropertyNamingStrategy的一个常量。 也可以是PropertyNamingStrategy子类的完全限定类名。</span><br><span class="line">spring.jackson.property-naming-strategy&#x3D; </span><br><span class="line"># Jones开&#x2F;关功能，影响Java对象序列化的方式。</span><br><span class="line">spring.jackson.serialization.*&#x3D; </span><br><span class="line"># 控制在序列化期间包含属性。 配置了Jackson的JsonInclude.Include枚举中的一个值。</span><br><span class="line">spring.jackson.serialization-inclusion&#x3D; </span><br><span class="line"># 格式化日期时使用的时区。 例如&#96;America &#x2F; Los_Angeles&#96;</span><br><span class="line">spring.jackson.time-zone&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># Jersey 配置</span><br><span class="line"># 作为应用程序的基本URI的路径。 如果指定，则覆盖“@ApplicationPath”的值。</span><br><span class="line">spring.jersey.application-path&#x3D; </span><br><span class="line"># jersey过滤器链顺序。</span><br><span class="line">spring.jersey.filter.order&#x3D; 0</span><br><span class="line">#  init参数传递到Jersey通过servlet或过滤器。</span><br><span class="line">spring.jersey.init.*&#x3D; </span><br><span class="line"># jersey整合型。可以是“servlet”也可以是“filter”。</span><br><span class="line">spring.jersey.type&#x3D; servlet</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># spring 视图分解器 配置</span><br><span class="line"># 启用后退解析支持。</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.enable-fallback&#x3D; false</span><br><span class="line"># 启用设备视图解析器。</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.enabled&#x3D; false</span><br><span class="line"># 前缀，用于查看移动设备的名称。</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.mobile-prefix&#x3D; mobile&#x2F;</span><br><span class="line"># 后缀，附加到查看移动设备的名称。</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.mobile-suffix&#x3D; </span><br><span class="line"># 前缀，用于查看普通设备的名称。</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.normal-prefix&#x3D; </span><br><span class="line"># 后缀，附加到查看普通设备的名称。</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.normal-suffix&#x3D; </span><br><span class="line"># 前缀，用于查看平板设备的名称。</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.tablet-prefix&#x3D; tablet&#x2F;</span><br><span class="line"># 后缀，附加到查看平板电脑设备的名称。</span><br><span class="line">spring.mobile.devicedelegatingviewresolver.tablet-suffix&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 移动网站首选项 （站点首选项自动配置）</span><br><span class="line"># 启用SitePreferenceHandler。</span><br><span class="line">spring.mobile.sitepreference.enabled&#x3D; true</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># MUSTACHE模板（Mustache AutoConfiguration）</span><br><span class="line"># 启用模板缓存。</span><br><span class="line">spring.mustache.cache&#x3D; false</span><br><span class="line"># 模板编码。</span><br><span class="line">spring.mustache.charset&#x3D; UTF-8</span><br><span class="line"># 检查模板位置是否存在。</span><br><span class="line">spring.mustache.check-template-location&#x3D; true</span><br><span class="line"># Content-Type值</span><br><span class="line">spring.mustache.content-type&#x3D; text&#x2F;html</span><br><span class="line"># 启用此技术的MVC视图分辨率。</span><br><span class="line">spring.mustache.enabled&#x3D; true</span><br><span class="line"># 前缀应用于模板名称。</span><br><span class="line">spring.mustache.prefix&#x3D; classpath:&#x2F;templates&#x2F;</span><br><span class="line"># 后缀应用于模板名称。</span><br><span class="line">spring.mustache.suffix&#x3D; .html</span><br><span class="line"># 可以解决的视图名称的白名单。</span><br><span class="line">spring.mustache.view-names&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># SPRING MVC (Web Mvc 配置)</span><br><span class="line"># 异步请求处理超时之前的时间量（以毫秒为单位）。</span><br><span class="line">spring.mvc.async.request-timeout&#x3D; </span><br><span class="line"># 要使用的日期格式。 例如&#96;dd &#x2F; MM &#x2F; yyyy&#96;。</span><br><span class="line">spring.mvc.date-format&#x3D; </span><br><span class="line"># 发送TRACE请求到FrameworkServlet doService方法。</span><br><span class="line">spring.mvc.dispatch-trace-request&#x3D; false</span><br><span class="line"># 发送OPTIONS请求到FrameworkServlet doService方法。</span><br><span class="line">spring.mvc.dispatch-options-request&#x3D; false</span><br><span class="line"># 启用favicon.ico的解析。</span><br><span class="line">spring.mvc.favicon.enabled&#x3D; true</span><br><span class="line"># 如果在重定向方案期间应该忽略“默认”模型的内容。</span><br><span class="line">spring.mvc.ignore-default-model-on-redirect&#x3D; true</span><br><span class="line"># 要使用的区域设置。</span><br><span class="line">spring.mvc.locale&#x3D; </span><br><span class="line"># 将文件扩展名映射到内容协商的媒体类型。</span><br><span class="line">spring.mvc.media-types.*&#x3D; </span><br><span class="line"># 消息代码格式策略。 例如&#96;PREFIX_ERROR_CODE&#96;。</span><br><span class="line">spring.mvc.message-codes-resolver-format&#x3D; </span><br><span class="line"># 用于静态资源的路径模式。</span><br><span class="line">spring.mvc.static-path-pattern&#x3D; &#x2F;**</span><br><span class="line"># 如果没有发现处理程序来处理请求，则应抛出“NoHandlerFoundException”。</span><br><span class="line">spring.mvc.throw-exception-if-no-handler-found&#x3D; false</span><br><span class="line"># Spring MVC视图前缀。</span><br><span class="line">spring.mvc.view.prefix&#x3D; </span><br><span class="line"># Spring MVC视图后缀。</span><br><span class="line">spring.mvc.view.suffix&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #SPRING RESOURCES HANDLING（ResourceProperties）资源处理</span><br><span class="line">spring.resources.add-mappings &#x3D; true #启用默认资源处理。</span><br><span class="line">spring.resources.cache-period &#x3D; #由资源处理程序提供的资源的缓存期，以秒为单位。</span><br><span class="line">spring.resources.chain.cache &#x3D; true #在资源链中启用缓存。</span><br><span class="line">spring.resources.chain.enabled &#x3D; #启用Spring资源处理链。默认情况下禁用，除非启用了至少一个策略。</span><br><span class="line">spring.resources.chain.html-application-cache &#x3D; false #启用HTML5应用程序缓存清单重写。</span><br><span class="line">spring.resources.chain.strategy.content.enabled &#x3D; false #启用内容版本策略。</span><br><span class="line">spring.resources.chain.strategy.content.paths &#x3D; &#x2F; ** #应用于版本策略的模式的逗号分隔列表。</span><br><span class="line">spring.resources.chain.strategy.fixed.enabled &#x3D; false #启用固定版本策略。</span><br><span class="line">spring.resources.chain.strategy.fixed.paths &#x3D; #应用于版本策略的逗号分隔的模式列表。</span><br><span class="line">spring.resources.chain.strategy.fixed.version &#x3D; #用于版本策略的版本字符串。</span><br><span class="line">spring.resources.static-locations &#x3D; classpath：&#x2F; META-INF &#x2F; resources &#x2F;，classpath：&#x2F; resources &#x2F;，classpath：&#x2F; static &#x2F;，classpath：&#x2F; public &#x2F; #静态资源的位置。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #SPRING SOCIAL（SocialWebAutoConfiguration）集群</span><br><span class="line">spring.social.auto-connection-views &#x3D; false #启用支持的提供程序的连接状态视图。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #SPRING SOCIAL FACEBOOK（FacebookAutoConfiguration）</span><br><span class="line">spring.social.facebook.app-id &#x3D; #您的应用程序的Facebook应用程序ID</span><br><span class="line">spring.social.facebook.app-secret &#x3D; #你的应用程序的Facebook应用程序密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #SPRING SOCIAL LINKEDIN（LinkedInAutoConfiguration）</span><br><span class="line">spring.social.linkedin.app-id &#x3D; #您的应用程序的LinkedIn应用程序ID</span><br><span class="line">spring.social.linkedin.app-secret &#x3D; #您的应用程序的LinkedIn App Secret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #SPRING SOCIAL TWITTER（TwitterAutoConfiguration）</span><br><span class="line">spring.social.twitter.app-id &#x3D; #你的应用程序的Twitter应用程序ID</span><br><span class="line">spring.social.twitter.app-secret &#x3D; #你的应用程序的Twitter App Secret</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #THYMELEAF Thymeleaf模板引擎配置</span><br><span class="line">spring.thymeleaf.cache &#x3D; true #启用模板缓存。</span><br><span class="line">spring.thymeleaf.check-template-location &#x3D; true #检查模板位置是否存在。</span><br><span class="line">spring.thymeleaf.content-type &#x3D; text &#x2F; html #Content-Type值。</span><br><span class="line">spring.thymeleaf.enabled &#x3D; true #启用MVC Thymeleaf视图分辨率。</span><br><span class="line">spring.thymeleaf.encoding &#x3D; UTF-8 #模板编码。</span><br><span class="line">spring.thymeleaf.excluded-view-names &#x3D; #应该从解决方案中排除的视图名称的逗号分隔列表。</span><br><span class="line">spring.thymeleaf.mode &#x3D; HTML5 #应用于模板的模板模式。另请参见StandardTemplateModeHandlers。</span><br><span class="line">spring.thymeleaf.prefix &#x3D; classpath：&#x2F; templates &#x2F; #在构建URL时预先查看名称的前缀。</span><br><span class="line">spring.thymeleaf.suffix &#x3D; .html #构建URL时附加查看名称的后缀。</span><br><span class="line">spring.thymeleaf.template-resolver-order &#x3D; #链中模板解析器的顺序。</span><br><span class="line">spring.thymeleaf.view-names &#x3D; #可以解析的视图名称的逗号分隔列表。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #VELOCITY TEMPLATES（VelocityAutoConfiguration）</span><br><span class="line">spring.velocity.allow-request-override &#x3D; false #设置是否允许HttpServletRequest属性覆盖（隐藏）控制器生成的同名的模型属性。</span><br><span class="line">spring.velocity.allow-session-override &#x3D; false #设置是否允许HttpSession属性重写（隐藏）控制器生成的同名的模型属性。</span><br><span class="line">spring.velocity.cache &#x3D; #启用模板缓存。</span><br><span class="line">spring.velocity.charset &#x3D; UTF-8 #模板编码。</span><br><span class="line">spring.velocity.check-template-location &#x3D; true #检查模板位置是否存在。</span><br><span class="line">spring.velocity.content-type &#x3D; text &#x2F; html #Content-Type值。</span><br><span class="line">spring.velocity.date-tool-attribute &#x3D; #在视图的Velocity上下文中公开的DateTool辅助对象的名称。</span><br><span class="line">spring.velocity.enabled &#x3D; true #启用此技术的MVC视图分辨率。</span><br><span class="line">spring.velocity.expose-request-attributes &#x3D; false #设置在与模板合并之前是否应将所有请求属性添加到模型中。</span><br><span class="line">spring.velocity.expose-session-attributes &#x3D; false #设置在与模板合并之前是否应将所有HttpSession属性添加到模型中。</span><br><span class="line">spring.velocity.expose-spring-macro-helpers &#x3D; true #设置是否公开一个RequestContext供Spring Spring的宏库使用，名称为“springMacroRequestContext”。</span><br><span class="line">spring.velocity.number-tool-attribute &#x3D; #在视图的Velocity上下文中公开的NumberTool帮助对象的名称。</span><br><span class="line">spring.velocity.prefer-file-system-access &#x3D; true #首选文件系统访问模板加载。文件系统访问可以对模板更改进行热检测。</span><br><span class="line">spring.velocity.prefix &#x3D; #前缀，用于在构建URL时查看名称。</span><br><span class="line">spring.velocity.properties。* &#x3D; #附加速度属性。</span><br><span class="line">spring.velocity.request-context-attribute &#x3D; #所有视图的RequestContext属性的名称。</span><br><span class="line">spring.velocity.resource-loader-path &#x3D; classpath：&#x2F; templates &#x2F; #模板路径。</span><br><span class="line">spring.velocity.suffix &#x3D; .vm #构建URL时附加到查看名称的后缀。</span><br><span class="line">spring.velocity.toolbox-config-location &#x3D; #Velocity Toolbox配置位置。例如&#96;&#x2F; WEB-INF &#x2F; toolbox.xml&#39;</span><br><span class="line">spring.velocity.view-names &#x3D; #可以解决的视图名称的白名单。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #----------------------------------------</span><br><span class="line"> #安全属性</span><br><span class="line"> #----------------------------------------</span><br><span class="line"> #SECURITY（SecurityProperties）</span><br><span class="line">security.basic.authorize-mode &#x3D; role #应用安全授权模式。</span><br><span class="line">security.basic.enabled &#x3D; true #启用基本身份验证。</span><br><span class="line">security.basic.path &#x3D; &#x2F; ** #安全路径的逗号分隔列表。</span><br><span class="line">security.basic.realm &#x3D; Spring #HTTP基本的领域名称。</span><br><span class="line">security.enable-csrf &#x3D; false #启用跨站点请求伪造支持。</span><br><span class="line">security.filter-order &#x3D; 0 #安全过滤器连锁订单。</span><br><span class="line">security.headers.cache &#x3D; true #启用缓存控制HTTP头。</span><br><span class="line">security.headers.content-type &#x3D; true# 启用“X-Content-Type-Options”头。</span><br><span class="line">security.headers.frame &#x3D; true #启用“X-Frame-Options”标题。</span><br><span class="line">security.headers.hsts &#x3D; # HTTP严格传输安全（HSTS）模式（无，域，全部）。</span><br><span class="line">security.headers.xss &#x3D; true #启用跨站点脚本（XSS）保护。</span><br><span class="line">security.ignored &#x3D; #从默认安全路径中排除的路径的逗号分隔列表。</span><br><span class="line">security.require-ssl &#x3D; false #为所有请求启用安全通道。</span><br><span class="line">security.sessions &#x3D; stateless #会话创建策略（永远不会，if_required，无状态）。</span><br><span class="line">security.user.name &#x3D; user #默认用户名。</span><br><span class="line">security.user.password &#x3D; #默认用户名的密码。默认情况下，启动时会记录随机密码。</span><br><span class="line">security.user.role &#x3D; USER #为默认用户名授予角色。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #SECURITY OAUTH2 CLIENT（OAuth2ClientProperties</span><br><span class="line">security.oauth2.client.client-id &#x3D; #OAuth2客户端ID。</span><br><span class="line">security.oauth2.client.client-secret &#x3D; #OAuth2客户机密码。默认生成随机密码</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #SECURITY OAUTH2 RESOURCES（ResourceServerProperties</span><br><span class="line">security.oauth2.resource.id &#x3D; #资源的标识符。</span><br><span class="line">security.oauth2.resource.jwt.key-uri &#x3D; #JWT令牌的URI。如果值不可用并且密钥是公共的，可以设置。</span><br><span class="line">security.oauth2.resource.jwt.key-value &#x3D; #JWT令牌的验证密钥。可以是对称秘密或PEM编码的RSA公钥。</span><br><span class="line">security.oauth2.resource.prefer-token-info &#x3D; true #使用令牌信息，可以设置为false以使用用户信息。</span><br><span class="line">security.oauth2.resource.service-id &#x3D; resource #</span><br><span class="line">security.oauth2.resource.token-info-uri &#x3D; #令牌解码端点的URI。</span><br><span class="line">security.oauth2.resource.token-type &#x3D; #使用userInfoUri时发送的令牌类型。</span><br><span class="line">security.oauth2.resource.user-info-uri &#x3D; #用户端点的URI。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> #SECURITY OAUTH2 SSO（OAuth2SsoProperties</span><br><span class="line">security.oauth2.sso.filter-order &#x3D; #如果不提供显式的WebSecurityConfigurerAdapter，则应用过滤器顺序</span><br><span class="line">security.oauth2.sso.login-path &#x3D; &#x2F; login #登录页面的路径，即触发重定向到OAuth2授权服务器的路径</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># DATA PROPERTIES 数据性能</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># FLYWAY (FlywayProperties)</span><br><span class="line">flyway.baseline-description &#x3D; #</span><br><span class="line">flyway.baseline-version &#x3D; 1 #版本开始迁移</span><br><span class="line">flyway.baseline-on-migrate &#x3D; #</span><br><span class="line">flyway.check-location &#x3D; false #检查迁移脚本位置是否存在。</span><br><span class="line">flyway.clean-on-validation-error &#x3D; #</span><br><span class="line">flyway.enabled &#x3D; true #启用飞行路线。</span><br><span class="line">flyway.encoding &#x3D; #</span><br><span class="line">flyway.ignore-failed-future-migration &#x3D; #</span><br><span class="line">flyway.init-sqls &#x3D; #执行SQL语句，以便在获取连接后立即初始化连接。</span><br><span class="line">flyway.locations &#x3D; classpath：db &#x2F; migration #迁移脚本的位置</span><br><span class="line">flyway.out-of-order &#x3D; #如果您希望Flyway创建自己的DataSource，则需要使用#path密码</span><br><span class="line">flyway.placeholder-prefix &#x3D; #</span><br><span class="line">flyway.placeholder-replacement &#x3D; #</span><br><span class="line">flyway.placeholder-suffix &#x3D; #</span><br><span class="line">flyway.placeholders。* &#x3D; #</span><br><span class="line">flyway.schemas &#x3D; #schemas来更新</span><br><span class="line">flyway.sql-migration-prefix &#x3D; V #</span><br><span class="line">flyway.sql-migration-separator &#x3D; #</span><br><span class="line">flyway.sql-migration-suffix &#x3D; .sql #</span><br><span class="line">flyway.table &#x3D; #</span><br><span class="line">flyway.url &#x3D; #要迁移的数据库的JDBC url。如果未设置，则使用主配置的数据源。</span><br><span class="line">flyway.user &#x3D; #登录要迁移的数据库的用户。</span><br><span class="line">flyway.validate-on-migrate &#x3D; #</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># LIQUIBASE (LiquibaseProperties)</span><br><span class="line">liquibase.change-log &#x3D; classpath：&#x2F;db&#x2F;changelog&#x2F;db.changelog-master.yaml #更改日志配置路径。</span><br><span class="line">liquibase.check-change-log-location &#x3D; true #检查更改日志位置是否存在。</span><br><span class="line">liquibase.contexts &#x3D; #使用逗号分隔的运行时上下文列表。</span><br><span class="line">liquibase.default-schema &#x3D; #默认数据库模式。</span><br><span class="line">liquibase.drop-first &#x3D; false #首先删除数据库模式。</span><br><span class="line">liquibase.enabled &#x3D; true #启用liquidibase支持。</span><br><span class="line">liquibase.labels &#x3D; #使用逗号分隔的运行时标签列表。</span><br><span class="line">liquibase.parameters。* &#x3D; #更改日志参数。</span><br><span class="line">liquibase.password &#x3D; #登录要迁移的数据库的密码。</span><br><span class="line">liquibase.url &#x3D; #要迁移的数据库的JDBC url。 如果未设置，则使用主配置的数据源。</span><br><span class="line">liquibase.user &#x3D; #登录要迁移的数据库的用户。</span><br><span class="line"></span><br><span class="line"># DAO (PersistenceExceptionTranslationAutoConfiguration)</span><br><span class="line">spring.dao.exceptiontranslation.enabled&#x3D; true # 启用持久异常翻译后处理器。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># CASSANDRA (CassandraProperties)</span><br><span class="line">spring.data.cassandra.cluster-name &#x3D; #Cassandra群集的名称。</span><br><span class="line">spring.data.cassandra.compression &#x3D; #由Cassandra二进制协议支持的压缩。</span><br><span class="line">spring.data.cassandra.connect-timeout-millis &#x3D; #套接字选项：连接超时。</span><br><span class="line">spring.data.cassandra.consistency-level &#x3D; #查询一致性级别。</span><br><span class="line">spring.data.cassandra.contact-points &#x3D; localhost #集群节点地址的逗号分隔列表。</span><br><span class="line">spring.data.cassandra.fetch-size &#x3D; #查询默认的抓取大小。</span><br><span class="line">spring.data.cassandra.keyspace-name &#x3D; #要使用的密钥空间名称。</span><br><span class="line">spring.data.cassandra.load-balancing-policy &#x3D; #负载均衡策略的类名。</span><br><span class="line">spring.data.cassandra.port &#x3D; #Cassandra服务器端口。</span><br><span class="line">spring.data.cassandra.password &#x3D; #登录服务器的密码。</span><br><span class="line">spring.data.cassandra.read-timeout-millis &#x3D; #套接字选项：读取超时。</span><br><span class="line">spring.data.cassandra.reconnection-policy &#x3D; #重新连接策略类。</span><br><span class="line">spring.data.cassandra.retry-policy &#x3D; #重试策略的类名。</span><br><span class="line">spring.data.cassandra.serial-consistency-level &#x3D; #查询串行一致性级别。</span><br><span class="line">spring.data.cassandra.ssl &#x3D; false #启用SSL支持。</span><br><span class="line">spring.data.cassandra.username &#x3D; #登录用户的服务器。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ELASTICSEARCH (ElasticsearchProperties)</span><br><span class="line">spring.data.elasticsearch.cluster-name &#x3D; elasticsearch #弹性搜索集群名称。</span><br><span class="line">spring.data.elasticsearch.cluster-nodes &#x3D; #集群节点地址的逗号分隔列表。 如果未指定，则启动客户端节点。</span><br><span class="line">spring.data.elasticsearch.properties。* &#x3D; #用于配置客户端的其他属性。</span><br><span class="line">spring.data.elasticsearch.repositories.enabled &#x3D; true #启用Elasticsearch存储库。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># MONGODB (MongoProperties)</span><br><span class="line">spring.data.mongodb.authentication-database &#x3D; #验证数据库名称。</span><br><span class="line">spring.data.mongodb.database &#x3D; test #数据库名称。</span><br><span class="line">spring.data.mongodb.field-naming-strategy &#x3D; #要使用的FieldNamingStrategy的完全限定名称。</span><br><span class="line">spring.data.mongodb.grid-fs-database &#x3D; #GridFS数据库名称。</span><br><span class="line">spring.data.mongodb.host &#x3D; localhost #Mongo服务器主机。</span><br><span class="line">spring.data.mongodb.password &#x3D; #登录mongo服务器的密码。</span><br><span class="line">spring.data.mongodb.port &#x3D; 27017 #Mongo服务器端口。</span><br><span class="line">spring.data.mongodb.repositories.enabled &#x3D; true #启用Mongo存储库。</span><br><span class="line">spring.data.mongodb.uri &#x3D; mongodb：&#x2F;&#x2F; localhost &#x2F; test #Mongo数据库URI。 设置时，主机和端口将被忽略。</span><br><span class="line">spring.data.mongodb.username &#x3D; #登录mongo服务器的用户。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># DATA REST (RepositoryRestProperties)</span><br><span class="line">spring.data.rest.base-path &#x3D; #由Spring Data REST用于公开存储库资源的基本路径。</span><br><span class="line">spring.data.rest.default-page-size &#x3D; #页面的默认大小。</span><br><span class="line">spring.data.rest.enable-enum-translation &#x3D; #通过Spring Data REST默认资源包启用枚举值转换。</span><br><span class="line">spring.data.rest.limit-param-name &#x3D; #指示一次返回多少结果的URL查询字符串参数的名称。</span><br><span class="line">spring.data.rest.max-page-size &#x3D; #最大页面大小。</span><br><span class="line">spring.data.rest.page-param-name &#x3D; #指示要返回的页面的URL查询字符串参数的名称。</span><br><span class="line">spring.data.rest.return-body-on-create &#x3D; #创建一个实体后返回响应体。</span><br><span class="line">spring.data.rest.return-body-on-update &#x3D; #更新实体后返回响应体。</span><br><span class="line">spring.data.rest.sort-param-name &#x3D; #指示排序结果的方向的URL查询字符串参数的名称。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># SOLR (SolrProperties)</span><br><span class="line">spring.data.solr.host &#x3D; http:&#x2F;&#x2F;127.0.0.1:8983&#x2F;solr #Solr主机。 如果设置了“zk-host”，则被忽略。</span><br><span class="line">spring.data.solr.repositories.enabled &#x3D; true #启用Solr存储库。</span><br><span class="line">spring.data.solr.zk-host &#x3D; #ZooKeeper主机地址，格式为HOST：PORT。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 数据源 配置 (DataSourceAutoConfiguration &amp; DataSourceProperties)</span><br><span class="line">spring.datasource.continue-on-error &#x3D; false #初始化数据库时发生错误时不要停止。</span><br><span class="line">spring.datasource.data &#x3D; #Data（DML）脚本资源引用。</span><br><span class="line">spring.datasource.driver-class-name &#x3D; #JDBC驱动程序的完全限定名称。默认情况下，根据URL自动检测。</span><br><span class="line">spring.datasource.initialize &#x3D; true #使用&#39;data.sql&#39;填充数据库。</span><br><span class="line">spring.datasource.jmx-enabled &#x3D; false #启用JMX支持（如果由底层池提供）。</span><br><span class="line">spring.datasource.jndi-name &#x3D; #数据源的JNDI位置。设置时，类，网址，用户名和密码将被忽略。</span><br><span class="line">spring.datasource.max-active &#x3D; #例如100</span><br><span class="line">spring.datasource.max-idle &#x3D; #例如8</span><br><span class="line">spring.datasource.max等待&#x3D;</span><br><span class="line">spring.datasource.min-evictable空闲时间-米利斯&#x3D;</span><br><span class="line">spring.datasource.min-idle &#x3D; 8</span><br><span class="line">spring.datasource.name &#x3D; testdb #数据源的名称。</span><br><span class="line">spring.datasource.password &#x3D; #登录数据库的密码。</span><br><span class="line">spring.datasource.platform &#x3D; all #在资源模式（schema - $ &#123;platform&#125; .sql）中使用的平台。</span><br><span class="line">spring.datasource.schema &#x3D; #Schema（DDL）脚本资源引用。</span><br><span class="line">spring.datasource.separator &#x3D;;  #语句分隔符在SQL初始化脚本中。</span><br><span class="line">spring.datasource.sql-script-encoding &#x3D; #SQL脚本编码。</span><br><span class="line">spring.datasource.test-on-borrow &#x3D; #例如&#96;false&#96;</span><br><span class="line">spring.datasource.test-on-return &#x3D; #例如&#96;false&#96;</span><br><span class="line">spring.datasource.test-while-idle &#x3D; #</span><br><span class="line">spring.datasource.time-between-eviction-runs-millis &#x3D; 1</span><br><span class="line">spring.datasource.type &#x3D; #要使用的连接池实现的完全限定名称。默认情况下，它是从类路径自动检测的。</span><br><span class="line">spring.datasource.url &#x3D; #数据库的JDBC url。</span><br><span class="line">spring.datasource.username&#x3D; </span><br><span class="line">spring.datasource.validation-query&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># H2 Web Console (H2ConsoleProperties)  </span><br><span class="line">spring.h2.console.enabled &#x3D; false #启用控制台。</span><br><span class="line">spring.h2.console.path &#x3D; &#x2F; h2-console #控制台可用的路径。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JOOQ (JooqAutoConfiguration)</span><br><span class="line">spring.jooq.sql-dialect&#x3D;  # 与配置的数据源通信时使用的SQLDialect JOOQ。 例如&#96;POSTGRES&#96;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JPA (JpaBaseConfiguration, HibernateJpaAutoConfiguration)</span><br><span class="line">spring.data.jpa.repositories.enabled &#x3D; true #启用JPA存储库。</span><br><span class="line">spring.jpa.database &#x3D; #目标数据库进行操作，默认情况下自动检测。可以使用“databasePlatform”属性设置。</span><br><span class="line">spring.jpa.database-platform &#x3D; #要运行的目标数据库的名称，默认情况下自动检测。可以使用“数据库”枚举来设置。</span><br><span class="line">spring.jpa.generate-ddl &#x3D; false #启动时初始化模式。</span><br><span class="line">spring.jpa.hibernate.ddl-auto &#x3D; #DDL模式。这实际上是“hibernate.hbm2ddl.auto”属性的快捷方式。使用嵌入式数据库时默认为“创建删除”，否则为“否”。</span><br><span class="line">spring.jpa.hibernate.naming-strategy &#x3D; #命名策略完全限定名。</span><br><span class="line">spring.jpa.open-in-view &#x3D; true #注册OpenEntityManagerInViewInterceptor。将JPA EntityManager绑定到线程以进行请求的整个处理。</span><br><span class="line">spring.jpa.properties。* &#x3D; #在JPA提供程序上设置的其他本机属性。</span><br><span class="line">spring.jpa.show-sql &#x3D; false #启用SQL语句的日志记录。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JTA (JtaAutoConfiguration)</span><br><span class="line">spring.jta。* &#x3D; #技术特定配置</span><br><span class="line">spring.jta.log-dir &#x3D; #Transaction logs目录。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ATOMIKOS</span><br><span class="line">spring.jta.atomikos.connectionfactory.borrow-connection-timeout &#x3D; 30 #从池中借用连接的超时（以秒为单位）。</span><br><span class="line">spring.jta.atomikos.connectionfactory.ignore-session-transacted-flag &#x3D; true #创建会话时是否忽略事务标志。</span><br><span class="line">spring.jta.atomikos.connectionfactory.local-transaction-mode &#x3D; false #是否需要本地事务。</span><br><span class="line">spring.jta.atomikos.connectionfactory.maintenance-interval &#x3D; 60 #池的维护线程运行之间的时间（以秒为单位）。</span><br><span class="line">spring.jta.atomikos.connectionfactory.max-idle-time &#x3D; 60 #从池中清除连接之后的时间（以秒为单位）。</span><br><span class="line">spring.jta.atomikos.connectionfactory.max-lifetime &#x3D; 0 #在被破坏之前可以将连接合并的时间（以秒为单位）。 0表示无限制。</span><br><span class="line">spring.jta.atomikos.connectionfactory.max-pool-size &#x3D; 1 #池的最大大小。</span><br><span class="line">spring.jta.atomikos.connectionfactory.min-pool-size &#x3D; 1 #池的最小大小。</span><br><span class="line">spring.jta.atomikos.connectionfactory.reap-timeout &#x3D; 0 #借用连接的收获超时（以秒为单位）。 0表示无限制。</span><br><span class="line">spring.jta.atomikos.connectionfactory.unique-resource-name &#x3D; jmsConnectionFactory #用于在恢复期间标识资源的唯一名称。</span><br><span class="line">spring.jta.atomikos.datasource.borrow-connection-timeout &#x3D; 30 #从池中借出连接的超时（秒）。</span><br><span class="line">spring.jta.atomikos.datasource.default-isolation-level &#x3D; #池提供的连接的默认隔离级别。</span><br><span class="line">spring.jta.atomikos.datasource.login-timeout &#x3D; #用于建立数据库连接的超时（以秒为单位）。</span><br><span class="line">spring.jta.atomikos.datasource.maintenance-interval &#x3D; 60 #池的维护线程运行之间的时间（以秒为单位）。</span><br><span class="line">spring.jta.atomikos.datasource.max-idle-time &#x3D; 60 #从池中清除连接之后的时间（以秒为单位）。</span><br><span class="line">spring.jta.atomikos.datasource.max-lifetime &#x3D; 0 #在被破坏之前可以将连接合并的时间（以秒为单位）。 0表示无限制。</span><br><span class="line">spring.jta.atomikos.datasource.max-pool-size &#x3D; 1 #池的最大大小。</span><br><span class="line">spring.jta.atomikos.datasource.min-pool-size &#x3D; 1 #池的最小大小。</span><br><span class="line">spring.jta.atomikos.datasource.reap-timeout &#x3D; 0 #借用连接的收获超时（以秒为单位）。 0表示无限制。</span><br><span class="line">spring.jta.atomikos.datasource.test-query &#x3D; #用于在返回连接之前验证连接的SQL查询或语句。</span><br><span class="line">spring.jta.atomikos.datasource.unique-resource-name &#x3D; dataSource #用于在恢复期间识别资源的唯一名称。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># BITRONIX</span><br><span class="line">spring.jta.bitronix.connectionfactory.acquire-increment &#x3D; 1 #生成池时要创建的连接数。</span><br><span class="line">spring.jta.bitronix.connectionfactory.acquisition-interval &#x3D; 1 #在获取无效连接后再次尝试获取连接之前等待的时间（以秒为单位）。</span><br><span class="line">spring.jta.bitronix.connectionfactory.acquisition-timeout &#x3D; 30 #从池中获取连接的超时（以秒为单位）。</span><br><span class="line">spring.jta.bitronix.connectionfactory.allow-local-transactions &#x3D; true #事务管理器是否允许混合XA和非XA事务。</span><br><span class="line">spring.jta.bitronix.connectionfactory.apply-transaction-timeout &#x3D; false #当XAResource被登记时，是否应该设置事务超时。</span><br><span class="line">spring.jta.bitronix.connectionfactory.automatic-enlisting-enabled &#x3D; true #资源是否应该被自动登记和删除。</span><br><span class="line">spring.jta.bitronix.connectionfactory.cache-producer-consumer &#x3D; true #是否生产和消费者应该被缓存。</span><br><span class="line">spring.jta.bitronix.connectionfactory.defer-connection-release &#x3D; true #提供程序是否可以在同一连接上运行许多事务，并支持事务交织。</span><br><span class="line">spring.jta.bitronix.connectionfactory.ignore-recovery-failures &#x3D; false #是否应忽略恢复失败。</span><br><span class="line">spring.jta.bitronix.connectionfactory.max-idle-time &#x3D; 60 #从池中清除连接之后的时间（以秒为单位）。</span><br><span class="line">spring.jta.bitronix.connectionfactory.max-pool-size &#x3D; 10 #池的最大大小。 0表示无限制。</span><br><span class="line">spring.jta.bitronix.connectionfactory.min-pool-size &#x3D; 0 #池的最小大小。</span><br><span class="line">spring.jta.bitronix.connectionfactory.password &#x3D; #用于连接到JMS提供程序的密码。</span><br><span class="line">spring.jta.bitronix.connectionfactory.share-transaction-connections &#x3D; false #ACCESSIBLE状态中的连接是否可以在事务的上下文中共享。</span><br><span class="line">spring.jta.bitronix.connectionfactory.test-connections &#x3D; true #从池中获取连接是否应该进行测试。</span><br><span class="line">spring.jta.bitronix.connectionfactory.two-pc-ordering-position &#x3D; 1 #在两阶段提交期间该资源应该采取的位置（始终为Integer.MIN_VALUE，始终为Integer.MAX_VALUE）。</span><br><span class="line">spring.jta.bitronix.connectionfactory.unique-name &#x3D; jmsConnectionFactory #用于在恢复期间标识资源的唯一名称。</span><br><span class="line">spring.jta.bitronix.connectionfactory.use-tm-join &#x3D; true启动XAResource时是否应使用TMJOIN。</span><br><span class="line">spring.jta.bitronix.connectionfactory.user &#x3D; #用于连接到JMS提供者的用户。</span><br><span class="line">spring.jta.bitronix.datasource.acquire-increment &#x3D; 1 #生成池时要创建的连接数。</span><br><span class="line">spring.jta.bitronix.datasource.acquisition-interval &#x3D; 1 #在获取无效连接后再尝试获取连接之前等待的时间（以秒为单位）。</span><br><span class="line">spring.jta.bitronix.datasource.acquisition-timeout &#x3D; 30 #从池中获取连接的超时（以秒为单位）。</span><br><span class="line">spring.jta.bitronix.datasource.allow-local-transactions &#x3D; true #事务管理器是否允许混合XA和非XA事务。</span><br><span class="line">spring.jta.bitronix.datasource.apply-transaction-timeout &#x3D; false #当XAResource被登记时，是否应该设置事务超时。</span><br><span class="line">spring.jta.bitronix.datasource.automatic-enlisting-enabled &#x3D; true #资源是否应该被登记和自动删除。</span><br><span class="line">spring.jta.bitronix.datasource.cursor-holdability &#x3D; #连接的默认游标保持性。</span><br><span class="line">spring.jta.bitronix.datasource.defer-connection-release &#x3D; true #数据库是否可以在同一连接上运行许多事务，并支持事务交织。</span><br><span class="line">spring.jta.bitronix.datasource.enable-jdbc4-connection-test &#x3D; #从池中获取连接时是否调用Connection.isValid（）。</span><br><span class="line">spring.jta.bitronix.datasource.ignore-recovery-failures &#x3D; false #是否应忽略恢复失败。</span><br><span class="line">spring.jta.bitronix.datasource.isolation-level &#x3D; #连接的默认隔离级别。</span><br><span class="line">spring.jta.bitronix.datasource.local-auto-commit &#x3D; #本地事务的默认自动提交模式。</span><br><span class="line">spring.jta.bitronix.datasource.login-timeout &#x3D; #用于建立数据库连接的超时（以秒为单位）。</span><br><span class="line">spring.jta.bitronix.datasource.max-idle-time &#x3D; 60 #从池中清除连接之后的时间（以秒为单位）。</span><br><span class="line">spring.jta.bitronix.datasource.max-pool-size &#x3D; 10 #池的最大大小。 0表示无限制。</span><br><span class="line">spring.jta.bitronix.datasource.min-pool-size &#x3D; 0 #池的最小大小。</span><br><span class="line">spring.jta.bitronix.datasource.prepared-statement-cache-size &#x3D; 0 #准备好的语句高速缓存的目标大小。 0禁用缓存。</span><br><span class="line">spring.jta.bitronix.datasource.share-transaction-connections &#x3D; false #ACCESSIBLE状态下的连接是否可以在事务的上下文中共享。</span><br><span class="line">spring.jta.bitronix.datasource.test-query &#x3D; #用于在返回连接之前验证连接的SQL查询或语句。</span><br><span class="line">spring.jta.bitronix.datasource.two-pc-ordering-position &#x3D; 1 #在两阶段提交期间该资源应该采取的位置（始终为Integer.MIN_VALUE，始终为Integer.MAX_VALUE）。</span><br><span class="line">spring.jta.bitronix.datasource.unique-name &#x3D; dataSource #用于在恢复期间标识资源的唯一名称。</span><br><span class="line">spring.jta.bitronix.datasource.use-tm-join &#x3D; true启动XAResource时是否应使用TMJOIN。</span><br><span class="line"></span><br><span class="line"># EMBEDDED MONGODB (EmbeddedMongoProperties)</span><br><span class="line">spring.mongodb.embedded.features &#x3D; SYNC_DELAY #启用功能的逗号分隔列表。</span><br><span class="line">spring.mongodb.embedded.version &#x3D; 2.6.10 #Mongo使用版本。</span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># 整合属性</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"> #ACTIVEMQ（ActiveMQProperties）</span><br><span class="line">spring.activemq.broker-url &#x3D; #ActiveMQ代理的URL。 默认自动生成。 例如&#96;tcp：&#x2F;&#x2F; localhost：61616&#96;</span><br><span class="line">spring.activemq.in-memory &#x3D; true #指定默认代理URL是否应在内存中。 如果指定了一个显式代理，则被忽略。</span><br><span class="line">spring.activemq.password &#x3D; #登录密码的代理。</span><br><span class="line">spring.activemq.pooled &#x3D; false #指定是否创建PooledConnectionFactory而不是常规的ConnectionFactory。</span><br><span class="line">spring.activemq.user &#x3D; #代理登录用户。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ARTEMIS (ArtemisProperties)</span><br><span class="line">spring.artemis.embedded.cluster-password &#x3D; #群集密码。 默认情况下随机生成。</span><br><span class="line">spring.artemis.embedded.data-directory &#x3D; #日志文件目录。 如果持久性被关闭，则不需要。</span><br><span class="line">spring.artemis.embedded.enabled &#x3D; true #如果Artemis服务器API可用，启用嵌入式模式。</span><br><span class="line">spring.artemis.embedded.persistent &#x3D; false #启用持久存储。</span><br><span class="line">spring.artemis.embedded.queues &#x3D; #启动时要创建的队列的逗号分隔列表。</span><br><span class="line">spring.artemis.embedded.server-id &#x3D; #服务器ID。 默认情况下，使用自动递增的计数器。</span><br><span class="line">spring.artemis.embedded.topics &#x3D; #启动时要创建的主题的逗号分隔列表。</span><br><span class="line">spring.artemis.host &#x3D; localhost #Artemis代理主机。</span><br><span class="line">spring.artemis.mode &#x3D; #Artemis部署模式，默认情况下自动检测。 可以显式设置为“native”或“embedded”。</span><br><span class="line">spring.artemis.port &#x3D; 61616 #Artemis 中间件端口。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># SPRING BATCH(Batch 配置)</span><br><span class="line">spring.batch.initializer.enabled &#x3D; true #如果需要，在启动时创建所需的批处理表。</span><br><span class="line">spring.batch.job.enabled &#x3D; true #在启动时执行上下文中的所有Spring批处理作业。</span><br><span class="line">spring.batch.job.names &#x3D; #在启动时执行的作业名称的逗号分隔列表（例如&#96;job1，job2&#96;）。 默认情况下，执行在上下文中找到的所有作业。</span><br><span class="line">spring.batch.schema &#x3D; classpath：org &#x2F; springframework &#x2F; batch &#x2F; core &#x2F; schema - @@ platform @@。sql #用于初始化数据库模式的SQL文件的路径。</span><br><span class="line">spring.batch.table-prefix &#x3D; #所有批次元数据表的表前缀。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># HORNETQ (HornetQ 配置)</span><br><span class="line">spring.hornetq.embedded.cluster-password &#x3D; #集群密码。 默认情况下随机生成。</span><br><span class="line">spring.hornetq.embedded.data-directory &#x3D; #日志文件目录。 如果持久性被关闭，则不需要。</span><br><span class="line">spring.hornetq.embedded.enabled &#x3D; true #如果HornetQ服务器API可用，启用嵌入式模式。</span><br><span class="line">spring.hornetq.embedded.persistent &#x3D; false #启用持久存储。</span><br><span class="line">spring.hornetq.embedded.queues &#x3D; #启动时要创建的队列的逗号分隔列表。</span><br><span class="line">spring.hornetq.embedded.server-id &#x3D; #服务器ID。 默认情况下，使用自动递增的计数器。</span><br><span class="line">spring.hornetq.embedded.topics &#x3D; #在启动时创建的主题的逗号分隔列表。</span><br><span class="line">spring.hornetq.host &#x3D; localhost #HornetQ代理主机。</span><br><span class="line">spring.hornetq.mode &#x3D; #HornetQ部署模式，默认情况下自动检测。 可以显式设置为“native”或“embedded”。</span><br><span class="line">spring.hornetq.port &#x3D; 5445 #HornetQ代理端口。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JMS (Jms 配置)</span><br><span class="line"># 连接工厂JNDI名称。 设置时，优先于其他连接工厂自动配置。</span><br><span class="line">spring.jms.jndi-name&#x3D; </span><br><span class="line"># 容器的确认模式。 默认情况下，监听器被自动确认处理。</span><br><span class="line">spring.jms.listener.acknowledge-mode&#x3D; </span><br><span class="line"># 启动时自动启动容器。</span><br><span class="line">spring.jms.listener.auto-startup&#x3D; true</span><br><span class="line"># 最小并发消费者数。</span><br><span class="line">spring.jms.listener.concurrency&#x3D; </span><br><span class="line"># 最大并发消费者数。</span><br><span class="line">spring.jms.listener.max-concurrency&#x3D; </span><br><span class="line"># 指定默认的目的地类型是否为主题。</span><br><span class="line">spring.jms.pub-sub-domain&#x3D; false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># RABBIT (Rabbit 配置)</span><br><span class="line"># 客户端应连接到的逗号分隔的地址列表。</span><br><span class="line">spring.rabbitmq.addresses &#x3D; </span><br><span class="line">spring.rabbitmq.dynamic &#x3D;  true # 创建一个AmqpAdmin bean。</span><br><span class="line">spring.rabbitmq.host &#x3D;  localhost# RabbitMQ主机。</span><br><span class="line">spring.rabbitmq.listener.acknowledge-mode &#x3D; # 容器的确认模式。</span><br><span class="line">spring.rabbitmq.listener.auto-startup &#x3D;  true# 启动时自动启动容器。</span><br><span class="line">spring.rabbitmq.listener.concurrency &#x3D; # 最少消费者数。</span><br><span class="line">spring.rabbitmq.listener.max-concurrency &#x3D; # 最大消费者数。</span><br><span class="line">spring.rabbitmq.listener.prefetch &#x3D; # 在单个请求中要处理的消息数。它应该大于或等于事务大小（如果使用）。</span><br><span class="line">spring.rabbitmq.listener.transaction-size &#x3D; # 在事务中要处理的消息数。为了获得最佳结果，它应该小于或等于预取计数。</span><br><span class="line">spring.rabbitmq.password &#x3D; # 登录以对代理进行身份验证。</span><br><span class="line">spring.rabbitmq.port &#x3D;  5672# RabbitMQ端口。</span><br><span class="line">spring.rabbitmq.requested-heartbeat &#x3D; # 请求的心跳超时，以秒为单位;零为无。</span><br><span class="line">spring.rabbitmq.ssl.enabled &#x3D;  false# 启用SSL支持。</span><br><span class="line">spring.rabbitmq.ssl.key-store &#x3D;  # 保存SSL证书的密钥存储区的路径。</span><br><span class="line">spring.rabbitmq.ssl.key-store-password &#x3D; # 用于访问密钥库的密码。</span><br><span class="line">spring.rabbitmq.ssl.trust-store &#x3D; # 保存SSL证书的Trust存储。</span><br><span class="line">spring.rabbitmq.ssl.trust-store-password &#x3D; # 用于访问信任存储的密码。</span><br><span class="line">spring.rabbitmq.username &#x3D; # 登录用户对代理进行身份验证。</span><br><span class="line">spring.rabbitmq.virtual-host &#x3D; # 连接到代理时使用的虚拟主机。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 端点配置（EndpointCorsProperties）</span><br><span class="line"># 设置是否支持凭据。 未设置时，不支持凭据。</span><br><span class="line">endpoints.cors.allow-credentials&#x3D; </span><br><span class="line"># 在请求中允许的头文件逗号分隔列表。 &#39;*&#39;允许所有标题。</span><br><span class="line">endpoints.cors.allowed-headers&#x3D; </span><br><span class="line"># 逗号分隔的允许的方法列表。 &#39;*&#39;允许所有方法。</span><br><span class="line">endpoints.cors.allowed-methods&#x3D; GET</span><br><span class="line"># 逗号分隔的起始列表允许。 &#39;*&#39;允许所有来源。 未设置时，禁用CORS支持。</span><br><span class="line">endpoints.cors.allowed-origins&#x3D; </span><br><span class="line"># 包含在响应中的标题的逗号分隔列表。</span><br><span class="line">endpoints.cors.exposed-headers&#x3D; </span><br><span class="line"># 客户端可以缓存飞行前请求的响应时间（秒）。</span><br><span class="line">endpoints.cors.max-age&#x3D; 1800</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JMX ENDPOINT (EndpointMBeanExportProperties) （端点MBean导出属性）</span><br><span class="line"># JMX域名。 如果设置为&#39;spring.jmx.default-domain&#39;的值初始化。</span><br><span class="line">endpoints.jmx.domain&#x3D; </span><br><span class="line"># 启用所有端点的JMX导出。</span><br><span class="line">endpoints.jmx.enabled&#x3D; true</span><br><span class="line"># 附加静态属性以附加到表示端点的MBean的所有对象名称。</span><br><span class="line">endpoints.jmx.static-names&#x3D; </span><br><span class="line"># 确保在发生冲突时修改ObjectNames。</span><br><span class="line">endpoints.jmx.unique-names&#x3D; false</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># JOLOKIA  JOLOKIA 配置</span><br><span class="line"># 见Jolokia手册</span><br><span class="line">jolokia.config.*&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 管理HTTP服务器（管理服务器属性）</span><br><span class="line"># 在每个响应中添加“X-Application-Context”HTTP头。</span><br><span class="line">management.add-application-context-header&#x3D; true</span><br><span class="line"># 管理端点应绑定到的网络地址。</span><br><span class="line">management.address&#x3D; </span><br><span class="line"># 管理端点上下文路径。 例如&#96;&#x2F; actuator&#96;</span><br><span class="line">management.context-path&#x3D; </span><br><span class="line"># 管理端点HTTP端口。 默认使用与应用程序相同的端口。</span><br><span class="line">management.port&#x3D; </span><br><span class="line"># 启用安全性</span><br><span class="line">management.security.enabled&#x3D; true</span><br><span class="line"># 访问管理端点所需的角色。</span><br><span class="line">management.security.role&#x3D; ADMIN</span><br><span class="line"># 会话创建策略使用（always，never，if_required，stateless）（总是，永远，if_required，无状态）。</span><br><span class="line">management.security.sessions&#x3D; stateless</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># HEALTH INDICATORS (previously health.*)</span><br><span class="line"># 启用数据库运行状况检查</span><br><span class="line">management.health.db.enabled&#x3D; true</span><br><span class="line"># 启用默认的健康指标。</span><br><span class="line">management.health.defaults.enabled&#x3D; true</span><br><span class="line"># 启用磁盘空间运行状况检查。</span><br><span class="line">management.health.diskspace.enabled&#x3D; true</span><br><span class="line"># 用于计算可用磁盘空间的路径。</span><br><span class="line">management.health.diskspace.path&#x3D; </span><br><span class="line"># 应该可用的最小磁盘空间（以字节为单位）。</span><br><span class="line">management.health.diskspace.threshold&#x3D; 0</span><br><span class="line"># 启用弹性搜索健康检查。</span><br><span class="line">management.health.elasticsearch.enabled&#x3D; true</span><br><span class="line"># 逗号分隔的索引名称。</span><br><span class="line">management.health.elasticsearch.indices&#x3D; </span><br><span class="line"># 等待群集响应的时间（以毫秒为单位）。</span><br><span class="line">management.health.elasticsearch.response-timeout&#x3D; 100</span><br><span class="line"># 启用JMS健康检查。</span><br><span class="line">management.health.jms.enabled&#x3D; true</span><br><span class="line"># 启用邮件运行状况检查。</span><br><span class="line">management.health.mail.enabled&#x3D; true</span><br><span class="line"># 启用MongoDB健康检查。</span><br><span class="line">management.health.mongo.enabled&#x3D; true</span><br><span class="line"># 启用RabbitMQ运行状况检查。</span><br><span class="line">management.health.rabbit.enabled&#x3D; true</span><br><span class="line"># 启用Redis健康检查。</span><br><span class="line">management.health.redis.enabled&#x3D; true</span><br><span class="line"># 启用Solr运行状况检查。</span><br><span class="line">management.health.solr.enabled&#x3D; true</span><br><span class="line"># 按照严重性的顺序，以逗号分隔的健康状态列表。</span><br><span class="line">management.health.status.order&#x3D; DOWN, OUT_OF_SERVICE, UNKNOWN, UP</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># TRACING ((TraceProperties) 跟踪性能</span><br><span class="line"># 跟踪中包含的项目。</span><br><span class="line">management.trace.include&#x3D; request-headers,response-headers,errors</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 远程 shell配置</span><br><span class="line"># 验证类型。 根据环境自动检测。</span><br><span class="line">shell.auth&#x3D; simple</span><br><span class="line"># JAAS域。</span><br><span class="line">shell.auth.jaas.domain&#x3D; my-domain</span><br><span class="line"># 验证密钥的路径。 这应该指向一个有效的“.pem”文件。</span><br><span class="line">shell.auth.key.path&#x3D; </span><br><span class="line"># 登录用户。</span><br><span class="line">shell.auth.simple.user.name&#x3D; user</span><br><span class="line"># 登录用户的密码。</span><br><span class="line">shell.auth.simple.user.password&#x3D; </span><br><span class="line"># 登录到CRaSH控制台的所需的角色，以逗号分隔列表。</span><br><span class="line">shell.auth.spring.roles&#x3D; ADMIN</span><br><span class="line"># 用于查找命令的模式。</span><br><span class="line">shell.command-path-patterns&#x3D; classpath*:&#x2F;commands&#x2F;**,classpath*:&#x2F;crash&#x2F;commands&#x2F;**</span><br><span class="line"># 扫描更改并在必要时更新命令（以秒为单位）。</span><br><span class="line">shell.command-refresh-interval&#x3D; -1</span><br><span class="line"># 用于查找配置的模式。</span><br><span class="line">shell.config-path-patterns&#x3D; classpath*:&#x2F;crash&#x2F;*</span><br><span class="line"># 逗号分隔的要禁用的命令列表。</span><br><span class="line">shell.disabled-commands&#x3D; jpa*,jdbc*,jndi*</span><br><span class="line"># 禁用逗号分隔的插件列表。 默认情况下，根据环境禁用某些插件。</span><br><span class="line">shell.disabled-plugins&#x3D; </span><br><span class="line"># 用户被提示再次登录后的毫秒数。</span><br><span class="line">shell.ssh.auth-timeout &#x3D; </span><br><span class="line"># 启用CRaSH SSH支持。</span><br><span class="line">shell.ssh.enabled&#x3D; true</span><br><span class="line"># 未使用的连接关闭之后的毫秒数。</span><br><span class="line">shell.ssh.idle-timeout &#x3D; </span><br><span class="line"># SSH服务器密钥路径。</span><br><span class="line">shell.ssh.key-path&#x3D; </span><br><span class="line"># SSH端口。</span><br><span class="line">shell.ssh.port&#x3D; 2000</span><br><span class="line"># 启用CRaSH telnet支持。 如果TelnetPlugin可用，默认情况下启用。</span><br><span class="line">shell.telnet.enabled&#x3D; false</span><br><span class="line"># Telnet端口。</span><br><span class="line">shell.telnet.port&#x3D; 5000</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># GIT 信息配置</span><br><span class="line"># 生成的git信息属性文件的资源引用。</span><br><span class="line">spring.git.properties&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 标准出口</span><br><span class="line"># 模式，告诉聚合器如何从源存储库中的键。</span><br><span class="line">spring.metrics.export.aggregate.key-pattern&#x3D; </span><br><span class="line"># 全局存储库的前缀如果处于活动状态。</span><br><span class="line">spring.metrics.export.aggregate.prefix&#x3D; </span><br><span class="line"># 导出刻度之间以毫秒为单位的延迟。 按照这种延迟，指标将按计划导出到外部来源。</span><br><span class="line">spring.metrics.export.delay-millis&#x3D; 5000</span><br><span class="line"># 标志以启用度量标准导出（假设MetricWriter可用）。</span><br><span class="line">spring.metrics.export.enabled&#x3D; true</span><br><span class="line"># 要排除的度量名称列表。 应用后包括。</span><br><span class="line">spring.metrics.export.excludes&#x3D; </span><br><span class="line"># 要包含的度量名称的模式列表。</span><br><span class="line">spring.metrics.export.includes&#x3D; </span><br><span class="line"># redis存储库导出的密钥（如果活动）。</span><br><span class="line">spring.metrics.export.redis.key&#x3D; keys.spring.metrics</span><br><span class="line"># redis存储库的前缀 如果处于活动状态。</span><br><span class="line">spring.metrics.export.redis.prefix&#x3D; spring.metrics</span><br><span class="line"># 标志基于不导出不变的度量值来关闭任何可用的优化。</span><br><span class="line">spring.metrics.export.send-latest&#x3D; </span><br><span class="line"># 主机的statsd服务器接收导出的指标。</span><br><span class="line">spring.metrics.export.statsd.host&#x3D; </span><br><span class="line"># 接收导出指标的statsd服务器端口。</span><br><span class="line">spring.metrics.export.statsd.port&#x3D; 8125</span><br><span class="line"># statsd导出指标的前缀。</span><br><span class="line">spring.metrics.export.statsd.prefix&#x3D; </span><br><span class="line"># 每个MetricWriter bean名称具有特定的触发器属性。</span><br><span class="line">spring.metrics.export.triggers.*&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># ----------------------------------------</span><br><span class="line"># DEVTOOLS属性</span><br><span class="line"># ----------------------------------------</span><br><span class="line"></span><br><span class="line"># DEVTOOLS（开发工具属性）</span><br><span class="line"># 启用一个livereload.com兼容的服务器。</span><br><span class="line">spring.devtools.livereload.enabled&#x3D; true</span><br><span class="line">#  # Server port.</span><br><span class="line">spring.devtools.livereload.port&#x3D; 35729</span><br><span class="line"># 应该排除的触发完全重新启动的其他模式。</span><br><span class="line">spring.devtools.restart.additional-exclude&#x3D; </span><br><span class="line"># 观看更改的附加路径。</span><br><span class="line">spring.devtools.restart.additional-paths&#x3D; </span><br><span class="line"># 启用自动重启功能。</span><br><span class="line">spring.devtools.restart.enabled&#x3D; true</span><br><span class="line"># 应该排除的模式触发完全重新启动。</span><br><span class="line">spring.devtools.restart.exclude&#x3D; META-INF&#x2F;maven&#x2F;**,META-INF&#x2F;resources&#x2F;**,resources&#x2F;**,static&#x2F;**,public&#x2F;**,templates&#x2F;**,**&#x2F;*Test.class,**&#x2F;*Tests.class,git.properties</span><br><span class="line"># 轮询类路径更改之间等待的时间量（以毫秒为单位）。</span><br><span class="line">spring.devtools.restart.poll-interval&#x3D; 1000</span><br><span class="line"># 触发重新启动之前没有任何类路径更改所需的安静时间量（以毫秒为单位）。</span><br><span class="line">spring.devtools.restart.quiet-period&#x3D; 400</span><br><span class="line"># 更改后的特定文件的名称将触发重新启动检查。 如果未指定任何类路径文件更改将触发重新启动。</span><br><span class="line">spring.devtools.restart.trigger-file&#x3D; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 远程开发工具属性</span><br><span class="line"># 用于处理远程连接的上下文路径。</span><br><span class="line">spring.devtools.remote.context-path&#x3D; &#x2F;.~~spring-boot!~</span><br><span class="line"># 启用远程调试支持。</span><br><span class="line">spring.devtools.remote.debug.enabled&#x3D; true</span><br><span class="line"># 本地远程调试服务器端口。</span><br><span class="line">spring.devtools.remote.debug.local-port&#x3D; 8000</span><br><span class="line"># 用于连接到远程应用程序的代理主机。</span><br><span class="line">spring.devtools.remote.proxy.host&#x3D; </span><br><span class="line"># 用于连接到远程应用程序的代理端口。</span><br><span class="line">spring.devtools.remote.proxy.port&#x3D; </span><br><span class="line"># 启用远程重启。</span><br><span class="line">spring.devtools.remote.restart.enabled&#x3D; true</span><br><span class="line"># 建立连接所需的共享密钥（需要启用远程支持）。</span><br><span class="line">spring.devtools.remote.secret&#x3D; </span><br><span class="line"># HTTP头用于传输共享密钥。&lt;&#x2F; span&gt;</span><br><span class="line">spring.devtools.remote.secret-header-name&#x3D; X-AUTH-TOKEN</span><br><span class="line"></span><br><span class="line">＃----------------------------------------</span><br><span class="line">#TESTING PROPERTIES</span><br><span class="line">＃----------------------------------------</span><br><span class="line"></span><br><span class="line">spring.test.database.replace &#x3D; any＃要替换的现有DataSource的类型。</span><br><span class="line">spring.test.mockmvc.print &#x3D;默认#MVC打印选项。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;

&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s
      
    
    </summary>
    
    
      <category term="Java" scheme="https://kanchai.club/categories/Java/"/>
    
    
      <category term="SpringBoot" scheme="https://kanchai.club/tags/SpringBoot/"/>
    
  </entry>
  
</feed>
